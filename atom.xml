<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凌可语-lingkeyu</title>
  
  <subtitle>如梦初醒 始料未及 别来无恙~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lingkeyu.com/"/>
  <updated>2018-09-02T05:20:32.396Z</updated>
  <id>http://lingkeyu.com/</id>
  
  <author>
    <name>凌可语</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题-算法专题</title>
    <link href="http://lingkeyu.com/2018/05/18/%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98/"/>
    <id>http://lingkeyu.com/2018/05/18/面试题-算法专题/</id>
    <published>2018-05-18T15:48:17.000Z</published>
    <updated>2018-09-02T05:20:32.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阐述下-JavaScript-中的变量提升"><a href="#阐述下-JavaScript-中的变量提升" class="headerlink" title="阐述下 JavaScript 中的变量提升"></a>阐述下 JavaScript 中的变量提升</h2><p><hr><br>所谓<code>提升</code>，顾名思义即是 JavaScript 会将所有的声明提升到当前作用域的顶部。这也就意味着我们可以在某个变量声明前就使用该变量，不过虽然 JavaScript 会将声明提升到顶部，但是并不会执行真的初始化过程。<br><a id="more"></a></p><h2 id="阐述下-use-strict-的作用"><a href="#阐述下-use-strict-的作用" class="headerlink" title="阐述下 use strict; 的作用"></a>阐述下 use strict; 的作用</h2><p>use strict; 顾名思义也就是 JavaScript 会在所谓严格模式下执行，其一个主要的优势在于能够强制开发者避免使用未声明的变量。对于老版本的浏览器或者执行引擎则会自动忽略该指令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example of strict mode</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">catchThemAll();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">catchThemAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  x = <span class="number">3.14</span>; <span class="comment">// Error will be thrown</span></span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解释下什么是-Event-Bubbling-以及如何避免"><a href="#解释下什么是-Event-Bubbling-以及如何避免" class="headerlink" title="解释下什么是 Event Bubbling 以及如何避免"></a>解释下什么是 Event Bubbling 以及如何避免</h2><p>Event Bubbling 即指某个事件不仅会触发当前元素，还会以嵌套顺序传递到父元素中。直观而言就是对于某个子元素的点击事件同样会被父元素的点击事件处理器捕获。避免 Event Bubbling 的方式可以使用event.stopPropagation() 或者 IE 9 以下使用event.cancelBubble。</p><h2 id="与-的区别是什么"><a href="#与-的区别是什么" class="headerlink" title="== 与 === 的区别是什么"></a>== 与 === 的区别是什么</h2><p>=== 也就是所谓的严格比较，关键的区别在于=== 会同时比较类型与值，而不是仅比较值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example of comparators</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> === <span class="literal">false</span>; <span class="comment">// false</span></span><br><span class="line"><span class="number">2</span> == <span class="string">'2'</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span> === <span class="string">'2'</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="解释下-null-与-undefined-的区别"><a href="#解释下-null-与-undefined-的区别" class="headerlink" title="解释下 null 与 undefined 的区别"></a>解释下 null 与 undefined 的区别</h2><p>JavaScript 中，null 是一个可以被分配的值，设置为 null 的变量意味着其无值。而 undefined 则代表着某个变量虽然声明了但是尚未进行过任何赋值。</p><h2 id="解释下-原型继承-与-类继承-的区别"><a href="#解释下-原型继承-与-类继承-的区别" class="headerlink" title="解释下 原型继承 与 类继承 的区别"></a>解释下 原型继承 与 类继承 的区别</h2><p>在类继承中，类是不可变的，不同的语言中对于多继承的支持也不一样，有些语言中还支持接口、final、abstract 的概念。而原型继承则更为灵活，原型本身是可以可变的，并且对象可能继承自多个原型。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="找出整型数组中乘积最大的三个数"><a href="#找出整型数组中乘积最大的三个数" class="headerlink" title="找出整型数组中乘积最大的三个数"></a>找出整型数组中乘积最大的三个数</h4><p>给定一个包含整数的无序数组，要求找出乘积最大的三个数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unsorted_array = [<span class="number">-10</span>, <span class="number">7</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">-10</span>, <span class="number">-70</span>];</span><br><span class="line">computeProduct(unsorted_array); <span class="comment">// 21000</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortIntegers</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// greatest product is either (min1 * min2 * max1 || max1 * max2 * max3)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeProduct</span>(<span class="params">unsorted</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sorted_array = unsorted.sort(sortIntegers),</span><br><span class="line">    product1 = <span class="number">1</span>,</span><br><span class="line">    product2 = <span class="number">1</span>,</span><br><span class="line">    array_n_element = sorted_array.length - <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// Get the product of three largest integers in sorted array</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = array_n_element; x &gt; array_n_element - <span class="number">3</span>; x--) &#123;</span><br><span class="line">      product1 = product1 * sorted_array[x];</span><br><span class="line">  &#125;</span><br><span class="line">  product2 = sorted_array[<span class="number">0</span>] * sorted_array[<span class="number">1</span>] * sorted_array[array_n_element];</span><br><span class="line">  <span class="keyword">if</span> (product1 &gt; product2) <span class="keyword">return</span> product1;</span><br><span class="line">  <span class="keyword">return</span> product2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="寻找连续数组中的缺失数"><a href="#寻找连续数组中的缺失数" class="headerlink" title="寻找连续数组中的缺失数"></a>寻找连续数组中的缺失数</h4><p>给定某无序数组，其包含了 n 个连续数字中的 n – 1 个，已知上下边界，要求以O(n)的复杂度找出缺失的数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The output of the function should be 8</span></span><br><span class="line"><span class="keyword">var</span> array_of_integers = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> upper_bound = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> lower_bound = <span class="number">1</span>;</span><br><span class="line">findMissingNumber(array_of_integers, upper_bound, lower_bound); <span class="comment">//8</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMissingNumber</span>(<span class="params">array_of_integers, upper_bound, lower_bound</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Iterate through array to find the sum of the numbers</span></span><br><span class="line">  <span class="keyword">var</span> sum_of_integers = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array_of_integers.length; i++) &#123;</span><br><span class="line">    sum_of_integers += array_of_integers[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 以高斯求和公式计算理论上的数组和</span></span><br><span class="line">  <span class="comment">// Formula: [(N * (N + 1)) / 2] - [(M * (M - 1)) / 2];</span></span><br><span class="line">  <span class="comment">// N is the upper bound and M is the lower bound</span></span><br><span class="line">  upper_limit_sum = (upper_bound * (upper_bound + <span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">  lower_limit_sum = (lower_bound * (lower_bound - <span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">  theoretical_sum = upper_limit_sum - lower_limit_sum;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">return</span> (theoretical_sum - sum_of_integers)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><p>给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 Implementation</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array)); <span class="comment">// [1, 2, 3, 5, 9, 8]</span></span><br><span class="line"><span class="comment">// ES5 Implementation</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>];</span><br><span class="line">uniqueArray(array); <span class="comment">// [1, 2, 3, 5, 9, 8]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hashmap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> unique = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="comment">// If key returns null (unique), it is evaluated as false.</span></span><br><span class="line">    <span class="keyword">if</span>(!hashmap.hasOwnProperty([array[i]])) &#123;</span><br><span class="line">      hashmap[array[i]] = <span class="number">1</span>;</span><br><span class="line">      unique.push(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> unique;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组中元素最大差值计算"><a href="#数组中元素最大差值计算" class="headerlink" title="数组中元素最大差值计算"></a>数组中元素最大差值计算</h4><p>给定某无序数组，求取任意两个元素之间的最大差值，注意，这里要求差值计算中较小的元素下标必须小于较大元素的下标。譬如[7, 8, 4, 9, 9, 15, 3, 1, 10]这个数组的计算值是 11( 15 – 4 ) 而不是 14(15 – 1)，因为 15 的下标小于 1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">10</span>];</span><br><span class="line"><span class="comment">// [7, 8, 4, 9, 9, 15, 3, 1, 10] would return `11` based on the difference between `4` and `15`</span></span><br><span class="line"><span class="comment">// Notice: It is not `14` from the difference between `15` and `1` because 15 comes before 1.</span></span><br><span class="line">findLargestDifference(array);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLargestDifference</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果数组仅有一个元素，则直接返回 -1</span></span><br><span class="line">  <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">// current_min 指向当前的最小值</span></span><br><span class="line">  <span class="keyword">var</span> current_min = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> current_max_difference = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 遍历整个数组以求取当前最大差值，如果发现某个最大差值，则将新的值覆盖 current_max_difference</span></span><br><span class="line">  <span class="comment">// 同时也会追踪当前数组中的最小值，从而保证 `largest value in future` - `smallest value before it`</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &gt; current_min &amp;&amp; (array[i] - current_min &gt; current_max_difference)) &#123;</span><br><span class="line">      current_max_difference = array[i] - current_min;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] &lt;= current_min) &#123;</span><br><span class="line">      current_min = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// If negative or 0, there is no largest difference</span></span><br><span class="line">  <span class="keyword">if</span> (current_max_difference &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> current_max_difference;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组中元素乘积"><a href="#数组中元素乘积" class="headerlink" title="数组中元素乘积"></a>数组中元素乘积</h4><p>给定某无序数组，要求返回新数组 output ，其中 output[i] 为原数组中除了下标为 i 的元素之外的元素乘积，要求以 O(n) 复杂度实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstArray = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> secondArray = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> thirdArray = [<span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">2</span>];</span><br><span class="line">productExceptSelf(firstArray); <span class="comment">// [8, 8, 4, 16]</span></span><br><span class="line">productExceptSelf(secondArray); <span class="comment">// [0, 0, 0, 0]</span></span><br><span class="line">productExceptSelf(thirdArray); <span class="comment">// [12, 12, 8, -12]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">productExceptSelf</span>(<span class="params">numArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> product = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> size = numArray.length;</span><br><span class="line">  <span class="keyword">var</span> output = [];</span><br><span class="line">  <span class="comment">// From first array: [1, 2, 4, 16]</span></span><br><span class="line">  <span class="comment">// The last number in this case is already in the right spot (allows for us)</span></span><br><span class="line">  <span class="comment">// to just multiply by 1 in the next step.</span></span><br><span class="line">  <span class="comment">// This step essentially gets the product to the left of the index at index + 1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; size; x++) &#123;</span><br><span class="line">      output.push(product);</span><br><span class="line">      product = product * numArray[x];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// From the back, we multiply the current output element (which represents the product</span></span><br><span class="line">  <span class="comment">// on the left of the index, and multiplies it by the product on the right of the element)</span></span><br><span class="line">  <span class="keyword">var</span> product = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = size - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</span><br><span class="line">      output[i] = output[i] * product;</span><br><span class="line">      product = product * numArray[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h4><p>给定两个数组，要求求出两个数组的交集，注意，交集中的元素应该是唯一的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstArray = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> secondArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>];</span><br><span class="line">intersection(firstArray, secondArray); <span class="comment">// [2, 1]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersection</span>(<span class="params">firstArray, secondArray</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// The logic here is to create a hashmap with the elements of the firstArray as the keys.</span></span><br><span class="line">  <span class="comment">// After that, you can use the hashmap's O(1) look up time to check if the element exists in the hash</span></span><br><span class="line">  <span class="comment">// If it does exist, add that element to the new array.</span></span><br><span class="line">  <span class="keyword">var</span> hashmap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> intersectionArray = [];</span><br><span class="line">  firstArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    hashmap[element] = <span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// Since we only want to push unique elements in our case... we can implement a counter to keep track of what we already added</span></span><br><span class="line">  secondArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hashmap[element] === <span class="number">1</span>) &#123;</span><br><span class="line">      intersectionArray.push(element);</span><br><span class="line">      hashmap[element]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> intersectionArray;</span><br><span class="line">  <span class="comment">// Time complexity O(n), Space complexity O(n)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="颠倒字符串"><a href="#颠倒字符串" class="headerlink" title="颠倒字符串"></a>颠倒字符串</h4><p>给定某个字符串，要求将其中单词倒转之后然后输出，譬如”Welcome to this Javascript Guide!” 应该输出为 “emocleW ot siht tpircsavaJ !ediuG”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> string = <span class="string">"Welcome to this Javascript Guide!"</span>;</span><br><span class="line"><span class="comment">// Output becomes !ediuG tpircsavaJ siht ot emocleW</span></span><br><span class="line"><span class="keyword">var</span> reverseEntireSentence = reverseBySeparator(string, <span class="string">""</span>);</span><br><span class="line"><span class="comment">// Output becomes emocleW ot siht tpircsavaJ !ediuG</span></span><br><span class="line"><span class="keyword">var</span> reverseEachWord = reverseBySeparator(reverseEntireSentence, <span class="string">" "</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseBySeparator</span>(<span class="params">string, separator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> string.split(separator).reverse().join(separator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="乱序同字母字符串"><a href="#乱序同字母字符串" class="headerlink" title="乱序同字母字符串"></a>乱序同字母字符串</h4><p>给定两个字符串，判断是否颠倒字母而成的字符串，譬如Mary与Army就是同字母而顺序颠倒：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstWord = <span class="string">"Mary"</span>;</span><br><span class="line"><span class="keyword">var</span> secondWord = <span class="string">"Army"</span>;</span><br><span class="line">isAnagram(firstWord, secondWord); <span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAnagram</span>(<span class="params">first, second</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// For case insensitivity, change both words to lowercase.</span></span><br><span class="line">  <span class="keyword">var</span> a = first.toLowerCase();</span><br><span class="line">  <span class="keyword">var</span> b = second.toLowerCase();</span><br><span class="line">  <span class="comment">// Sort the strings, and join the resulting array to a string. Compare the results</span></span><br><span class="line">  a = a.split(<span class="string">""</span>).sort().join(<span class="string">""</span>);</span><br><span class="line">  b = b.split(<span class="string">""</span>).sort().join(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">return</span> a === b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="会问字符串"><a href="#会问字符串" class="headerlink" title="会问字符串"></a>会问字符串</h4><p>判断某个字符串是否为回文字符串，譬如racecar与race car都是回文字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">isPalindrome(<span class="string">"racecar"</span>); <span class="comment">// true</span></span><br><span class="line">isPalindrome(<span class="string">"race Car"</span>); <span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Replace all non-letter chars with "" and change to lowercase</span></span><br><span class="line">  <span class="keyword">var</span> lettersOnly = word.toLowerCase().replace(<span class="regexp">/\s/g</span>, <span class="string">""</span>);</span><br><span class="line">  <span class="comment">// Compare the string with the reversed version of the string</span></span><br><span class="line">  <span class="keyword">return</span> lettersOnly === lettersOnly.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h3><h4 id="使用两个栈实现入队与出队"><a href="#使用两个栈实现入队与出队" class="headerlink" title="使用两个栈实现入队与出队"></a>使用两个栈实现入队与出队</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inputStack = []; <span class="comment">// First stack</span></span><br><span class="line"><span class="keyword">var</span> outputStack = []; <span class="comment">// Second stack</span></span><br><span class="line"><span class="comment">// For enqueue, just push the item into the first stack</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enqueue</span>(<span class="params">stackInput, item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> stackInput.push(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dequeue</span>(<span class="params">stackInput, stackOutput</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Reverse the stack such that the first element of the output stack is the</span></span><br><span class="line">  <span class="comment">// last element of the input stack. After that, pop the top of the output to</span></span><br><span class="line">  <span class="comment">// get the first element that was ever pushed into the input stack</span></span><br><span class="line">  <span class="keyword">if</span> (stackOutput.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(stackInput.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> elementToOutput = stackInput.pop();</span><br><span class="line">      stackOutput.push(elementToOutput);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stackOutput.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断大括号是否闭合"><a href="#判断大括号是否闭合" class="headerlink" title="判断大括号是否闭合"></a>判断大括号是否闭合</h4><p>创建一个函数来判断给定的表达式中的大括号是否闭合：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> expression = <span class="string">"&#123;&#123;&#125;&#125;&#123;&#125;&#123;&#125;"</span></span><br><span class="line"><span class="keyword">var</span> expressionFalse = <span class="string">"&#123;&#125;&#123;&#123;&#125;"</span>;</span><br><span class="line">isBalanced(expression); <span class="comment">// true</span></span><br><span class="line">isBalanced(expressionFalse); <span class="comment">// false</span></span><br><span class="line">isBalanced(<span class="string">""</span>); <span class="comment">// true</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBalanced</span>(<span class="params">expression</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> checkString = expression;</span><br><span class="line">  <span class="keyword">var</span> stack = [];</span><br><span class="line">  <span class="comment">// If empty, parentheses are technically balanced</span></span><br><span class="line">  <span class="keyword">if</span> (checkString.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; checkString.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(checkString[i] === <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">      stack.push(checkString[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkString[i] === <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">      <span class="comment">// Pop on an empty array is undefined</span></span><br><span class="line">      <span class="keyword">if</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// If the array is not empty, it is not balanced</span></span><br><span class="line">  <span class="keyword">if</span> (stack.pop()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="二进制转换"><a href="#二进制转换" class="headerlink" title="二进制转换"></a>二进制转换</h4><p>通过某个递归函数将输入的数字转化为二进制字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">decimalToBinary(<span class="number">3</span>); <span class="comment">// 11</span></span><br><span class="line">decimalToBinary(<span class="number">8</span>); <span class="comment">// 1000</span></span><br><span class="line">decimalToBinary(<span class="number">1000</span>); <span class="comment">// 1111101000</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decimalToBinary</span>(<span class="params">digit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(digit &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// If digit is not divisible by 2 then recursively return proceeding</span></span><br><span class="line">    <span class="comment">// binary of the digit minus 1, 1 is added for the leftover 1 digit</span></span><br><span class="line">    <span class="keyword">if</span> (digit % <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> decimalToBinary((digit - <span class="number">1</span>) / <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Recursively return proceeding binary digits</span></span><br><span class="line">      <span class="keyword">return</span> decimalToBinary(digit / <span class="number">2</span>) + <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Exit condition</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveBinarySearch</span>(<span class="params">array, value, leftPosition, rightPosition</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Value DNE</span></span><br><span class="line">  <span class="keyword">if</span> (leftPosition &gt; rightPosition) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">var</span> middlePivot = <span class="built_in">Math</span>.floor((leftPosition + rightPosition) / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">if</span> (array[middlePivot] === value) &#123;</span><br><span class="line">    <span class="keyword">return</span> middlePivot;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[middlePivot] &gt; value) &#123;</span><br><span class="line">    <span class="keyword">return</span> recursiveBinarySearch(array, value, leftPosition, middlePivot - <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> recursiveBinarySearch(array, value, middlePivot + <span class="number">1</span>, rightPosition);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><h4 id="判断是否为-2-的指数值"><a href="#判断是否为-2-的指数值" class="headerlink" title="判断是否为 2 的指数值"></a>判断是否为 2 的指数值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">isPowerOfTwo(<span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line">isPowerOfTwo(<span class="number">64</span>); <span class="comment">// true</span></span><br><span class="line">isPowerOfTwo(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">isPowerOfTwo(<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line">isPowerOfTwo(<span class="number">-1</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// For the non-zero case:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPowerOfTwo</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `&amp;` uses the bitwise n.</span></span><br><span class="line">  <span class="comment">// In the case of number = 4; the expression would be identical to:</span></span><br><span class="line">  <span class="comment">// `return (4 &amp; 3 === 0)`</span></span><br><span class="line">  <span class="comment">// In bitwise, 4 is 100, and 3 is 011. Using &amp;, if two values at the same</span></span><br><span class="line">  <span class="comment">// spot is 1, then result is 1, else 0. In this case, it would return 000,</span></span><br><span class="line">  <span class="comment">// and thus, 4 satisfies are expression.</span></span><br><span class="line">  <span class="comment">// In turn, if the expression is `return (5 &amp; 4 === 0)`, it would be false</span></span><br><span class="line">  <span class="comment">// since it returns 101 &amp; 100 = 100 (NOT === 0)</span></span><br><span class="line">  <span class="keyword">return</span> number &amp; (number - <span class="number">1</span>) === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// For zero-case:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPowerOfTwoZeroCase</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (number !== <span class="number">0</span>) &amp;&amp; ((number &amp; (number - <span class="number">1</span>)) === <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;阐述下-JavaScript-中的变量提升&quot;&gt;&lt;a href=&quot;#阐述下-JavaScript-中的变量提升&quot; class=&quot;headerlink&quot; title=&quot;阐述下 JavaScript 中的变量提升&quot;&gt;&lt;/a&gt;阐述下 JavaScript 中的变量提升&lt;/h2&gt;&lt;p&gt;&lt;hr&gt;&lt;br&gt;所谓&lt;code&gt;提升&lt;/code&gt;，顾名思义即是 JavaScript 会将所有的声明提升到当前作用域的顶部。这也就意味着我们可以在某个变量声明前就使用该变量，不过虽然 JavaScript 会将声明提升到顶部，但是并不会执行真的初始化过程。&lt;br&gt;
    
    </summary>
    
      <category term="面试题" scheme="http://lingkeyu.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://lingkeyu.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="算法" scheme="http://lingkeyu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记(三)-vue实例的生命周期</title>
    <link href="http://lingkeyu.com/2018/04/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://lingkeyu.com/2018/04/02/Vue学习笔记(三)-生命周期/</id>
    <published>2018-04-02T15:02:01.000Z</published>
    <updated>2018-09-01T13:04:13.918Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Vue学习笔记-三"><a href="#Vue学习笔记-三" class="headerlink" title="Vue学习笔记(三)"></a><strong>Vue学习笔记(三)</strong></h4><h2 id="vue实例的生命周期"><a href="#vue实例的生命周期" class="headerlink" title="vue实例的生命周期"></a><a href="https://cn.vuejs.org/v2/guide/instance.html#实例生命周期" target="_blank" rel="noopener">vue实例的生命周期</a></h2><ul><li>什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！</li><li><a href="https://cn.vuejs.org/v2/api/#选项-生命周期钩子" target="_blank" rel="noopener">生命周期钩子</a>：就是生命周期事件的别名而已；</li><li>生命周期钩子 = 生命周期函数 = 生命周期事件<a id="more"></a></li><li>主要的生命周期函数分类：<ul><li>创建期间的生命周期函数：<ul><li>beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</li><li>created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</li><li>beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</li><li>mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</li></ul></li><li>运行期间的生命周期函数：<ul><li>beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</li><li>updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！</li></ul></li><li>销毁期间的生命周期函数：<ul><li>beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</li></ul></li></ul></li></ul><h2 id="vue-resource-实现-get-post-jsonp请求"><a href="#vue-resource-实现-get-post-jsonp请求" class="headerlink" title="vue-resource 实现 get, post, jsonp请求"></a><a href="https://github.com/pagekit/vue-resource" target="_blank" rel="noopener">vue-resource 实现 get, post, jsonp请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p><ol><li>之前的学习中，如何发起数据请求？</li><li>常见的数据请求类型？  get  post jsonp</li><li>测试的URL请求资源地址：<ul><li>get请求地址： <a href="http://vue.studyit.io/api/getlunbo" target="_blank" rel="noopener">http://vue.studyit.io/api/getlunbo</a></li><li>post请求地址：<a href="http://vue.studyit.io/api/post" target="_blank" rel="noopener">http://vue.studyit.io/api/post</a></li><li>jsonp请求地址：<a href="http://vue.studyit.io/api/jsonp" target="_blank" rel="noopener">http://vue.studyit.io/api/jsonp</a></li></ul></li><li>JSONP的实现原理<ul><li>由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li><li>可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）；</li><li>具体实现过程：<ul><li>先在客户端定义一个回调方法，预定义对数据的操作；</li><li>再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口；</li><li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li><li>客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了；</li></ul></li><li>带大家通过 Node.js ，来手动实现一个JSONP的请求例子；</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"> <span class="comment">// 导入解析 URL 地址的核心模块</span></span><br><span class="line"> <span class="keyword">const</span> urlModule = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"> <span class="keyword">const</span> server = http.createServer();</span><br><span class="line"> <span class="comment">// 监听 服务器的 request 请求事件，处理每个请求</span></span><br><span class="line"> server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> url = req.url;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 解析客户端请求的URL地址</span></span><br><span class="line">   <span class="keyword">var</span> info = urlModule.parse(url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据</span></span><br><span class="line">   <span class="keyword">if</span> (info.pathname === <span class="string">'/getjsonp'</span>) &#123;</span><br><span class="line">     <span class="comment">// 获取客户端指定的回调函数的名称</span></span><br><span class="line">     <span class="keyword">var</span> cbName = info.query.callback;</span><br><span class="line">     <span class="comment">// 手动拼接要返回给客户端的数据对象</span></span><br><span class="line">     <span class="keyword">var</span> data = &#123;</span><br><span class="line">       name: <span class="string">'zs'</span>,</span><br><span class="line">       age: <span class="number">22</span>,</span><br><span class="line">       gender: <span class="string">'男'</span>,</span><br><span class="line">       hobby: [<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>, <span class="string">'运动'</span>]</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：</span></span><br><span class="line">     <span class="keyword">var</span> result = <span class="string">`<span class="subst">$&#123;cbName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>;</span><br><span class="line">     <span class="comment">// 将拼接好的方法的调用，返回给客户端去解析执行</span></span><br><span class="line">     res.end(result);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     res.end(<span class="string">'404'</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'server running at http://127.0.0.1:3000'</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure> <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.</span> vue-resource 的配置步骤：</span><br><span class="line"> + 直接在页面中，通过`script`标签，引入 `vue-resource` 的脚本文件；</span><br><span class="line"> + 注意：引用的先后顺序是：先引用 `Vue` 的脚本文件，再引用 `vue-resource` 的脚本文件；</span><br><span class="line"><span class="number">6.</span> 发送get请求：</span><br><span class="line">```javascript</span><br><span class="line">getInfo() &#123; <span class="comment">// get 方式获取数据</span></span><br><span class="line">  this.$http.get(<span class="string">'http://127.0.0.1:8899/api/getlunbo'</span>).then(res =&gt; &#123;</span><br><span class="line">    console.log(res.body);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><p>发送post请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">postInfo() &#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'http://127.0.0.1:8899/api/post'</span>;</span><br><span class="line">  <span class="comment">// post 方法接收三个参数：</span></span><br><span class="line">  <span class="comment">// 参数1： 要请求的URL地址</span></span><br><span class="line">  <span class="comment">// 参数2： 要发送的数据对象</span></span><br><span class="line">  <span class="comment">// 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded</span></span><br><span class="line">  <span class="keyword">this</span>.$http.post(url, &#123; <span class="attr">name</span>: <span class="string">'zs'</span> &#125;, &#123; <span class="attr">emulateJSON</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发送JSONP请求获取数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jsonpInfo() &#123; <span class="comment">// JSONP形式从服务器获取数据</span></span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'http://127.0.0.1:8899/api/jsonp'</span>;</span><br><span class="line">  <span class="keyword">this</span>.$http.jsonp(url).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果" target="_blank" rel="noopener">手动实现筛选的方式</a>：</p><ul><li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;hr&gt; 输入筛选名称：</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"searchName"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">      &lt;tr v-<span class="keyword">for</span>=<span class="string">"item in search(searchName)"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/</span>td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          &lt;a href="#" @click.prevent="del(item.id)"&gt;删除&lt;/</span>a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;/</span>tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/tbody&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">search(name) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.list.filter(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x.name.indexOf(name) != <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue调试工具vue-devtools的安装步骤和使用"><a href="#Vue调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ol><li>HTML元素：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(<span class="string">'yyyy-mm-dd'</span>)&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>私有 <code>filters</code> 定义方式：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">filters: &#123; <span class="comment">// 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span></span><br><span class="line"></span><br><span class="line">    dataFormat(input, pattern = <span class="string">""</span>) &#123; <span class="comment">// 在参数列表中 通过 pattern="" 来指定形参默认值，防止报错</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(input);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取年月日</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 否则，就返回  年-月-日 时：分：秒</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取时分秒</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Vue学习笔记-三&quot;&gt;&lt;a href=&quot;#Vue学习笔记-三&quot; class=&quot;headerlink&quot; title=&quot;Vue学习笔记(三)&quot;&gt;&lt;/a&gt;&lt;strong&gt;Vue学习笔记(三)&lt;/strong&gt;&lt;/h4&gt;&lt;h2 id=&quot;vue实例的生命周期&quot;&gt;&lt;a href=&quot;#vue实例的生命周期&quot; class=&quot;headerlink&quot; title=&quot;vue实例的生命周期&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/instance.html#实例生命周期&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue实例的生命周期&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/api/#选项-生命周期钩子&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;生命周期钩子&lt;/a&gt;：就是生命周期事件的别名而已；&lt;/li&gt;
&lt;li&gt;生命周期钩子 = 生命周期函数 = 生命周期事件
    
    </summary>
    
      <category term="vue" scheme="http://lingkeyu.com/categories/vue/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="前端学习" scheme="http://lingkeyu.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础知识" scheme="http://lingkeyu.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="vue 知识" scheme="http://lingkeyu.com/tags/vue-%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记(二)</title>
    <link href="http://lingkeyu.com/2018/03/26/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <id>http://lingkeyu.com/2018/03/26/vue学习笔记(二)/</id>
    <published>2018-03-26T13:22:41.000Z</published>
    <updated>2018-09-01T13:05:18.975Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Vue学习笔记-二"><a href="#Vue学习笔记-二" class="headerlink" title="Vue学习笔记(二)"></a><strong>Vue学习笔记(二)</strong></h4><h2 id="Vue调试工具vue-devtools的安装步骤和使用"><a href="#Vue调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue调试工具vue-devtools的安装步骤和使用"></a>Vue调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN" target="_blank" rel="noopener">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><a id="more"></a><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>概念：Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ol><li>HTML元素：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;td&gt;&#123;&#123;item.ctime | dataFormat(<span class="string">'yyyy-mm-dd'</span>)&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>私有 <code>filters</code> 定义方式：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">filters: &#123; <span class="comment">// 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span></span><br><span class="line"></span><br><span class="line">    dataFormat(input, pattern = <span class="string">""</span>) &#123; <span class="comment">// 在参数列表中 通过 pattern="" 来指定形参默认值，防止报错</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(input);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取年月日</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 否则，就返回  年-月-日 时：分：秒</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取时分秒</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；</p></blockquote><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个全局过滤器</span></span><br><span class="line"></span><br><span class="line">Vue.filter(<span class="string">'dataFormat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">input, pattern = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(input);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取年月日</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> y = dt.getFullYear();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> m = (dt.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> d = dt.getDate().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 否则，就返回  年-月-日 时：分：秒</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取时分秒</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hh = dt.getHours().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mm = dt.getMinutes().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ss = dt.getSeconds().toString().padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote><h2 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a>键盘修饰符以及自定义键盘修饰符</h2><h3 id="1-x中自定义键盘修饰符【了解即可】"><a href="#1-x中自定义键盘修饰符【了解即可】" class="headerlink" title="1.x中自定义键盘修饰符【了解即可】"></a>1.x中自定义键盘修饰符【了解即可】</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.directive(<span class="string">'on'</span>).keyCodes.f2 = <span class="number">113</span>;</span><br></pre></td></tr></table></figure><h3 id="2-x中自定义键盘修饰符"><a href="#2-x中自定义键盘修饰符" class="headerlink" title="2.x中自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#键值修饰符" target="_blank" rel="noopener">2.x中自定义键盘修饰符</a></h3><ol><li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.config.keyCodes.f2 = <span class="number">113</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用自定义的按键修饰符：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"name"</span> @keyup.f2=<span class="string">"add"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></h2><ol><li>自定义全局和局部的 自定义指令：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span></span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line"></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123; <span class="comment">// inserted 表示被绑定元素插入父节点时调用</span></span><br><span class="line"></span><br><span class="line">    el.focus();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span></span><br><span class="line"></span><br><span class="line">  directives: &#123;</span><br><span class="line"></span><br><span class="line">    color: &#123; <span class="comment">// 为元素设置指定的字体颜色</span></span><br><span class="line"></span><br><span class="line">      bind(el, binding) &#123;</span><br><span class="line"></span><br><span class="line">        el.style.color = binding.value;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">'font-weight'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding2</span>) </span>&#123; <span class="comment">// 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span></span><br><span class="line"></span><br><span class="line">      el.style.fontWeight = binding2.value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义指令的使用方式：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"searchName"</span> v-focus v-color=<span class="string">"'red'"</span> v-font-weight=<span class="string">"900"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue-1-x-中-自定义元素指令【已废弃-了解即可】"><a href="#Vue-1-x-中-自定义元素指令【已废弃-了解即可】" class="headerlink" title="Vue 1.x 中 自定义元素指令【已废弃,了解即可】"></a>Vue 1.x 中 自定义元素指令【已废弃,了解即可】</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.elementDirective(<span class="string">'red-color'</span>, &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.el.style.color = <span class="string">'red'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;red-color&gt;<span class="number">1232</span>&lt;<span class="regexp">/red-color&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol><li><a href="https://v1-cn.vuejs.org/" target="_blank" rel="noopener">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue.js 2.x 文档</a></li><li><a href="http://www.css88.com/archives/7715" target="_blank" rel="noopener">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="http://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="noopener">js 里面的键盘事件对应的键码</a></li><li><a href="http://www.cnblogs.com/kidney/p/6052935.html" target="_blank" rel="noopener">Vue.js双向绑定的实现原理</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Vue学习笔记-二&quot;&gt;&lt;a href=&quot;#Vue学习笔记-二&quot; class=&quot;headerlink&quot; title=&quot;Vue学习笔记(二)&quot;&gt;&lt;/a&gt;&lt;strong&gt;Vue学习笔记(二)&lt;/strong&gt;&lt;/h4&gt;&lt;h2 id=&quot;Vue调试工具vue-devtools的安装步骤和使用&quot;&gt;&lt;a href=&quot;#Vue调试工具vue-devtools的安装步骤和使用&quot; class=&quot;headerlink&quot; title=&quot;Vue调试工具vue-devtools的安装步骤和使用&quot;&gt;&lt;/a&gt;Vue调试工具&lt;code&gt;vue-devtools&lt;/code&gt;的安装步骤和使用&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue.js devtools - 翻墙安装方式 - 推荐&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://lingkeyu.com/categories/vue/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="前端学习" scheme="http://lingkeyu.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础知识" scheme="http://lingkeyu.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="vue 知识" scheme="http://lingkeyu.com/tags/vue-%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记(一)</title>
    <link href="http://lingkeyu.com/2018/03/17/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://lingkeyu.com/2018/03/17/vue学习笔记(一)/</id>
    <published>2018-03-17T03:02:31.000Z</published>
    <updated>2018-09-01T13:04:20.906Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Vue学习笔记-一"><a href="#Vue学习笔记-一" class="headerlink" title="Vue学习笔记(一)"></a><strong>Vue学习笔记(一)</strong></h4><h3 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h3><ul><li><p>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</p></li><li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和Angular.js、React.js 一起，并成为前端三大主流框架！</p><a id="more"></a></li><li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</p></li><li><p>前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果；</p></li></ul><h2 id="为什么要学习流行框架"><a href="#为什么要学习流行框架" class="headerlink" title="为什么要学习流行框架"></a>为什么要学习流行框架</h2><ul><li>企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱；<ul><li>企业中，使用框架，能够提高开发的效率；</li></ul></li></ul><ul><li>提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</li><li>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li></ul><h2 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h2><ul><li><p>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。</p><ul><li>node 中的 express；</li></ul></li></ul><ul><li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。<ul><li><ol><li>从Jquery 切换到 Zepto</li></ol></li><li><ol start="2"><li>从 EJS 切换到 art-template</li></ol></li></ul></li></ul><h2 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h2><ul><li>MVC 是后端的分层开发概念；</li><li><p>MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel</p></li><li><p>为什么有了MVC还要有MVVM</p></li></ul><h2 id="Vue-js-基本代码-和-MVVM-之间的对应关系"><a href="#Vue-js-基本代码-和-MVVM-之间的对应关系" class="headerlink" title="Vue.js 基本代码 和 MVVM 之间的对应关系"></a>Vue.js 基本代码 和 MVVM 之间的对应关系</h2><h2 id="Vue之-基本的代码结构和插值表达式、v-cloak"><a href="#Vue之-基本的代码结构和插值表达式、v-cloak" class="headerlink" title="Vue之 - 基本的代码结构和插值表达式、v-cloak"></a>Vue之 - <code>基本的代码结构</code>和<code>插值表达式</code>、<code>v-cloak</code></h2><h2 id="Vue指令之v-text和v-html"><a href="#Vue指令之v-text和v-html" class="headerlink" title="Vue指令之v-text和v-html"></a>Vue指令之<code>v-text</code>和<code>v-html</code></h2><h2 id="Vue指令之v-bind的三种用法"><a href="#Vue指令之v-bind的三种用法" class="headerlink" title="Vue指令之v-bind的三种用法"></a>Vue指令之<code>v-bind</code>的三种用法</h2><ol><li><p>直接使用指令<code>v-bind</code></p></li><li><p>使用简化指令<code>:</code></p></li><li><p>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></p></li></ol><h2 id="Vue指令之v-on和跑马灯效果"><a href="#Vue指令之v-on和跑马灯效果" class="headerlink" title="Vue指令之v-on和跑马灯效果"></a>Vue指令之<code>v-on</code>和<code>跑马灯效果</code></h2><h3 id="跑马灯效果"><a href="#跑马灯效果" class="headerlink" title="跑马灯效果"></a>跑马灯效果</h3><ol><li>HTML结构：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;input type="button" value="开启" v-on:click="go"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;input type="button" value="停止" v-on:click="stop"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>Vue实例：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"></span><br><span class="line">     el: <span class="string">'#app'</span>,</span><br><span class="line"></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">       info: <span class="string">'vue轻便 易上手~！'</span>,</span><br><span class="line"></span><br><span class="line">       intervalId: <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">     methods: &#123;</span><br><span class="line"></span><br><span class="line">       go() &#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 如果当前有定时器在运行，则直接return</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span>.intervalId != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 开始定时器</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">this</span>.info = <span class="keyword">this</span>.info.substring(<span class="number">1</span>) + <span class="keyword">this</span>.info.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">         &#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">       &#125;,</span><br><span class="line"></span><br><span class="line">       stop() &#123;</span><br><span class="line"></span><br><span class="line">         clearInterval(<span class="keyword">this</span>.intervalId);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h2 id="Vue指令之v-on的缩写和事件修饰符"><a href="#Vue指令之v-on的缩写和事件修饰符" class="headerlink" title="Vue指令之v-on的缩写和事件修饰符"></a>Vue指令之<code>v-on的缩写</code>和<code>事件修饰符</code></h2><h3 id="事件修饰符："><a href="#事件修饰符：" class="headerlink" title="事件修饰符："></a>事件修饰符：</h3><ul><li><p>.stop       阻止冒泡</p></li><li><p>.prevent    阻止默认事件</p></li><li><p>.capture    添加事件侦听器时使用事件捕获模式</p></li><li><p>.self       只当事件在该元素本身（比如不是子元素）触发时触发回调</p></li><li><p>.once       事件只触发一次</p></li></ul><h2 id="Vue指令之v-model和双向数据绑定"><a href="#Vue指令之v-model和双向数据绑定" class="headerlink" title="Vue指令之v-model和双向数据绑定"></a>Vue指令之<code>v-model</code>和<code>双向数据绑定</code></h2><h2 id="简易计算器案例"><a href="#简易计算器案例" class="headerlink" title="简易计算器案例"></a>简易计算器案例</h2><ol><li>HTML 代码结构</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"n1"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;select v-model=<span class="string">"opt"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=<span class="string">"0"</span>&gt;+&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=<span class="string">"1"</span>&gt;-&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=<span class="string">"2"</span>&gt;*&lt;/option&gt;</span><br><span class="line"></span><br><span class="line">    &lt;option value=<span class="string">"3"</span>&gt;÷&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;/</span>select&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"n2"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=<span class="string">"button"</span> value=<span class="string">"="</span> v-on:click=<span class="string">"getResult"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"result"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Vue实例代码：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"></span><br><span class="line">     el: <span class="string">'#app'</span>,</span><br><span class="line"></span><br><span class="line">     data: &#123;</span><br><span class="line"></span><br><span class="line">       n1: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       n2: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       result: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">       opt: <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line">     &#125;,</span><br><span class="line"></span><br><span class="line">     methods: &#123;</span><br><span class="line"></span><br><span class="line">       getResult() &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">switch</span> (<span class="keyword">this</span>.opt) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) + <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) - <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) * <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line"></span><br><span class="line">             <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) / <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h2 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h2><h3 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h3><ol><li><p>数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :<span class="class"><span class="keyword">class</span></span>=<span class="string">"['red', 'thin']"</span>&gt;这是一个邪恶的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数组中使用三元表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :<span class="class"><span class="keyword">class</span></span>=<span class="string">"['red', 'thin', isactive?'active':'']"</span>&gt;这是一个邪恶的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数组中嵌套对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :<span class="class"><span class="keyword">class</span></span>=<span class="string">"['red', 'thin', &#123;'active': isactive&#125;]"</span>&gt;这是一个邪恶的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>直接使用对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;red:true, italic:true, active:true, thin:true&#125;"</span>&gt;这是一个邪恶的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h3><ol><li><p>直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">"&#123;color: 'red', 'font-size': '40px'&#125;"</span>&gt;这是一个善良的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中</p><ul><li><p>在data上定义样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="string">'font-size'</span>: <span class="string">'40px'</span>, <span class="string">'font-weight'</span>: <span class="string">'200'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在元素中，通过属性绑定的形式，将样式对象应用到元素中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">"h1StyleObj"</span>&gt;这是一个善良的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 <code>:style</code> 中通过数组，引用多个 <code>data</code> 上的样式对象</p><ul><li><p>在data上定义样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">        h1StyleObj: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="string">'font-size'</span>: <span class="string">'40px'</span>, <span class="string">'font-weight'</span>: <span class="string">'200'</span> &#125;,</span><br><span class="line">        h1StyleObj2: &#123; <span class="attr">fontStyle</span>: <span class="string">'italic'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在元素中，通过属性绑定的形式，将样式对象应用到元素中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">"[h1StyleObj, h1StyleObj2]"</span>&gt;这是一个善良的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Vue指令之v-for和key属性"><a href="#Vue指令之v-for和key属性" class="headerlink" title="Vue指令之v-for和key属性"></a>Vue指令之<code>v-for</code>和<code>key</code>属性</h2><ol><li>迭代数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-<span class="keyword">for</span>=<span class="string">"(item, i) in list"</span>&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>迭代对象中的属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 循环遍历对象身上的属性 --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div v-<span class="keyword">for</span>=<span class="string">"(val, key, i) in userInfo"</span>&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>迭代数字</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;p v-<span class="keyword">for</span>=<span class="string">"i in 10"</span>&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.2.0+ 的版本里，<strong>当在组件中使用</strong> v-for 时，key 现在是必须的。</p></blockquote><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “<strong>就地复用</strong>” 策略。如果数据项的顺序被改变，Vue将<strong>不是移动 DOM 元素来匹配数据项的顺序</strong>， 而是<strong>简单复用此处每个元素</strong>，并且确保它在特定索引下显示已被渲染过的每个元素。</p><p>为了给 Vue 一个提示，<strong>以便它能跟踪每个节点的身份，从而重用和重新排序现有元素</strong>，你需要为每项提供一个唯一 key 属性。</p><h2 id="Vue指令之v-if和v-show"><a href="#Vue指令之v-if和v-show" class="headerlink" title="Vue指令之v-if和v-show"></a>Vue指令之<code>v-if</code>和<code>v-show</code></h2><blockquote><p>一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。</p></blockquote><ol><li>1.x 版本中的filterBy指令，在2.x中已经被废除：</li></ol><p><a href="https://v1-cn.vuejs.org/api/#filterBy" target="_blank" rel="noopener">filterBy - 指令</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tr v-<span class="keyword">for</span>=<span class="string">"item in list | filterBy searchName in 'name'"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/</span>td&gt;</span><br><span class="line"></span><br><span class="line">  &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;a href="#" @click.prevent="del(item.id)"&gt;删除&lt;/</span>a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>tr&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在2.x版本中<a href="https://cn.vuejs.org/v2/guide/list.html#显示过滤-排序结果" target="_blank" rel="noopener">手动实现筛选的方式</a>：</li></ol><ul><li>筛选框绑定到 VM 实例中的 <code>searchName</code> 属性：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;hr&gt; 输入筛选名称：</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"searchName"</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>在使用 <code>v-for</code> 指令循环每一行数据的时候，不再直接 <code>item in list</code>，而是 <code>in</code> 一个 过滤的methods 方法，同时，把过滤条件<code>searchName</code>传递进去：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">      &lt;tr v-<span class="keyword">for</span>=<span class="string">"item in search(searchName)"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/</span>td&gt;</span><br><span class="line"></span><br><span class="line">        &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          &lt;a href="#" @click.prevent="del(item.id)"&gt;删除&lt;/</span>a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;/</span>tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/tbody&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>search</code> 过滤方法中，使用 数组的 <code>filter</code> 方法进行过滤：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">search(name) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.list.filter(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x.name.indexOf(name) != <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Vue学习笔记-一&quot;&gt;&lt;a href=&quot;#Vue学习笔记-一&quot; class=&quot;headerlink&quot; title=&quot;Vue学习笔记(一)&quot;&gt;&lt;/a&gt;&lt;strong&gt;Vue学习笔记(一)&lt;/strong&gt;&lt;/h4&gt;&lt;h3 id=&quot;什么是Vue-js&quot;&gt;&lt;a href=&quot;#什么是Vue-js&quot; class=&quot;headerlink&quot; title=&quot;什么是Vue.js&quot;&gt;&lt;/a&gt;什么是Vue.js&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vue.js 是前端的&lt;strong&gt;主流框架之一&lt;/strong&gt;，和Angular.js、React.js 一起，并成为前端三大主流框架！&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://lingkeyu.com/categories/vue/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="前端学习" scheme="http://lingkeyu.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础知识" scheme="http://lingkeyu.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="vue 知识" scheme="http://lingkeyu.com/tags/vue-%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>工作中需要掌握的Git命令</title>
    <link href="http://lingkeyu.com/2018/01/23/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84Git%E5%91%BD%E4%BB%A4/"/>
    <id>http://lingkeyu.com/2018/01/23/工作中需要掌握的Git命令/</id>
    <published>2018-01-23T15:22:11.000Z</published>
    <updated>2018-09-01T13:04:47.816Z</updated>
    
    <content type="html"><![CDATA[<h4 id="工作中需要掌握的Git命令"><a href="#工作中需要掌握的Git命令" class="headerlink" title="工作中需要掌握的Git命令"></a><strong>工作中需要掌握的Git命令</strong></h4><p><hr><br><a id="more"></a> </p><h4 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h4><ol><li>#配置使用git仓库的人员姓名  </li><li>git config –global user.name “Your Name Comes Here”  </li><li>#配置使用git仓库的人员email  </li><li>git config –global user.email <a href="mailto:you@yourdomain.example.com" target="_blank" rel="noopener">you@yourdomain.example.com</a>  </li><li>#配置到缓存 默认15分钟  </li><li>git config –global credential.helper cache   </li><li>#修改缓存时间  </li><li>git config –global credential.helper ‘cache –timeout=3600’    </li><li>git config –global color.ui true  </li><li>git config –global alias.co checkout  </li><li>git config –global alias.ci commit  </li><li>git config –global alias.st status  </li><li>git config –global alias.br branch  </li><li>git config –global core.editor “mate -w”    # #### 设置Editor使用textmate  </li><li>git config -1 #列举所有配置  </li><li>#用户的git配置文件~/.gitconfig  <h4 id="查看、添加、提交、删除、找回，重置修改文件"><a href="#查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文件"></a>查看、添加、提交、删除、找回，重置修改文件</h4></li><li>git help <command>  # 显示command的help  </li><li>git show            # 显示某次提交的内容  </li><li>git show $id  </li><li>git co  – <file>   # 抛弃工作区修改  </file></li><li>git co  .           # 抛弃工作区修改  </li><li>git add <file>      # 将工作文件修改提交到本地暂存区  </file></li><li>git add .           # 将所有修改过的工作文件提交暂存区  </li><li>git rm <file>       # 从版本库中删除文件  </file></li><li>git rm <file> –cached  # 从版本库中删除文件，但不删除文件  </file></li><li>git reset <file>    # 从暂存区恢复到工作文件  </file></li><li>git reset – .      # 从暂存区恢复到工作文件  </li><li>git reset –hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改  </li><li>git ci <file>  </file></li><li>git ci .  </li><li>git ci -a           # 将git add, git rm和git ci等操作都合并在一起做  </li><li>git ci -am “some comments”  </li><li>git ci –amend      # 修改最后一次提交记录  </li><li>git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象  </li><li>git revert HEAD     # 恢复最后一次提交的状态  <h4 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h4></li><li>git diff <file>     # 比较当前文件和暂存区文件差异  </file></li><li>git diff  </li><li>git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异  </li><li>git diff <branch1>..<branch2> # 在两个分支之间比较  </branch2></branch1></li><li>git diff –staged   # 比较暂存区和版本库差异  </li><li>git diff –cached   # 比较暂存区和版本库差异  </li><li>git diff –stat     # 仅仅比较统计信息<br>查看提交记录</li><li>git log  </li><li>git log <file>      # 查看该文件每次提交记录  </file></li><li>git log -p <file>   # 查看每次详细修改内容的diff  </file></li><li>git log -p -2       # 查看最近两次详细修改内容的diff  </li><li>git log –stat      #查看提交统计信息<br>tig<br><code>Mac上可以使用tig代替diff和log，brew install tig取得Git仓库</code></li><li>#初始化一个版本仓库  </li><li>git init  </li><li>#Clone远程版本库  </li><li>git clone <a href="mailto:git@xbc.me" target="_blank" rel="noopener">git@xbc.me</a>:wordpress.git  </li><li>#添加远程版本库origin，语法为 git remote add [shortname] [url]  </li><li>git remote add origin <a href="mailto:git@xbc.me" target="_blank" rel="noopener">git@xbc.me</a>:wordpress.git  </li><li>#查看远程仓库  </li><li>git remote -v<h4 id="提交你的修改"><a href="#提交你的修改" class="headerlink" title="提交你的修改"></a>提交你的修改</h4></li><li>#添加当前修改的文件到暂存区  </li><li>git add .  </li><li>#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件  </li><li>git add -u  </li><li>#提交你的修改  </li><li>git commit –m “你的注释”  </li><li>#推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]  </li><li>git push origin master  </li><li>#查看文件状态  </li><li>git status  </li><li>#跟踪新文件  </li><li>git add readme.txt  </li><li>#从当前跟踪列表移除文件，并完全删除  </li><li>git rm readme.txt  </li><li>#仅在暂存区删除，保留文件在当前目录，不再跟踪  </li><li>git rm –cached readme.txt  </li><li>#重命名文件  </li><li>git mv reademe.txt readme  </li><li>#查看提交的历史记录  </li><li>git log  </li><li>#修改最后一次提交注释的，利用–amend参数  </li><li>git commit –amend  </li><li>#忘记提交某些修改，下面的三条命令只会得到一个提交。  </li><li>git commit –m &quot;add readme.txt&quot;  </li><li>git add readme_forgotten  </li><li>git commit –amend  </li><li>#假设你已经使用git add .，将修改过的文件a、b加到暂存区  </li><li>#现在你只想提交a文件，不想提交b文件，应该这样  </li><li>git reset HEAD b  </li><li>#取消对文件的修改  </li><li>git checkout –- readme.txt<h4 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h4></li><li>git br -r           # 查看远程分支  </li><li>git br &lt;new_branch&gt; # 创建新的分支  </li><li>git br -v           # 查看各个分支最后提交信息  </li><li>git br –merged     # 查看已经被合并到当前分支的分支  </li><li>git br –no-merged  # 查看尚未被合并到当前分支的分支  </li><li>git co <branch>     # 切换到某个分支  </branch></li><li>git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去  </li><li>git co -b &lt;new_branch&gt; <branch>  # 基于branch创建新的new_branch  </branch></li><li>git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除  </li><li>git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支  </li><li>git br -d <branch>  # 删除某个分支  </branch></li><li>git br -D <branch>  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)  <h4 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h4></branch></li><li>git merge <branch>               # 将branch分支合并到当前分支  </branch></li><li>git merge origin/master –no-ff  # 不要Fast-Foward合并，这样可以生成merge提交  </li><li>git rebase master <branch>       # 将master rebase到branch，相当于：  </branch></li><li>git co <branch> &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge <branch>  <h4 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h4></branch></branch></li><li>git diff &gt; ../sync.patch         # 生成补丁  </li><li>git apply ../sync.patch          # 打补丁  </li><li>git apply –check ../sync.patch  #测试补丁能否成功<br>Git暂存管理</li><li>git stash                        # 暂存  </li><li>git stash list                   # 列所有stash  </li><li>git stash apply                  # 恢复暂存的内容  </li><li>git stash drop                   # 删除暂存区  <h4 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h4></li><li>git pull                         # 抓取远程仓库所有分支更新并合并到本地  </li><li>git pull –no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并  </li><li>git fetch origin                 # 抓取远程仓库更新  </li><li>git merge origin/master          # 将远程主分支合并到本地当前分支  </li><li>git co –track origin/branch     # 跟踪某个远程分支创建相应的本地分支  </li><li>git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上  </li><li>git push                         # push所有分支  </li><li>git push origin master           # 将本地主分支推到远程主分支  </li><li>git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)  </li><li>git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名  </li><li>git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支  </li><li>git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d <branch>)，然后再push删除远程分支<br>基本的分支管理</branch></li><li>#创建一个分支  </li><li>git branch dev  </li><li>#切换工作目录到dev  </li><li>git chekcout dev  </li><li>#将上面的命令合在一起，创建dev分支并切换到dev  </li><li>git chekcout –b dev  </li><li>#合并dev分支，当前工作目录为master  </li><li>git merge dev  </li><li>#合并完成后，没有出现冲突，删除dev分支  </li><li>git branch –d dev  </li><li>#拉去远程仓库的数据，语法为 git fetch [remote-name]  </li><li>git fetch  </li><li>#fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并  </li><li>git pull  </li><li>#查看远程仓库的信息  </li><li>git remote show origin  </li><li>#建立本地的dev分支追踪远程仓库的develop分支  </li><li>git checkout –b dev origin/develop<br>Git远程仓库管理</li><li>git remote -v                    # 查看远程服务器地址和仓库名称  </li><li>git remote show origin           # 查看远程服务器仓库状态  </li><li>git remote add origin git@ github:robbin/robbin_site.git         # 添加远程仓库地址  </li><li>git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)  </li><li>git remote rm <repository>       # 删除远程仓库<br>创建远程仓库</repository></li><li>git clone –bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库  </li><li>scp -r my_project.git git@ git.csdn.net:~      # 将纯仓库上传到服务器上  </li><li>mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库  </li><li>git remote add origin git@ github.com:robbin/robbin_site.git    # 设置远程仓库地址  </li><li>git push -u origin master                                      # 客户端首次提交  </li><li>git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track  </li><li>git remote set-head origin master   # 设置远程仓库的HEAD指向master分支<br>也可以命令设置跟踪远程库和本地库</li><li>git branch –set-upstream master origin/master  </li><li>git branch –set-upstream develop origin/develop  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;工作中需要掌握的Git命令&quot;&gt;&lt;a href=&quot;#工作中需要掌握的Git命令&quot; class=&quot;headerlink&quot; title=&quot;工作中需要掌握的Git命令&quot;&gt;&lt;/a&gt;&lt;strong&gt;工作中需要掌握的Git命令&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;hr&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://lingkeyu.com/categories/Git/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="Git" scheme="http://lingkeyu.com/tags/Git/"/>
    
      <category term="工作" scheme="http://lingkeyu.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>个人知识总结(三)</title>
    <link href="http://lingkeyu.com/2017/08/20/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93(%E4%B8%89)/"/>
    <id>http://lingkeyu.com/2017/08/20/个人知识总结(三)/</id>
    <published>2017-08-20T12:12:41.000Z</published>
    <updated>2018-09-01T13:04:33.967Z</updated>
    
    <content type="html"><![CDATA[<h4 id="个人知识总结-三"><a href="#个人知识总结-三" class="headerlink" title="个人知识总结(三)"></a><strong>个人知识总结(三)</strong></h4><h3 id="设计模式-单例模式"><a href="#设计模式-单例模式" class="headerlink" title="设计模式 - 单例模式"></a>设计模式 - 单例模式</h3><h4 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h4><p>  把一个项目按照页面或者功能分割成不同的任务,交给项目中不同的成员开发.开发结束之后将代码合并到一起.</p><ul><li>多人协作开发的问题: 变量名 函数名 冲突</li><li>为了防止全局变量污染: 闭包但是闭包并不完美,所以选择搭配设计模式来进一步进行项目开发<a id="more"></a><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4></li><li><code>表现形式 : 就是一个对象 : {  name : xxx  , age : function(){}  };</code></li><li>定义 : 把描述同一功能的属性和方法放到一个对象[命名空间] </li><li>在设计模式当中,这个person不仅仅是一个对象名,还是一个命名空间,多个命名空间是相互独立的,互不干扰</li><li>好处 : 不受全局变量的污染和干扰.并且可以相互调用方法</li><li>由来 :  单例模式的本质就是一个对象 , 它object类上的一个实例,实例与实例之间互不干扰,叫做单独的实例,简称 “单例”</li></ul><h4 id="高级单例模式"><a href="#高级单例模式" class="headerlink" title="高级单例模式"></a>高级单例模式</h4><ul><li>定义 :  在高级单例模式当中,我们不只会把一个对象赋值给一个命名空间,我们会让它先执行一个自执行函数, [就形成了一个闭包,一个不销毁的作用域] 在自执行函数中,返回一个对象给这个命名空间</li><li>好处 : 可以在私有的作用于当中,创建很多属性和方法,仅需要把我们使用的属性和方法暴露在这个对象当中即可  <h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4></li><li>把实现同一功能的代码放进一个函数,当实现类似功能时,只需要执行这个函数即可,传参数不同即可,减少代码的冗余,<code>&quot;高内聚 , 低耦合&quot;</code>  –&gt;  函数的封装</li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li>oop / op : 面向对象缩写 ,  面向对象思想</li><li>定义 :  面向类的封装继承和多态 , 通过简单的实例化,调用其它方法和属性</li><li>JS 就是通过面向对象的思想设计开发出来的</li><li>需要了解  <code>对象</code> <code>类</code> <code>实例</code></li><li>对象  :  万物皆对象,多为一种泛指,可以是任何物体</li><li>类 :  对象中具有同一属性和特征的集合,  类又分为大类和小类   </li><li><p>实例  :  就是类中的一个具体的细分我们研究当前实例具有哪些属性和方法,那么证明当前类中的其他实例也同样具有</p><h4 id="JS中的内置类"><a href="#JS中的内置类" class="headerlink" title="JS中的内置类"></a>JS中的内置类</h4></li><li><p>JS中的任何数据类型都是它所属的类,除了null 和 undefined</p></li><li>Number , String , Boolean , Object , Array , RegExp , Function , Date …</li><li>div -&gt; HTMLDIVElement-&gt;HTML</li><li>document –&gt; HTMLDocument -&gt; Document(getElementById)</li><li>getElementById只在document的原型上,普通元素对象上不存在这个属性</li><li>类的首字母都是大写</li><li>类的执行通过new来执行</li><li>Object 对象类 , 被称为 基类, 在任何数据类型都可以通过<code>__proto__</code>[原型链] 找到基类  Object</li><li>内置类的原型只能新增, 不能用新的地址覆盖</li></ul><h5 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h5><ul><li>字面量方式</li><li>实例化方式</li><li>引用数据类型方式创建 var ary = new Arry (“1”)</li></ul><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul><li>定义 :  当一个函数通过new关键字来执行的时候,这个函数就不是普通函数了,它是一个构造函数,也是一个自定义类,当前的函数名就是类名,这个函数的返回值就是类的实例</li><li>为了让构造函数和普通函数有一个区别,我们建议写构造函数的时候首字母大写<code>[类名]</code></li><li>注意 :  一般情况下 ,我们写业务逻辑的时候不会用到构造函数.但是在封装库,框架,插件以及组件的时候会用到构造函数模式</li><li>构造函数执行的时候,如果没有参数的时候,小括号可以不用写</li><li><code>let person = new Person</code></li></ul><h5 id="普通函数-和-构造函数的区别"><a href="#普通函数-和-构造函数的区别" class="headerlink" title="普通函数 和 构造函数的区别"></a>普通函数 和 构造函数的区别</h5><ul><li>不同点 : 构造函数运行时，形成作用域之后，在代码运行之前，首先会给当前作用域初始化一个对象；并且让当前作用域下的this指向当前这个空对象；当代码运行结束，构造函数把函数体中this返回；</li><li>构造函数如果不需要实参 , 可以省略执行的小括号;</li><li>构造函数中的this 指向当前的实例</li><li>在构造函数中.return一个基本类型值,对实例没有任何影响如果return出一个引用数据类型值,那么会把默认return的this给替换掉</li><li>instanceof检测当前实例是否属于某个类,如果属于返回true 不属于返回false</li><li>in  :  检测某个属性是否属于对象 ,如果属于返回true 不属于返回false</li></ul><h4 id="构造函数的执行过程"><a href="#构造函数的执行过程" class="headerlink" title="构造函数的执行过程"></a>构造函数的执行过程</h4><ul><li>形成一个私有的作用域 </li><li>形参赋值</li><li>变量提升</li><li>浏览器会创建一个对象 , [开辟一个新的堆内存] , 将这个对象指向了this [堆内存指针指向了this实例]   </li><li>代码从上到下执行</li><li>判断当前构造函数是否有return ,如果没有return默认将实例返回,如果有return , [<code>如果return的是基本数据类型,对实例没有影响; 如果是引用数据类型,那么实例就是该引用数据类型</code></li><li>构造函数中  :  建议不要轻易return引用数据类型<br><img src="/images/9F]}AF6LC[}]PY@W~X.png" alt="Alt text"><h5 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h5><ul><li>在构造函数中,给this添加属性值和方法,都属于当前实例的私有属性<h5 id="公有属性"><a href="#公有属性" class="headerlink" title="公有属性"></a>公有属性</h5></li><li>当前实例通过<code>__proto__</code>找到所有的属性和方法都是属于当前实例的公有属性</li><li>实例想要调取公有属性,直接可以调取,底层就是通过<code>__proto__</code>去找这个属性</li><li>用 in 这种方式来判断, 当前属性名[公有属性 +  私有属性] 是否属于这个对象  <code>console.log(&quot;hasOwnProperty&quot; in person1);</code></li><li>Object 类提供一个<code>hasOwnProperty</code>,这个方法判断当前属性是否是该实例的私有属性:  返回值是布尔值   <code>console.log(person1.hasOwnProperty(&quot;age&quot;))  //true</code><br><code>console.log(person1.hasOwnProperty(&quot;valueof&quot;))  //false</code></li></ul></li></ul><p><strong><code>自己封装一个方法,判断当前属性是否是当前实例的一个公有属性hasPubProperty</code></strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">person1.__proto__.hasPubProperty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//console.log(1);</span></span><br><span class="line">  <span class="comment">//判断参数值是否是当前实例的一个属性</span></span><br><span class="line">  <span class="comment">//判断是否是当前实例的一个私有属性,且取反</span></span><br><span class="line">  <span class="keyword">return</span> str <span class="keyword">in</span> <span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.hasOwnProperty(str)</span><br><span class="line">  或者</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">if (str in this)&#123;</span></span><br><span class="line"><span class="comment">if(!this.hasOwnProperty(str))&#123;</span></span><br><span class="line"><span class="comment">   return true</span></span><br><span class="line"><span class="comment">     &#125;else&#123;</span></span><br><span class="line"><span class="comment">   return false</span></span><br><span class="line"><span class="comment">     &#125;else&#123;</span></span><br><span class="line"><span class="comment">   return false</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">person1.hasPubProperty(<span class="string">"a"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>如果是公有属性返回true；如果不是返回false；</p></blockquote><h4 id="原型检测属性封装"><a href="#原型检测属性封装" class="headerlink" title="原型检测属性封装"></a>原型检测属性封装</h4><pre><code>function hasPublicProperty(obj,attr) {    // attr 是obj的一个属性并且不是私有的；    /*if(attr in obj){        if(!obj.hasOwnProperty(attr)){            return true;        }    }else{        return false;    }    return false;*/    或者    return attr in obj &amp;&amp; !obj.hasOwnProperty(attr);}console.log(hasPublicProperty(obj, &quot;toString&quot;));</code></pre><h5 id="JS中的函数"><a href="#JS中的函数" class="headerlink" title="JS中的函数"></a>JS中的函数</h5><ul><li>普通函数 , 类(自定义类和内置类)  , 函数类的实例</li></ul><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><ul><li>普通对象(对象数据类型)</li><li>构造函数new出来的一个实例 也是一个对象</li><li>类上面的原型也是一个对象</li><li>函数也是一个对象</li></ul><h5 id="学习原型模式需要记住三句话"><a href="#学习原型模式需要记住三句话" class="headerlink" title="学习原型模式需要记住三句话"></a>学习原型模式需要记住三句话</h5><ul><li>所有的函数数据类型( 函数 , 类 )都天生自带一个属性,叫做<code>prototype(原型)</code> ,  它是一个对象 ,既然是对象 , 那就是一个堆内存</li><li>所有函数的原型上面(都是开辟的这个堆内存), 都天生自带一个属性,叫做<code>constructor(构造函数)</code> , 它指向当前类本身</li><li>所有的对象都天生自带一个属性<code>__proto__</code>, 它指向当前所属类的原型</li><li>函数有<code>prototype(原型)</code> <code>__proto__</code>;<br><img src="/images/CLPK]8[KVR9Q26ZZ22@Q8.png" alt="Alt text"></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> age = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    People.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> person1 = <span class="keyword">new</span> People(<span class="string">'xiaihua'</span>);</span><br><span class="line">    <span class="keyword">let</span> person2 = <span class="keyword">new</span> People(<span class="string">'xiaoming'</span>);</span><br><span class="line">    <span class="comment">//person1属于People类</span></span><br><span class="line">    <span class="comment">//__proto__指向类People的原型prototype</span></span><br><span class="line">    <span class="built_in">console</span>.log(person1.__proto__ == People.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="/images/BK3]IGX_[FJ_YI98JT59.png" alt="Alt text"></p><h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><ul><li>定义 :  一个实例要找属性 , 优先会去找自己的私有属性 , 如有自己的私有属性没有 , 那就通过<code>__ proto__</code>找到自己所属类的原型上的公有属性,如果公有属性还没有,继续通过<code>__proto__</code>找到自己的所属类的原型知道Object[基类]的原型上,一直找到基类还没有的话,直接返回undefined</li></ul><h5 id="Object类和Function类"><a href="#Object类和Function类" class="headerlink" title="Object类和Function类"></a>Object类和Function类</h5><ul><li>Function类:</li><li>所有的类都是通过函数的方式来创建 , 由此可以得知, 所有的类(包括基类Object)都是函数类的一个实例</li><li>判断一个实例是否属于一个类:  instanceof<br><code>console.log(Number instanceof Function); //true</code><br><code>console.log(String instanceof Function); //true</code><br><code>console.log(Object instanceof Function); //true</code></li><li>constructor : 通过实例来调用这个方法,指向当前类本身</li><li>万物皆对象, js 中的任何数据类型都可以通过<strong>proto</strong><br><img src="/images/1531047586818.png" alt="Alt text"><br><img src="/images/1531134758170.png" alt="Alt text"><br><img src="/images/1531231221143.png" alt="Alt text"><br><img src="/images/1531231528243.png" alt="Alt text"><br><img src="/images/1531231701604.png" alt="Alt text"><br><img src="/images/1531476307585.png" alt="Alt text"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;个人知识总结-三&quot;&gt;&lt;a href=&quot;#个人知识总结-三&quot; class=&quot;headerlink&quot; title=&quot;个人知识总结(三)&quot;&gt;&lt;/a&gt;&lt;strong&gt;个人知识总结(三)&lt;/strong&gt;&lt;/h4&gt;&lt;h3 id=&quot;设计模式-单例模式&quot;&gt;&lt;a href=&quot;#设计模式-单例模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式 - 单例模式&quot;&gt;&lt;/a&gt;设计模式 - 单例模式&lt;/h3&gt;&lt;h4 id=&quot;模块化开发&quot;&gt;&lt;a href=&quot;#模块化开发&quot; class=&quot;headerlink&quot; title=&quot;模块化开发&quot;&gt;&lt;/a&gt;模块化开发&lt;/h4&gt;&lt;p&gt;  把一个项目按照页面或者功能分割成不同的任务,交给项目中不同的成员开发.开发结束之后将代码合并到一起.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多人协作开发的问题: 变量名 函数名 冲突&lt;/li&gt;
&lt;li&gt;为了防止全局变量污染: 闭包但是闭包并不完美,所以选择搭配设计模式来进一步进行项目开发
    
    </summary>
    
      <category term="javascript" scheme="http://lingkeyu.com/categories/javascript/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="前端学习" scheme="http://lingkeyu.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础知识" scheme="http://lingkeyu.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>个人知识总结(二)</title>
    <link href="http://lingkeyu.com/2017/08/17/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93(%E4%BA%8C)/"/>
    <id>http://lingkeyu.com/2017/08/17/个人知识总结(二)/</id>
    <published>2017-08-17T06:52:41.000Z</published>
    <updated>2018-09-01T13:04:27.398Z</updated>
    
    <content type="html"><![CDATA[<h4 id="个人知识总结-二"><a href="#个人知识总结-二" class="headerlink" title="个人知识总结(二)"></a><strong>个人知识总结(二)</strong></h4><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p><a href="https://blog.csdn.net/zjy_android_blog/article/details/80863425" target="_blank" rel="noopener">https://blog.csdn.net/zjy_android_blog/article/details/80863425</a><br><a href="https://blog.csdn.net/longwenjunjie/article/details/48163293" target="_blank" rel="noopener">https://blog.csdn.net/longwenjunjie/article/details/48163293</a>  </p><blockquote><ul><li>变量提升：在作用域形成之后代码执行之前，将所有的带var和function关键字的变量提前声明或定义</li><li>js可以在浏览器中运行 是因为浏览器给js 提供了赖以生存的环境,这个环境就是作用域</li></ul></blockquote><pre><code>  var：只是提前声明 ;  默认值为undefinedfunction：既声明又定义debugger : 断点</code></pre><a id="more"></a><blockquote><p>形成作用域 – 变量提升 — 代码从上到下运行</p></blockquote><h4 id="变量提升特殊情况"><a href="#变量提升特殊情况" class="headerlink" title="变量提升特殊情况"></a>变量提升特殊情况</h4><ul><li>不管条件是否成立,都要进行变量提升</li><li>条件判断中的函数,在条件判断之前,带var 和 带function 都只声明不定义, 当条件成立之后,第一件事,就是给函数赋值,条件不成立,判断体就不执行,结合了es6 块级作用域</li><li>如果不带var  直接赋值就相当于给window直接添加了一个属性且给它赋值</li><li>带var 就相当于在全局作用域下增加了一个属性,还给全局对象window增加了一个属性</li><li><p><strong>注意</strong>  : <code>带var的可以不赋值</code>,但是也相当于给全局对象window增加了一个属性, <code>不带var的必须要赋值</code>,否则会去全局对象window下找这个值 如果没有就报错</p></li><li><blockquote><p><code>用逗号分隔的表示连var ;   var a = 1, b = 2, c = 3;  用分号来分隔,前面带var的属于变量 ,不带var的相当于给全局对象window增加了一个属性var a = 1; b =2 ; c = 3;  var a = b = c = 1; 连等   带var的是一个变量 ,其他的不带var 就相当于给全局window 增加了属性</code></p></blockquote></li><li><p><code>变量提升只发生在=左边</code></p></li><li><code>return  后面的的内容不进行变量提升但是下面的代码要进行变量提升</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(f4());</span><br><span class="line">   <span class="built_in">console</span>.log(f2);</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//return  后面的的内容不进行变量 提升但是下面的代码要进行变量提升</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(f3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">f3()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>];</span><br><span class="line">b = a;</span><br><span class="line">b[<span class="number">1</span>] = <span class="string">"a"</span>;     <span class="comment">//  b = [1,"a"]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);   <span class="comment">//[1,"a"]</span></span><br></pre></td></tr></table></figure><ul><li>变量名重复: 不再进行声明,但要重新定义</li><li>匿名函数不进行变量提升</li><li>函数当作参数的时候,不进行变量提升</li><li>自执行函数不会进行变量提升</li><li>Let const 不进行变量提升</li></ul><h4 id="函数的定义与执行"><a href="#函数的定义与执行" class="headerlink" title="函数的定义与执行"></a>函数的定义与执行</h4><ul><li><p>定义三步 :</p><ul><li>开辟新的堆内存</li><li>存储字符串</li><li>返回内存空间地址</li></ul></li><li><p>函数执行:</p><ul><li>首先形成一个私有作用域,, 开辟一个栈内存</li><li>形参赋值</li><li>变量提升</li><li>代码从上到下执行</li><li>作用域是否销毁  </li></ul></li><li><p>对象的定义</p><ul><li>开辟一个空间地址 , 堆内存</li><li>把键值对存储到堆内存下</li><li>把空间地址赋值给对象名 </li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log (fn);  <span class="comment">//  f()</span></span><br><span class="line"><span class="built_in">console</span>.log(f);   <span class="comment">//undefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;       <span class="comment">//函数声明式</span></span><br><span class="line"><span class="keyword">var</span> f  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;   <span class="comment">//函数表达式---&gt; 箭头函数</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log (fn);  <span class="comment">//  f()</span></span><br><span class="line">    <span class="built_in">console</span>.log(f);   <span class="comment">//undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(fn()) <span class="comment">//undefined 没有return 执行了两次函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line">&#125;       <span class="comment">//函数声明式</span></span><br><span class="line">    <span class="keyword">var</span> f  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log (f2) <span class="comment">//f2 未定义  报错</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">f2</span> (<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log (f2) <span class="comment">//f2 未定义  报错</span></span><br><span class="line">setTimeout (<span class="function"><span class="keyword">function</span> <span class="title">f2</span> (<span class="params"></span>)</span>&#123;&#125;,<span class="number">2000</span>)   <span class="comment">//函数当作参数的时候,不进行变量提升</span></span><br></pre></td></tr></table></figure><p><img src="/images/1530687793550.png" alt="Alt text"><br><img src="/images/1530687692705.png" alt="Alt text"><br>-</p><p> <img src="/images/1530677967419.png" alt="Alt text"><br><img src="/images/1530678632125.png" alt="Alt text"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f);<span class="comment">//函数体</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    f()  <span class="comment">//88</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    f()  <span class="comment">// 88</span></span><br><span class="line">    f= <span class="number">99</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">88</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    f()<span class="comment">// f  is not  a  function;</span></span><br><span class="line">    <span class="built_in">console</span>.log(f);</span><br></pre></td></tr></table></figure><h4 id="ES6的let和const"><a href="#ES6的let和const" class="headerlink" title="ES6的let和const"></a>ES6的let和const</h4><p><code>var与ES6中const、let声明的变量的区别</code><br><a href="https://blog.csdn.net/qq_22855325/article/details/72843456" target="_blank" rel="noopener">https://blog.csdn.net/qq_22855325/article/details/72843456</a></p><p><strong>Let</strong> 不能和函数重名</p><blockquote><ul><li>const 声明的变量,如果值是基本数据类型,那么不可以进行数据修改,如果是引用数据类型值,就可以操作引用地址,不可以替换引用地址</li><li>Let虽然不会进行变量提升,但是会先检查当前作用域下是否有重复命名</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  a = <span class="number">2</span>;</span><br><span class="line"> <span class="keyword">if</span> (<span class="string">" a "</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>,log(a);  <span class="comment">//暂时性死区,即在块级作用域下,不能提前拿到let声明的变量,</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/1530694558156.png" alt="Alt text"><br><img src="/images/1530694585148.png" alt="Alt text"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i= <span class="number">0</span> ;i &lt;<span class="number">10</span>; i++)&#123;     <span class="comment">//for 循环形成的保护机制</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// let 报错 块级作用域 外界无法访问</span></span><br></pre></td></tr></table></figure><p><img src="/images/1530627088641.png" alt="Alt text"></p><h4 id="查找上一级的作用域"><a href="#查找上一级的作用域" class="headerlink" title="查找上一级的作用域"></a>查找上一级的作用域</h4><p><code>1.   在当前作用域下输出变量值时,首先观察是否是私有变量</code></p><ul><li>如何判断一个变量是私有的<ul><li>当前变量有没有被Var 过和 function 过</li><li>形参也是私有变量</li></ul></li></ul><p><code>2. 如果变量不是私有的,就向上一级作用域查找</code></p><ul><li>上一级作用域判断函数在哪定义的,函数上一级的作用域就是谁,跟函数执行没有任何关系</li><li>但获取变量值时.首先看是否是私有变量,如过不是就向上一级作用域查找,一级一级向上,直到window为止,如果window也没有,那么就会报错,这样一级一级向上查找作用域就是作用域链.</li></ul><h4 id="堆内存的销毁"><a href="#堆内存的销毁" class="headerlink" title="堆内存的销毁"></a>堆内存的销毁</h4><p>形成两个虚拟内存 :  栈 堆</p><p>栈内存 :  作用域;<br>引用数据类型<br>在JS 中的{ } [ ]  都是开辟一个新的空间地址<br><code>谷歌浏览器 :</code> 每隔一段时间,自动检查占用并是否销毁<br><code>火狐和IE :</code>采用的计数的规则 , 当堆内存地址被占用一次时,计数+1 ,否则 -1 ,如果是被占用0次 ,就回收 </p><h4 id="私有作用域的销毁"><a href="#私有作用域的销毁" class="headerlink" title="私有作用域的销毁"></a>私有作用域的销毁</h4><ul><li><p>函数的执行 :  形成一个私有的作用域,提供代码运行环境,存储基本数据类型</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包 :"></a>闭包 :</h4><ul><li>保护里面的私有变量不受外界干扰</li><li>存储值</li><li>保存机制 : 当前私有作用域中,有引用数据类型被外界所占用,导致当前作用域变成一个不销毁的作用域,里面的变量就成了不销毁的变量</li></ul></li><li><p>一般情况下,函数执行完成后, 当前作用域就会销毁</p></li><li>函数每执行一次就会开辟一个新的私有作用域,  并且新的私有作用域和之前的作用域没有任何关系, 是两个不同的栈内存</li></ul><ul><li><code>不销毁的作用域 :</code> <ul><li>函数执行return出一个引用的数据类型的值</li><li>函数执行return 出的引用数据类型值并且被外界接收( 被占用 )</li></ul></li></ul><h4 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h4><blockquote><p>浏览器加载的时候,碰到引用数据类型,都会开辟一个新的内存空间,[对象 : 键值对 ,函数 : 代码字符串],给这个内存空间赋一个16进制内存地址,将这个内存地址指向声明的变量,这个内存空间就是堆内存</p></blockquote><blockquote><p>堆内存的释放,手动 null   ,   [指向空指针] ; 浏览器判断该内存没有变量去接收它  ,就会释放</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span>  t = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><ul><li><code>不立即销毁:</code><ul><li>需要等到里面的小函数执行完成之后,那么外层作用域就会销毁</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span>  t = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span>  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    fn()();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  i =<span class="number">0</span>;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// i =5   6</span></span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(n + i++);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="keyword">var</span> f  = fn(<span class="number">5</span>);</span><br><span class="line">f(<span class="number">10</span>);<span class="comment">// 15</span></span><br><span class="line">f(<span class="number">20</span>);<span class="comment">// 26</span></span><br><span class="line">fn(<span class="number">8</span>)(<span class="number">12</span>);<span class="comment">// 20</span></span><br><span class="line">fn()(<span class="number">18</span>)<span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> ; </span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">a++;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f();       <span class="comment">//2</span></span><br><span class="line">fn()();    <span class="comment">//2</span></span><br><span class="line">f();       <span class="comment">//3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  obj= &#123;</span><br><span class="line">      i : <span class="number">10</span>,</span><br><span class="line">      fn:(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(n + i++)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)()</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span>  f = obj.fn;</span><br><span class="line">  f(<span class="number">10</span>);<span class="comment">//  10</span></span><br><span class="line">  f(<span class="number">20</span>);<span class="comment">// 21</span></span><br><span class="line">  obj.fn(<span class="number">30</span>);<span class="comment">// 32   块级作用域</span></span><br><span class="line">  obj.fn(<span class="number">40</span>);<span class="comment">// 43</span></span><br></pre></td></tr></table></figure><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><pre><code>for 循环中用let ,会形成父作用域；每循环一次，都会形成一个子作用域；在子作用域中会把当前的i进行保存</code></pre><h4 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h4><p>在作用域下有特殊意义</p><ul><li>函数中的this,指的就是函数的当前执行主体 </li><li>在全局作用域下, this指向window; </li><li>函数体中的this,看函数执行前有没有”.” ; 如果有,那么点前面是谁,this就指向谁,如果没有” . “ ; 那么会指向window;</li><li>如果给元素的事件行为绑定方法,那么方法中的this,就会指向当前被绑定的那个元素</li><li>回调函数中this指向window(函数作为实参传进去)</li><li>自执行函数中的this永远都指向window</li><li>forEach map 第二个参数可以修改this </li><li>this是谁,和它在哪定义的以及在哪执行的没有任何关系</li><li><code>构造函数中的this 指向当前类的实例</code></li><li><code>call  apply  blind 可以改变this关键字</code></li></ul><p><img src="/images/1531058846573.png" alt="Alt text"></p><p><img src="/images/1531058659477.png" alt="Alt text"></p><p><img src="/images/1531058524015.png" alt="Alt text"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//window</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.b();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span>  obj = &#123;</span><br><span class="line">        num:<span class="number">1</span>,</span><br><span class="line">        fn : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">// window;</span></span><br><span class="line">                &#125;</span><br><span class="line">                m()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">var</span> f = obj.fn;</span><br><span class="line">    f();   <span class="comment">// window</span></span><br><span class="line">    obj.fn();<span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span>  obj = &#123;</span><br><span class="line">       num:<span class="number">1</span>,</span><br><span class="line">       f:&#123;</span><br><span class="line">           num:<span class="number">2</span>,</span><br><span class="line">           fn:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">// obj.f</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   obj.f.fn()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);       <span class="comment">// window</span></span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);       <span class="comment">//window</span></span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span></span><br><span class="line"><span class="keyword">var</span>  obj = &#123;</span><br><span class="line">        fn: (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);   <span class="comment">//window</span></span><br><span class="line">        &#125;)()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> =<span class="number">2</span>;<span class="comment">// 1  2</span></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="built_in">num</span> : <span class="number">0</span>,</span><br><span class="line">       fn : function () &#123;</span><br><span class="line">           <span class="built_in">num</span> = <span class="number">1</span>;</span><br><span class="line">           <span class="comment">// this--&gt;obj</span></span><br><span class="line">           (function (<span class="built_in">num</span>) &#123;</span><br><span class="line">               <span class="comment">// this --&gt; window</span></span><br><span class="line">               ++<span class="keyword">this</span>.<span class="built_in">num</span>;</span><br><span class="line">               <span class="built_in">num</span>++;</span><br><span class="line">               console.log(<span class="built_in">num</span>)<span class="comment">// 1</span></span><br><span class="line">           &#125;)(<span class="keyword">this</span>.<span class="built_in">num</span>)<span class="comment">// 0</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   obj.fn();</span><br><span class="line">   console.log(<span class="built_in">window</span>.<span class="built_in">num</span>,obj.<span class="built_in">num</span>) <span class="comment">//2  0</span></span><br></pre></td></tr></table></figure><h4 id="this-重点练习题"><a href="#this-重点练习题" class="headerlink" title="this 重点练习题"></a><code>this 重点练习题</code></h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> =<span class="number">2</span>;<span class="comment">// 1  2</span></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="built_in">num</span> : <span class="number">0</span>,</span><br><span class="line">       fn : function () &#123;</span><br><span class="line">           <span class="built_in">num</span> = <span class="number">1</span>;</span><br><span class="line">           <span class="comment">// this--&gt;obj</span></span><br><span class="line">           (function (<span class="built_in">num</span>) &#123;</span><br><span class="line">               <span class="comment">// this --&gt; window</span></span><br><span class="line">               ++<span class="keyword">this</span>.<span class="built_in">num</span>;</span><br><span class="line">               <span class="built_in">num</span>++;</span><br><span class="line">               console.log(<span class="built_in">num</span>)<span class="comment">// 1</span></span><br><span class="line">           &#125;)(<span class="keyword">this</span>.<span class="built_in">num</span>)<span class="comment">// 0</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   obj.fn();</span><br><span class="line">   console.log(<span class="built_in">window</span>.<span class="built_in">num</span>,obj.<span class="built_in">num</span>) <span class="comment">//2  0</span></span><br></pre></td></tr></table></figure><p><img src="/images/1530781630434.png" alt="Alt text"></p><p><img src="/images/1530966386909.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;个人知识总结-二&quot;&gt;&lt;a href=&quot;#个人知识总结-二&quot; class=&quot;headerlink&quot; title=&quot;个人知识总结(二)&quot;&gt;&lt;/a&gt;&lt;strong&gt;个人知识总结(二)&lt;/strong&gt;&lt;/h4&gt;&lt;h3 id=&quot;变量提升&quot;&gt;&lt;a href=&quot;#变量提升&quot; class=&quot;headerlink&quot; title=&quot;变量提升&quot;&gt;&lt;/a&gt;变量提升&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zjy_android_blog/article/details/80863425&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zjy_android_blog/article/details/80863425&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/longwenjunjie/article/details/48163293&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/longwenjunjie/article/details/48163293&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;变量提升：在作用域形成之后代码执行之前，将所有的带var和function关键字的变量提前声明或定义&lt;/li&gt;
&lt;li&gt;js可以在浏览器中运行 是因为浏览器给js 提供了赖以生存的环境,这个环境就是作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;  var：只是提前声明 ;  默认值为undefined
function：既声明又定义
debugger : 断点
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://lingkeyu.com/categories/javascript/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="前端学习" scheme="http://lingkeyu.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础知识" scheme="http://lingkeyu.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>个人知识总结(一)</title>
    <link href="http://lingkeyu.com/2017/08/12/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93(%E4%B8%80)/"/>
    <id>http://lingkeyu.com/2017/08/12/个人知识总结(一)/</id>
    <published>2017-08-12T03:12:41.000Z</published>
    <updated>2018-09-01T13:04:40.579Z</updated>
    
    <content type="html"><![CDATA[<h4 id="个人知识总结-一"><a href="#个人知识总结-一" class="headerlink" title="个人知识总结(一)"></a><strong>个人知识总结(一)</strong></h4><blockquote><ul><li>webstorm : 代码编译器<ul><li>浏览器    : 代码解析器;</li><li>Git      : 是一个工具; 用于团队协作开发项目管理代码的工具</li></ul></li></ul></blockquote><blockquote><ul><li>svn :  集中式<ul><li>需要一个中央服务器;每次开发前需要从中央服务器中把最新的代码拉取出来,然后进行开发,并且需要网络;</li></ul></li><li>Git : 分布式<ul><li>每个人的电脑都是一个中央服务器<a id="more"></a></li></ul></li></ul></blockquote><h4 id="Dos命令"><a href="#Dos命令" class="headerlink" title="Dos命令"></a>Dos命令</h4><ul><li>按住shift 右键,打开powerShell</li><li>找到相应文件夹,直接输入cmd </li><li>window + R :  输入cmd</li></ul><blockquote><p>切换此盘路径<br>cd + 文件夹名字 : 打开相应路径<br>cd .. /   :   返回上一级<br>cd /  :  返回根目录<br>cls  : 清屏<br>mkdir + 文件名 :  创建文件夹</p></blockquote><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><h4 id="配置Git用户名和密码"><a href="#配置Git用户名和密码" class="headerlink" title="配置Git用户名和密码"></a><code>配置Git用户名和密码</code></h4><p> git config –global user.email “邮箱”<br>  git config –global user.name “用户名”</p><p>git init  : 初始化一个git 仓库<br><code>git add  .</code>  : 把文件添加到暂存区<br><code>git  add [文件名]</code> 推送指定文件到暂存区<br>git commit -m “注释” :   把代码提交到历史区  会生成一个版本号,可以根据版本号回到任何一次修改的位置<br>git status  :  查看文件状态;如果文件只存在本地,不在暂存区,那么颜色是红色,如果文件在缓存区,还没到历史区,那么颜色是绿色的<br>本地代码—-&gt; 暂存区 —&gt; 历史区;</p><p>git : 初始一个本地仓库<br>gitHub  :  是一个开源网站,可以供大家分享代码  插件和框架<br>把本地的代码提交到远程仓库(gitHub)<br>让本地仓库和远程仓库进行绑定</p><p>git remote add origin(仓库名)   远程仓库地址  : 将本地仓库和远程仓库建立连接<br>git remote -v :  查看本地仓库和远程仓库关联状态<br>git   push origin(仓库名)  master :  将历史区内容推送到远程仓库</p><p><code>master :主分支名</code></p><p>git config –list : 查看本地配置环境<br>输入用户名和密码</p><h4 id="推送过程-步骤"><a href="#推送过程-步骤" class="headerlink" title="推送过程(步骤)"></a>推送过程(步骤)</h4><p>git init<br>git add .<br>git  status<br>git commit -m “里面注释”</p><p>git remote add origin(仓库名)   地址<br>git remote -v<br>git push origin(仓库名)   master</p><p><img src="/images/1530608843645.png" alt="Alt text"></p><h4 id="推送复原过程"><a href="#推送复原过程" class="headerlink" title="推送复原过程"></a><code>推送复原过程</code></h4><p><img src="/images/1530624708696.png" alt="Alt text"></p><h4 id="拉取克隆过程-步骤"><a href="#拉取克隆过程-步骤" class="headerlink" title="拉取克隆过程(步骤)"></a>拉取克隆过程(步骤)</h4><p>git clone  仓库地址  :  已经是一个git仓库, 且和远程仓库建立了连接</p><p>git pull origin master : 拉取远程仓库代码 </p><p><img src="/images/1530609774397.png" alt="Alt text"></p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><p><code>作用域</code>：代码执行的空间/环境  ===栈内存</p><blockquote><p><code>浏览器的渲染机制 :</code> 先形成一个DOM树和CSS树,最后两个树合成render树</p></blockquote><p><code>全局作用域</code>：打开浏览器就会形成的全局作用域</p></blockquote><blockquote><ul><li>存储基本数据类型值 </li><li>基本数据类型存储到栈内存中,全局作用域是最大的一个栈内存</li><li>window 是全局中最大的一个对象, 存储了大量内置属性</li><li>typeof window —&gt; object</li></ul><p><code>私有作用域</code>：一个函数执行就会形成一个私有作用域  关闭浏览器就销毁<br><code>块作用域</code>：ES6新增加的，除了私有作用域和对象以外被一个{}包起来的，eval(“({a:1})”)； </p></blockquote><h4 id="全局变量-在全局作用域下定义的变量"><a href="#全局变量-在全局作用域下定义的变量" class="headerlink" title="全局变量: 在全局作用域下定义的变量"></a>全局变量: 在全局作用域下定义的变量</h4><pre><code>会给window 新增一个键值对全局下定义的函数相当于给window新增键值对,属性名是函数,属性值整个函数</code></pre><h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><pre><code>在函数体中被var,和function,const,let过函数的形参也是私有变量</code></pre><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>-</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span>  total  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span>  len = <span class="built_in">arguments</span>.length;</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// (var i=0;i&lt;arguments.length;i++)</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">           <span class="keyword">var</span>  cur = <span class="built_in">arguments</span>[i];</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(cur))&#123;</span><br><span class="line">       <span class="comment">//  total += arguments[i];</span></span><br><span class="line">                total +=cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>- </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"fn"</span> <span class="keyword">in</span> <span class="built_in">window</span>);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//`fn`必须加引号</span></span><br><span class="line"></span><br><span class="line"> <span class="number">3.</span>-</span><br><span class="line"><span class="keyword">var</span>  a,b,fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a= b =<span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">   <span class="comment">// ( var a= b =10; --&gt; var a=10;b = 10;)</span></span><br><span class="line">   <span class="comment">// a变成了局部变量无法修改外部,b成了全局变量,修改了外部    </span></span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="built_in">console</span>.log(a,b);<span class="comment">//  undefined   10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;个人知识总结-一&quot;&gt;&lt;a href=&quot;#个人知识总结-一&quot; class=&quot;headerlink&quot; title=&quot;个人知识总结(一)&quot;&gt;&lt;/a&gt;&lt;strong&gt;个人知识总结(一)&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;webstorm : 代码编译器&lt;ul&gt;
&lt;li&gt;浏览器    : 代码解析器;&lt;/li&gt;
&lt;li&gt;Git      : 是一个工具; 用于团队协作开发项目管理代码的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;svn :  集中式&lt;ul&gt;
&lt;li&gt;需要一个中央服务器;每次开发前需要从中央服务器中把最新的代码拉取出来,然后进行开发,并且需要网络;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Git : 分布式&lt;ul&gt;
&lt;li&gt;每个人的电脑都是一个中央服务器
    
    </summary>
    
      <category term="javascript" scheme="http://lingkeyu.com/categories/javascript/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="前端学习" scheme="http://lingkeyu.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="基础知识" scheme="http://lingkeyu.com/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>秒懂JS中的盒模型~~</title>
    <link href="http://lingkeyu.com/2017/07/23/%E7%A7%92%E6%87%82JS%E4%B8%AD%E7%9A%84%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <id>http://lingkeyu.com/2017/07/23/秒懂JS中的盒模型/</id>
    <published>2017-07-23T11:32:41.000Z</published>
    <updated>2018-09-01T13:04:53.631Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先要明白什么是JS盒子模型"><a href="#首先要明白什么是JS盒子模型" class="headerlink" title="首先要明白什么是JS盒子模型???"></a><strong>首先要明白什么是JS盒子模型???</strong></h4><h2 id="JS盒模型-指的是通过JS中提供的一系列的属性和方法-获取页面中元素的样式信息值"><a href="#JS盒模型-指的是通过JS中提供的一系列的属性和方法-获取页面中元素的样式信息值" class="headerlink" title="JS盒模型  指的是通过JS中提供的一系列的属性和方法,获取页面中元素的样式信息值"></a><code>JS盒模型</code>  指的是通过JS中提供的一系列的属性和方法,获取页面中元素的样式信息值</h2><p>  #box(有很多自己的私有的属性) -&gt;HTMLDivElement.prototype -&gt;HTMLElement.prototype -&gt;Element.prototype -&gt;Node.prototype -&gt;EventTarget.prototype -&gt;Object.prototype<br>    var box = document.getElementById(“box”);<br>    console.dir(box);<br> <a id="more"></a><br>内容的宽度和高度:我们设置的width/height这两个样式就是内容的宽和高;如果没有设置height值,容器的高度会根据里面内容自己进行适应,这样获取的值就是真实内容的高;如果设置固定的高度了,不管内容是多了还是少了,其实我们内容的高度指的都是设定的那个值;</p><blockquote><p>真实内容的宽度和高度:这个代指的是实际内容个的宽高(和我们设置的height没有必然的联系),例如:我设置高度为200px,如果内容有溢出,那么真实内容的高度是要把溢出内容的高度也要加进来的</p></blockquote><p><img src="/images/盒模型.png" alt="图示盒模型"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、client系列(当前元素的几个私有的属性)</span><br><span class="line">  clientWidth/clientHeight:内容的宽度/高度+左右/上下填充 (和内容溢出没有关系)</span><br><span class="line">  clientLeft:左边框的宽度  clientTop:上边框的高度  (border[Left/Top]Width)</span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>、offset系列</span><br><span class="line">  offsetWidth/offsetHeight:clientWidth/clientHeight+左右/上下边框 (和内容是否溢出也是没有任何的关系的)</span><br><span class="line">  offsetParent:当前元素的父级参照物</span><br><span class="line">  offsetLeft/offsetTop:当前元素的外边框距离父级参照物的内边框的偏移量</span><br><span class="line"></span><br><span class="line"> <span class="number">3</span>、scroll系列</span><br><span class="line">  scrollWidth/scrollHeight:和我们的clientWidth/clientHeight一模一样(前提是：容器中的内容没有溢出的情况下)</span><br><span class="line"></span><br><span class="line"> 如果容器中的内容有溢出,我们获取的结果是如下规则:</span><br><span class="line">  scrollWidth:真实内容的宽度(包含溢出)+左填充</span><br><span class="line">  scrollHeight:真实内容的高度(包含溢出)+上填充</span><br><span class="line">获取到的结果都是<span class="string">"约等于"</span>的值,因为:同一个浏览器,我们是否设置overflow=<span class="string">'hidden'</span>对于最终的结果是有影响的;在不同的浏览器中我们获取到的结果也是不相同的;</span><br><span class="line"></span><br><span class="line"> scrollLeft/scrollTop:滚动条卷去的宽度/高度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">2</span>、关于JS盒子模型属性取值的问题</span><br><span class="line"> 我们通过这<span class="number">13</span>个属性值获取的结果永远不可能出现小数,都是整数;浏览器获取结果的时候,在原来真实结果的基础上进行四舍五入;</span><br><span class="line"></span><br><span class="line"> <span class="number">3</span>、关于操作浏览器本身的盒子模型信息</span><br><span class="line">  clientWidth/clientHeight是当前浏览器可视窗口的宽度和高度(一屏幕的宽度和高度)</span><br><span class="line">  scrollWidth/scrollHeight是当前页面的真实宽度和高度(所有屏加起来的宽度和高度~但是是一个约等于的值</span><br><span class="line"> 我们不管哪些属性,也不管是什么浏览器,也不管是获取还是设置,想要都兼容的话,需要写两套</span><br><span class="line"> <span class="built_in">document</span>.documentElement[attr]||<span class="built_in">document</span>.body[attr]; <span class="comment">//-&gt;必须document.documentElement在前</span></span><br><span class="line"></span><br><span class="line"> 例如：</span><br><span class="line"> [获取]</span><br><span class="line"> <span class="built_in">document</span>.documentElement.clientWidth||<span class="built_in">document</span>.body.clientWidth</span><br><span class="line"> [设置也需要写两套]</span><br><span class="line"> <span class="built_in">document</span>.documentElement.scrollTop=<span class="number">0</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.scrollTop=<span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">win</span>(<span class="params">attr, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"undefined"</span>) &#123;<span class="comment">//-&gt;没有传递value值-&gt;"获取"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.documentElement[attr] || <span class="built_in">document</span>.body[attr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-&gt;"设置"</span></span><br><span class="line">    <span class="built_in">document</span>.documentElement[attr] = value;</span><br><span class="line">    <span class="built_in">document</span>.body[attr] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(win(<span class="string">"clientHeight"</span>));</span><br><span class="line">win(<span class="string">"scrollTop"</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>  win:一个有关于操作浏览器盒子模型的方法<br>    如果只传递了attr没有传递value,默认的意思是“获取”<br>    如果两个参数都传递了,意思是“设置”<br>    不严谨的来说这就是有关于”类的重载”:同一个方法,通过传递参数的不同实现了不同的功能<br>JS盒子模型中:client系列/offset系列/scrollWidth/scrollHeight都是”只读”属性-&gt;只能通过属性获取值,不能通过属性修改元素的样式</p><p>  scrollTop/scrollLeft:滚动条卷去的高度/宽度(这两个属性是唯一”可读写”属性)<br>    //box.scrollTop = 0;//-&gt;直接回到了容器的顶部</p><p>   我们的scrollTop的值是存在边界值(最大和最小值的),我们设置的值比最小值小或者比最大值大都没用,起到效果的依然是边界的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[最小值是零]</span><br><span class="line"> box.scrollTop = <span class="number">-1000</span>;<span class="comment">//-&gt;直接回到了容器的顶部,没有超出</span></span><br><span class="line"> <span class="built_in">console</span>.log(box.scrollTop);<span class="comment">//-&gt;0</span></span><br><span class="line"></span><br><span class="line">[最大值是=真实的高度-当前容器一屏幕的高度]</span><br><span class="line">    <span class="keyword">var</span> maxTop = box.scrollHeight - box.clientHeight;</span><br><span class="line">    <span class="built_in">console</span>.log(maxTop);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;首先要明白什么是JS盒子模型&quot;&gt;&lt;a href=&quot;#首先要明白什么是JS盒子模型&quot; class=&quot;headerlink&quot; title=&quot;首先要明白什么是JS盒子模型???&quot;&gt;&lt;/a&gt;&lt;strong&gt;首先要明白什么是JS盒子模型???&lt;/strong&gt;&lt;/h4&gt;&lt;h2 id=&quot;JS盒模型-指的是通过JS中提供的一系列的属性和方法-获取页面中元素的样式信息值&quot;&gt;&lt;a href=&quot;#JS盒模型-指的是通过JS中提供的一系列的属性和方法-获取页面中元素的样式信息值&quot; class=&quot;headerlink&quot; title=&quot;JS盒模型  指的是通过JS中提供的一系列的属性和方法,获取页面中元素的样式信息值&quot;&gt;&lt;/a&gt;&lt;code&gt;JS盒模型&lt;/code&gt;  指的是通过JS中提供的一系列的属性和方法,获取页面中元素的样式信息值&lt;/h2&gt;&lt;p&gt;  #box(有很多自己的私有的属性) -&amp;gt;HTMLDivElement.prototype -&amp;gt;HTMLElement.prototype -&amp;gt;Element.prototype -&amp;gt;Node.prototype -&amp;gt;EventTarget.prototype -&amp;gt;Object.prototype&lt;br&gt;    var box = document.getElementById(“box”);&lt;br&gt;    console.dir(box);&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://lingkeyu.com/categories/javascript/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="前端学习" scheme="http://lingkeyu.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数组的方法汇集+解析</title>
    <link href="http://lingkeyu.com/2017/07/20/%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95%E6%B1%87%E9%9B%86+%E8%A7%A3%E6%9E%90/"/>
    <id>http://lingkeyu.com/2017/07/20/数组的方法汇集+解析/</id>
    <published>2017-07-20T01:02:31.000Z</published>
    <updated>2018-09-01T13:05:03.343Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数组的方法汇集-解析"><a href="#数组的方法汇集-解析" class="headerlink" title="数组的方法汇集+解析"></a><strong>数组的方法汇集+解析</strong></h4><p>数组方法的运用,在实际的项目真的是涉及到很多,熟练运用好数组的方法,可以帮我们轻松解决掉很多问题,那么数组的方法有哪些? 我特意去收集查找了一下,码了下来…..</p><br><hr><br><a id="more"></a><br><h3 class="heading" data-id="heading-2">创建一个数组:</h3><br><pre><code class="copyable">    // 字面量方式:<br>    // 这个方法也是我们最常用的，在初始化数组的时候 相当方便<br>    var a = [3, 11, 8];  // [3,11,8];<br>    // 构造器:<br>    // 实际上 new Array === Array,加不加new 一点影响都没有。<br>    var a = Array(); // []<br>    var a = Array(3); // [,,]<br>    var a = Array(3,11,8); // [ 3,11,8 ]<br>  </code></pre><br><h4 class="heading" data-id="heading-3">ES6 Array.of()  返回由所有参数值组成的数组</h4><br><p>定义：返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。</p><br><p>目的：Array.of() 出现的目的是为了解决上述构造器因参数个数不同，导致的行为有差异的问题。</p><br><pre><code class="copyable">    let a = Array.of(3, 11, 8); // [3,11,8]<br>    let a = Array.of(3); // [3]<br>  </code></pre><br><h4 class="heading" data-id="heading-4">ES6 Arrary.from() 将两类对象转为真正的数组</h4><br><p>定义：用于将两类对象转为真正的数组（不改变原对象，返回新的数组）。</p><br><p>参数：</p><br><p>第一个参数(必需):要转化为真正数组的对象。</p><br><p>第二个参数(可选): 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。</p><br><p>第三个参数(可选): 用来绑定this。</p><br><pre><code class="copyable">    // 1. 对象拥有length属性<br>    let obj = {0: ‘a’, 1: ‘b’, 2:’c’, length: 3};<br>    let arr = Array.from(obj); // [‘a’,’b’,’c’];<br>    // 2. 部署了 Iterator接口的数据结构 比如:字符串、Set、NodeList对象<br>    let arr = Array.from(‘hello’); // [‘h’,’e’,’l’,’l’,’o’]<br>    let arr = Array.from(new Set([‘a’,’b’])); // [‘a’,’b’]<br>  </code></pre><br><hr><br><h2 class="heading" data-id="heading-5">方法:</h2><br><p>数组原型提供了非常多的方法，这里分为三类来讲，一类会改变原数组的值，一类是不会改变原数组，以及数组的遍历方法。</p><br><h3 class="heading" data-id="heading-6">改变原数组的方法(9个):</h3><br><pre><code class="copyable">    let a = [1,2,3];<br>    ES5:<br>     a.splice()/ a.sort() / a.pop()/ a.shift()/  a.push()/ a.unshift()/ a.reverse()<br>    ES6:<br>    a.copyWithin() / a.fill<br>  </code></pre><br><p>对于这些能够改变原数组的方法，要注意避免在循环遍历中改变原数组的选项，比如: 改变数组的长度，导致遍历的长度出现问题。</p><br><h4 class="heading" data-id="heading-7">splice() 添加/删除数组元素</h4><br><p>定义： splice() 方法<strong>向/从数组中添加/删除</strong>项目，然后返回被删除的项目</p><br><p>语法： <code>array.splice(index,howmany,item1,…..,itemX)</code></p><br><p>参数:</p><br><ol><br><li>index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li><br><li>howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。</li><br><li>item1, …, itemX： 可选。向数组添加的新项目。</li><br></ol><br><p>返回值: 如果有元素被删除,返回包含被删除项目的新数组。</p><br><p>eg1:删除元素</p><br><pre><code class="copyable">    let a = [1, 2, 3, 4, 5, 6, 7];<br>    let item = a.splice(0, 3); // [1,2,3]<br>    console.log(a); // [4,5,6,7]<br>    // 从数组下标0开始，删除3个元素<br>    let item = a.splice(-1, 3); // [7]<br>    // 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7<br>  </code></pre><br><p>eg2: 删除并添加</p><br><pre><code class="copyable">     let a = [1, 2, 3, 4, 5, 6, 7];<br>    let item = a.splice(0,3,’添加’); // [1,2,3]<br>    console.log(a); // [‘添加’,4,5,6,7]<br>    // 从数组下标0开始，删除3个元素，并添加元素’添加’<br>     let b = [1, 2, 3, 4, 5, 6, 7];<br>    let item = b.splice(-2,3,’添加1’,’添加2’); // [6,7]<br>    console.log(b); // [1,2,3,4,5,’添加1’,’添加2’]<br>    // 从数组最后第二个元素开始，删除3个元素，并添加两个元素’添加1’、’添加2’<br>  </code></pre><br><p>eg3: 不删除只添加:</p><br><pre><code class="copyable">    let a = [1, 2, 3, 4, 5, 6, 7];<br>    let item = a.splice(0,0,’添加1’,’添加2’); // [] 没有删除元素，返回空数组<br>    console.log(a); // [‘添加1’,’添加2’,1,2,3,4,5,6,7]<br>    let b = [1, 2, 3, 4, 5, 6, 7];<br>    let item = b.splice(-1,0,’添加1’,’添加2’); // [] 没有删除元素，返回空数组<br>    console.log(b); // [1,2,3,4,5,6,’添加1’,’添加2’,7] 在最后一个元素的前面添加两个元素<br>  </code></pre><br><p>从上述三个栗子可以得出:</p><br><ol><br><li>数组如果元素不够，会删除到最后一个元素为止</li><br><li>操作的元素，包括开始的那个元素</li><br><li>可以添加很多个元素</li><br><li>添加是在开始的元素前面添加的</li><br></ol><br><h4 class="heading" data-id="heading-8">sort() 数组排序</h4><br><p>定义: sort()方法对数组元素进行排序，并返回这个数组。</p><br><p>参数可选: 规定排序顺序的比较函数。</p><br><p>默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用<code>toString()</code>方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。</p><br><pre><code class="copyable">    // 字符串排列 看起来很正常<br>    var a = [“Banana”, “Orange”, “Apple”, “Mango”];<br>    a.sort(); // [“Apple”,”Banana”,”Mango”,”Orange”]<br>    // 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的<br>    var    a = [10, 1, 3, 20,25,8];<br>    console.log(a.sort()) // [1,10,20,25,3,8];<br>  </code></pre><br><p><strong>比较函数的两个参数：</strong></p><br><p>sort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：</p><br><ul><br><li>若比较函数返回值&lt;0，那么a将排到b的前面;</li><br><li>若比较函数返回值=0，那么a 和 b 相对位置不变；</li><br><li>若比较函数返回值&gt;0，那么b 排在a 将的前面；</li><br></ul><br><br><p><strong>sort排序常见用法</strong>：</p><br><ol><br><li><br><p>数组元素为数字的升序、降序:</p><br><pre><code class="copyable"> var array =  [10, 1, 3, 4,20,4,25,8];<br> // 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的<br> // 比如被减数a是10，减数是20  10-20 &lt; 0   被减数a(10)在减数b(20)前面<br> array.sort(function(a,b){<br>   return a-b;<br> });<br> console.log(array); // [1,3,4,4,8,10,20,25];<br> // 降序 被减数和减数调换了  20-10&gt;0 被减数b(20)在减数a(10)的前面<br> array.sort(function(a,b){<br>   return b-a;<br> });<br> console.log(array); // [25,20,10,8,4,4,3,1];<br>  </code></pre><br></li><br><li><br><p>数组多条件排序</p><br><pre><code class="copyable"> var array = [{id:10,age:2},{id:5,age:4},{id:6,age:10},{id:9,age:6},{id:2,age:8},{id:10,age:9}];<br>     array.sort(function(a,b){<br>         if(a.id === b.id){// 如果id的值相等，按照age的值降序<br>             return b.age - a.age<br>         }else{ // 如果id的值不相等，按照id的值升序<br>             return a.id - b.id<br>         }<br>     })<br>  // [{“id”:2,”age”:8},{“id”:5,”age”:4},{“id”:6,”age”:10},{“id”:9,”age”:6},{“id”:10,”age”:9},{“id”:10,”age”:2}]<br>  </code></pre><br></li><br><li><br><p>自定义比较函数，天空才是你的极限</p><br></li><br></ol><br><p>类似的：<strong>运用好返回值，我们可以写出任意符合自己需求的比较函数</strong></p><br><pre><code class="copyable">    var array = [{name:’Koro1’},{name:’Koro1’},{name:’OB’},{name:’Koro1’},{name:’OB’},{name:’OB’}];<br>    array.sort(function(a,b){<br>        if(a.name === ‘Koro1’){// 如果name是’Koro1’ 返回-1 ，-1&lt;0 a排在b的前面<br>            return -1<br>        }else{ // 如果不是的话，a排在b的后面<br>          return 1<br>        }<br>    })<br>    // [{“name”:”Koro1”},{“name”:”Koro1”},{“name”:”Koro1”},{“name”:”OB”},{“name”:”OB”},{“name”:”OB”}]<br>  </code></pre><br><h4 class="heading" data-id="heading-9">pop() 删除一个数组中的最后的一个元素</h4><br><p>定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。</p><br><p>参数: 无。</p><br><pre><code class="copyable">    let  a =  [1,2,3];<br>    let item = a.pop();  // 3<br>    console.log(a); // [1,2]<br>  </code></pre><br><h4 class="heading" data-id="heading-10">shift() 删除数组的第一个元素</h4><br><p>定义: shift()方法删除数组的第一个元素，并返回这个元素。</p><br><p>参数: 无。</p><br><pre><code class="copyable">    let  a =  [1,2,3];<br>    let item = a.shift();  // 1<br>    console.log(a); // [2,3]<br>  </code></pre><br><h4 class="heading" data-id="heading-11">push() 向数组的末尾添加元素</h4><br><p>定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p><br><p>参数:  item1, item2, …, itemX ,要添加到数组末尾的元素</p><br><pre><code class="copyable">    let  a =  [1,2,3];<br>    let item = a.push(‘末尾’);  // 4<br>    console.log(a); // [1,2,3,’末尾’]<br>  </code></pre><br><h4 class="heading" data-id="heading-12">unshift()</h4><br><p>定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p><br><p>参数:  item1, item2, …, itemX ,要添加到数组开头的元素</p><br><pre><code class="copyable">    let  a =  [1,2,3];<br>    let item = a.unshift(‘开头’);  // 4<br>    console.log(a); // [‘开头’,1,2,3]<br>  </code></pre><br><h4 class="heading" data-id="heading-13">reverse() 颠倒数组中元素的顺序</h4><br><p>定义: reverse() 方法用于颠倒数组中元素的顺序。</p><br><p>参数: 无</p><br><pre><code class="copyable">    let  a =  [1,2,3];<br>    a.reverse();<br>    console.log(a); // [3,2,1]<br>  </code></pre><br><h4 class="heading" data-id="heading-14">ES6: copyWithin() 指定位置的成员复制到其他位置</h4><br><p>定义: 在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。</p><br><p>语法:</p><br><pre><code class="copyable">    array.copyWithin(target, start = 0, end = this.length)<br>  </code></pre><br><p>参数:</p><br><p>三个参数都是数值，如果不是，会自动转为数值.</p><br><ol><br><li>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</li><br><li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li><br><li>end（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。</li><br></ol><br><p>浏览器兼容(MDN): chrome 45,Edge 12,Firefox32,Opera 32,Safari 9, IE 不支持</p><br><p>eg:</p><br><pre><code class="copyable">        // -2相当于3号位，-1相当于4号位<br>        [1, 2, 3, 4, 5].copyWithin(0, -2, -1)<br>        // [4, 2, 3, 4, 5]<br>        var a=[‘OB1’,’Koro1’,’OB2’,’Koro2’,’OB3’,’Koro3’,’OB4’,’Koro4’,’OB5’,’Koro5’]<br>        // 2位置开始被替换,3位置开始读取要替换的 5位置前面停止替换<br>        a.copyWithin(2,3,5)<br>        // [“OB1”,”Koro1”,”Koro2”,”OB3”,”OB3”,”Koro3”,”OB4”,”Koro4”,”OB5”,”Koro5”]<br>  </code></pre><br><p>从上述栗子:</p><br><ol><br><li>第一个参数是开始被替换的元素位置</li><br><li>要替换数据的位置范围:从第二个参数是开始读取的元素，在第三个参数前面一个元素停止读取</li><br><li>数组的长度不会改变</li><br><li><strong>读了几个元素就从开始被替换的地方替换几个元素</strong></li><br></ol><br><h4 class="heading" data-id="heading-15">ES6: fill() 填充数组</h4><br><p>定义:  使用给定值，填充一个数组。</p><br><p>参数:</p><br><p>第一个元素(必须): 要填充数组的值</p><br><p>第二个元素(可选): 填充的开始位置,默认值为0</p><br><p>第三个元素(可选)：填充的结束位置，默认是为<code>this.length</code></p><pre><code class="copyable">    ['a', 'b', 'c'].fill(7)    // [7, 7, 7]    ['a', 'b', 'c'].fill(7, 1, 2)    // ['a', 7, 'c']  </code></pre><hr><h3 class="heading" data-id="heading-16">不改变原数组的方法(8个):</h3><pre><code class="copyable">    ES5：    slice、join、toLocateString、toStrigin、cancat、indexOf、lastIndexOf、    ES7：    includes  </code></pre><h4 class="heading" data-id="heading-17">slice() 浅拷贝数组的元素</h4><p>定义： 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。</p><p><strong>注意</strong>：字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。</p><p>语法:</p><pre><code class="copyable">    array.slice(begin, end);  </code></pre><p>参数:</p><p>begin(可选): 索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。</p><p>end(可选):索引数值(不包括),接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。</p><pre><code class="copyable">    let a= ['hello','world'];    let b=a.slice(0,1); // ['hello']    a[0]='改变原数组';    console.log(a,b); // ['改变原数组','world'] ['hello']    b[0]='改变拷贝的数组';     console.log(a,b); // ['改变原数组','world'] ['改变拷贝的数组']  </code></pre><p>如上：新数组是浅拷贝的，<strong>元素是简单数据类型，改变之后不会互相干扰</strong>。</p><p>如果是<strong>复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变</strong>。</p><pre><code class="copyable">    let a= [{name:'OBKoro1'}];    let b=a.slice();    console.log(b,a); // [{"name":"OBKoro1"}]  [{"name":"OBKoro1"}]    // a[0].name='改变原数组';    // console.log(b,a); // [{"name":"改变原数组"}] [{"name":"改变原数组"}]    // b[0].name='改变拷贝数组',b[0].koro='改变拷贝数组';    //  [{"name":"改变拷贝数组","koro":"改变拷贝数组"}] [{"name":"改变拷贝数组","koro":"改变拷贝数组"}]  </code></pre><p>原因在定义上面说过了的：slice()是浅拷贝，对于复杂的数据类型浅拷贝，拷贝的只是指向原数组的指针，所以无论改变原数组，还是浅拷贝的数组，都是改变原数组的数据。</p><h4 class="heading" data-id="heading-18">join()  数组转字符串</h4><p>定义:  join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。</p><p>语法:</p><pre><code class="copyable">    array.join(str)  </code></pre><p>参数:</p><p>str(可选): 指定要使用的分隔符，默认使用逗号作为分隔符。</p><pre><code class="copyable">    let a= ['hello','world'];    let str=a.join(); // 'hello,world'    let str2=a.join('+'); // 'hello+world'  </code></pre><p>使用join方法或者下文说到的toString方法时，当数组中的元素也是数组或者是对象时会出现什么情况？</p><pre><code class="copyable">    let a= [['OBKoro1','23'],'test'];    let str1=a.join(); // OBKoro1,23,test    let b= [{name:'OBKoro1',age:'23'},'test'];    let str2 = b.join(); // [object Object],test    // 对象转字符串推荐JSON.stringify(obj);  </code></pre><p>所以，<code>join()/toString()</code>方法在数组元素是数组的时候，会将里面的数组也调用<code>join()/toString()</code>,如果是对象的话，对象会被转为<code>[object Object]</code>字符串。</p><h4 class="heading" data-id="heading-19">toLocaleString() 数组转字符串</h4><p>定义: 返回一个表示数组元素的字符串。该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。</p><p>语法:</p><pre><code class="copyable">    array.toLocaleString()  </code></pre><p>参数：无。</p><pre><code class="copyable">    let a=[{name:'OBKoro1'},23,'abcd',new Date()];    let str=a.toLocaleString(); // [object Object],23,abcd,2018/5/28 下午1:52:20   </code></pre><p>如上述栗子：调用数组的<code>toLocaleString</code>方法，数组中的每个元素都会调用自身的<code>toLocaleString</code>方法，对象调用对象的<code>toLocaleString</code>,Date调用Date的<code>toLocaleString</code>。</p><h4 class="heading" data-id="heading-20">toString() 数组转字符串 不推荐</h4><p>定义: toString() 方法可把数组转换为由逗号链接起来的字符串。</p><p>语法:</p><pre><code class="copyable">    array.toString()  </code></pre><p>参数: 无。</p><p>该方法的效果和join方法一样，都是用于数组转字符串的，但是与join方法相比没有优势，也不能自定义字符串的分隔符，因此不推荐使用。</p><p><strong>值得注意的是</strong>：当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串</p><pre><code class="copyable">   let b= [ 'toString','演示'].toString(); // toString,演示   let a= ['调用toString','连接在我后面']+'啦啦啦'; // 调用toString,连接在我后面啦啦啦  </code></pre><h4 class="heading" data-id="heading-21">cancat</h4><p>定义： 方法用于合并两个或多个数组，返回一个新数组。</p><p>语法：</p><pre><code class="copyable">    var newArr =oldArray.concat(arrayX,arrayX,......,arrayX)  </code></pre><p>arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。</p><br><p>eg1:</p><br><pre><code class="copyable">    let a = [1, 2, 3];<br>    let b = [4, 5, 6];<br>    //连接两个数组<br>    let newVal=a.concat(b); // [1,2,3,4,5,6]<br>    // 连接三个数组<br>    let c = [7, 8, 9]<br>    let newVal2 = a.concat(b, c); // [1,2,3,4,5,6,7,8,9]<br>    // 添加元素<br>    let newVal3 = a.concat(‘添加元素’,b, c,’再加一个’);<br>    // [1,2,3,”添加元素”,4,5,6,7,8,9,”再加一个”]<br>   // 合并嵌套数组  会浅拷贝嵌套数组<br>   let d = [1,2 ];<br>   let f = [3,[4]];<br>   let newVal4 = d.concat(f); // [1,2,3,[4]]<br>  </code></pre><br><p><strong>ES6扩展运算符<code>…</code>合并数组</strong>：</p><br><p>因为ES6的语法更简洁易懂，所以现在合并数组我大部分采用<code>…</code>来处理，<code>…</code>运算符可以实现<code>cancat</code>的每个栗子，且更简洁和具有高度自定义数组元素位置的效果。</p><br><pre><code class="copyable">    let a = [2, 3, 4, 5]<br>    let b = [ 4,…a, 4, 4]<br>    console.log(a,b); //  [2, 3, 4, 5] [4,2,3,4,5,4,4]<br>  </code></pre><br><br><h4 class="heading" data-id="heading-22">indexOf() 查找数组是否存在某个元素，返回下标</h4><br><p>定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p><br><p>语法:</p><br><pre><code class="copyable">    array.indexOf(searchElement,fromIndex)<br>  </code></pre><br><p>参数:</p><br><p>searchElement(必须):被查找的元素</p><br><p>fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</p><br><p>严格相等的搜索:</p><br><p>数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等<code>===</code>搜索元素，即<strong>数组元素要完全匹配</strong>才能搜索成功。</p><br><p><strong>注意</strong>：indexOf()不能识别<code>NaN</code></p><br><p>eg:</p><br><pre><code class="copyable">    let a=[‘啦啦’,2,4,24,NaN]<br>    console.log(a.indexOf(‘啦’));  // -1<br>    console.log(a.indexOf(‘NaN’));  // -1<br>    console.log(a.indexOf(‘啦啦’)); // 0<br>  </code></pre><br><p>使用场景：</p><br><ol><br><li>数组去重</li><br><li>根据获取的数组下标执行操作，改变数组中的值等。</li><br><li>判断是否存在，执行操作。</li><br></ol><br><h4 class="heading" data-id="heading-23">lastIndexOf() 查找指定元素在数组中的最后一个位置</h4><br><p>定义:  方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）</p><br><p>语法:</p><br><pre><code class="copyable">    arr.lastIndexOf(searchElement,fromIndex)<br>  </code></pre><br><p>参数:</p><br><p>searchElement(必须): 被查找的元素</p><br><p>fromIndex(可选): 逆向查找开始位置，默认值数组的长度-1，即查找整个数组。</p><br><p>关于fromIndex有三个规则:</p><br><ol><br><li><br><p>正值。如果该值大于或等于数组的长度，则整个数组会被查找。</p><br></li><br><li><br><p>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)</p><br></li><br><li><br><p>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</p><br><pre><code class="copyable"> let a=[‘OB’,4,’Koro1’,1,2,’Koro1’,3,4,5,’Koro1’]; // 数组长度为10<br> // let b=a.lastIndexOf(‘Koro1’,4); // 从下标4开始往前找 返回下标2<br> // let b=a.lastIndexOf(‘Koro1’,100); //  大于或数组的长度 查找整个数组 返回9<br> // let b=a.lastIndexOf(‘Koro1’,-11); // -1 数组不会被查找<br> let b=a.lastIndexOf(‘Koro1’,-9); // 从第二个元素4往前查找，没有找到 返回-1<br>  </code></pre><br></li><br></ol><br><h4 class="heading" data-id="heading-24">ES7 includes() 查找数组是否包含某个元素 返回布尔</h4><br><p>定义： 返回一个布尔值，表示某个数组是否包含给定的值</p><br><p>语法：</p><br><pre><code class="copyable">    array.includes(searchElement,fromIndex=0)<br>  </code></pre><br><p>参数：</p><br><p>searchElement(必须):被查找的元素</p><br><p>fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</p><br><p><strong>includes方法是为了弥补indexOf方法的缺陷而出现的:</strong></p><br><ol><br><li>indexOf方法不能识别<code>NaN</code></li><br><li>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于<code>-1</code>，表达不够直观</li><br></ol><br><p>eg:</p><br><pre><code class="copyable">    let a=[‘OB’,’Koro1’,1,NaN];<br>    // let b=a.includes(NaN); // true 识别NaN<br>    // let b=a.includes(‘Koro1’,100); // false 超过数组长度 不搜索<br>    // let b=a.includes(‘Koro1’,-3);  // true 从倒数第三个元素开始搜索<br>    // let b=a.includes(‘Koro1’,-100);  // true 负值绝对值超过数组长度，搜索整个数组<br>  </code></pre><br><p>兼容性(MDN): chrome47, Firefox 43,Edge 14,Opera 34, Safari 9,IE 未实现。</p><br><hr><br><h3 class="heading" data-id="heading-25">遍历方法(12个):</h3><br><p>js中遍历数组并不会改变原始数组的方法总共有12个:</p><br><pre><code class="copyable">    ES5：<br>    forEach、every 、some、 filter、map、reduce、reduceRight、<br>    ES6：<br>    find、findIndex、keys、values、entries<br>  </code></pre><br><h4 class="heading" data-id="heading-26">关于遍历：</h4><br><ul><br><li>尽量不要在遍历的时候，修改后面要遍历的值</li><br><li>尽量不要在遍历的时候修改数组的长度（删除/添加）</li><br></ul><br><h4 class="heading" data-id="heading-27">forEach</h4><br><p>定义: 按升序为数组中含有效值的每一项执行一次回调函数。</p><br><p>语法：</p><br><pre><code class="copyable">    array.forEach(function(currentValue, index, arr), thisValue)<br>  </code></pre><br><p>参数:</p><br><p>function(必须): 数组中每个元素需要调用的函数。</p><br><pre><code class="copyable">    // 回调函数的参数<br>    1. currentValue(必须),数组当前元素的值<br>    2. index(可选), 当前元素的索引值<br>    3. arr(可选),数组对象本身<br>  </code></pre><br><p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p><br><p><strong>关于forEach()你要知道</strong>：</p><br><ul><br><li>无法中途退出循环，只能用<code>return</code>退出本次回调，进行下一次回调。</li><br><li>它总是返回 undefined值,即使你return了一个值。</li><br></ul><br><h4 class="heading" data-id="heading-28">下面类似语法同样适用这些规则</h4><br><pre><code class="copyable">    1. 对于空数组是不会执行回调函数的<br>    2. 对于已在迭代过程中删除的元素，或者空元素会跳过回调函数<br>    3. 遍历次数再第一次循环前就会确定，再添加到数组中的元素不会被遍历。<br>    4. 如果已经存在的值被改变，则传递给 callback 的值是遍历到他们那一刻的值。<br>  </code></pre><br><p>eg:</p><br><pre><code class="copyable">    let a = [1, 2, ,3]; // 最后第二个元素是空的，不会遍历(undefined、null会遍历)<br>    let obj = { name: ‘OBKoro1’ };<br>    let result = a.forEach(function (value, index, array) {<br>      a[3] = ‘改变元素’;<br>      a.push(‘添加到尾端，不会被遍历’)<br>      console.log(value, ‘forEach传递的第一个参数’); // 分别打印 1 ,2 ,改变元素<br>      console.log(this.name); // OBKoro1 打印三次 this绑定在obj对象上<br>      // break; // break会报错<br>      return value; // return只能结束本次回调 会执行下次回调<br>      console.log(‘不会执行，因为return 会执行下一次循环回调’)<br>    }, obj);<br>    console.log(result); // 即使return了一个值,也还是返回undefined<br>    // 回调函数也接受接头函数写法<br>  </code></pre><br><h4 class="heading" data-id="heading-29">every 检测数组所有元素是否都符合判断条件</h4><br><p>定义: 方法用于检测数组所有元素是否都符合函数定义的条件</p><br><p>语法：</p><br><pre><code class="copyable">    array.every(function(currentValue, index, arr), thisValue)<br>  </code></pre><br><p>参数:(这几个方法的参数，语法都类似)</p><br><p>function(必须): 数组中每个元素需要调用的函数。</p><br><pre><code class="copyable">    // 回调函数的参数<br>    1. currentValue(必须),数组当前元素的值<br>    2. index(可选), 当前元素的索引值<br>    3. arr(可选),数组对象本身<br>  </code></pre><br><p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p><br><p>方法返回值规则:</p><br><ol><br><li>如果数组中检测到<strong>有一个元素不满足，则整个表达式返回 false</strong>，且剩余的元素不会再进行检测。</li><br><li>如果所有元素<strong>都满足条件，则返回 true</strong>。=</li><br></ol><br><p>eg:</p><br><pre><code class="copyable">    function isBigEnough(element, index, array) {<br>      return element &gt;= 10; // 判断数组中的所有元素是否都大于10<br>    }<br>    let result = [12, 5, 8, 130, 44].every(isBigEnough);   // false<br>    let result = [12, 54, 18, 130, 44].every(isBigEnough); // true<br>    // 接受箭头函数写法<br>    [12, 5, 8, 130, 44].every(x =&gt; x &gt;= 10); // false<br>    [12, 54, 18, 130, 44].every(x =&gt; x &gt;= 10); // true<br>  </code></pre><br><h4 class="heading" data-id="heading-30">some 数组中的是否有满足判断条件的元素</h4><br><p>定义：数组中的是否有满足判断条件的元素</p><br><p>语法：</p><br><pre><code class="copyable">    array.some(function(currentValue, index, arr), thisValue)<br>  </code></pre><br><p>参数:(这几个方法的参数，语法都类似)</p><br><p>function(必须): 数组中每个元素需要调用的函数。</p><br><pre><code class="copyable">    // 回调函数的参数<br>    1. currentValue(必须),数组当前元素的值<br>    2. index(可选), 当前元素的索引值<br>    3. arr(可选),数组对象本身<br>  </code></pre><br><p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p><br><p>方法返回值规则：</p><br><ol><br><li><br><p>如果<strong>有一个元素满足条件，则表达式返回true</strong>, 剩余的元素不会再执行检测。</p><br></li><br><li><br><p>如果<strong>没有满足条件的元素，则返回false</strong>。</p><br><pre><code class="copyable"> function isBigEnough(element, index, array) {<br>   return (element &gt;= 10); //数组中是否有一个元素大于 10<br> }<br> let result = [2, 5, 8, 1, 4].some(isBigEnough); // false<br> let result = [12, 5, 8, 1, 4].some(isBigEnough); // true<br>  </code></pre><br></li><br></ol><br><h4 class="heading" data-id="heading-31">filter 过滤原始数组，返回新数组</h4><br><p>定义: 返回一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p><br><p>语法：</p><br><pre><code class="copyable">    let new_array = arr.filter(function(currentValue, index, arr), thisArg)<br>  </code></pre><br><p>参数:(这几个方法的参数，语法都类似)</p><br><p>function(必须): 数组中每个元素需要调用的函数。</p><br><pre><code class="copyable">    // 回调函数的参数<br>    1. currentValue(必须),数组当前元素的值<br>    2. index(可选), 当前元素的索引值<br>    3. arr(可选),数组对象本身<br>  </code></pre><br><p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p><br><p>eg:</p><br><pre><code class="copyable">     let a = [32, 33, 16, 40];<br>    let result = a.filter(function (value, index, array) {<br>      return value &gt;= 18; // 返回a数组中所有大于18的元素<br>    });<br>    console.log(result,a);// [32,33,40] [32,33,16,40]<br>  </code></pre><br><h4 class="heading" data-id="heading-32">map 对数组中的每个元素进行处理，返回新的数组</h4><br><p>定义：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><br><p>语法：</p><br><pre><code class="copyable">    let new_array = arr.map(function(currentValue, index, arr), thisArg)<br>  </code></pre><br><p>参数:(这几个方法的参数，语法都类似)</p><br><p>function(必须): 数组中每个元素需要调用的函数。</p><br><pre><code class="copyable">    // 回调函数的参数<br>    1. currentValue(必须),数组当前元素的值<br>    2. index(可选), 当前元素的索引值<br>    3. arr(可选),数组对象本身<br>  </code></pre><br><p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p><br><p>eg:</p><br><pre><code class="copyable">let a = [‘1’,’2’,’3’,’4’];<br>let result = a.map(function (value, index, array) {<br>  return value + ‘新数组的新元素’<br>});<br>console.log(result, a);<br>// [“1新数组的新元素”,”2新数组的新元素”,”3新数组的新元素”,”4新数组的新元素”] [“1”,”2”,”3”,”4”]<br>  </code></pre><br><h4 class="heading" data-id="heading-33">reduce 为数组提供累加器，合并为一个值</h4><br><p>定义：reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，最终合并为一个值。</p><br><p>语法：</p><br><pre><code class="copyable">    array.reduce(function(total, currentValue, currentIndex, arr), initialValue)<br>  </code></pre><br><p>参数：</p><br><p>function(必须): 数组中每个元素需要调用的函数。</p><br><pre><code class="copyable">    // 回调函数的参数<br>    1. total(必须)，初始值, 或者上一次调用回调返回的值<br>    2. currentValue(必须),数组当前元素的值<br>    3. index(可选), 当前元素的索引值<br>    4. arr(可选),数组对象本身<br>  </code></pre><br><p>initialValue(可选): 指定第一次回调 的第一个参数。</p><br><p>回调第一次执行时:</p><br><ul><br><li>如果 initialValue 在调用 reduce 时被提供，那么第一个 total 将等于 initialValue，此时 currentValue 等于数组中的第一个值；</li><br><li>如果 initialValue 未被提供，那么 total 等于数组中的第一个值，currentValue 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。</li><br><li>如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么回调不会被执行，数组的唯一值将被返回。</li><br></ul><br><p>eg:</p><br><pre><code class="copyable">    // 数组求和<br>    let sum = [0, 1, 2, 3].reduce(function (a, b) {<br>      return a + b;<br>    }, 0);<br>    // 6<br>    // 将二维数组转化为一维 将数组元素展开<br>    let flattened = [[0, 1], [2, 3], [4, 5]].reduce(<br>      (a, b) =&gt; a.concat(b),<br>      []<br>    );<br>     // [0, 1, 2, 3, 4, 5]<br>  </code></pre><br><h4 class="heading" data-id="heading-34">reduceRight  从右至左累加</h4><br><p>这个方法除了与reduce执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。</p><br><h4 class="heading" data-id="heading-35">ES6：find()&amp; findIndex() 根据条件找到数组成员</h4><br><p>find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回undefined。</p><br><p>findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p><br><p>这两个方法</p><br><p>语法：</p><br><pre><code class="copyable">    let new_array = arr.find(function(currentValue, index, arr), thisArg)<br>     let new_array = arr.findIndex(function(currentValue, index, arr), thisArg)<br>  </code></pre><br><p>参数:(这几个方法的参数，语法都类似)</p><br><p>function(必须): 数组中每个元素需要调用的函数。</p><br><pre><code class="copyable">    // 回调函数的参数<br>    1. currentValue(必须),数组当前元素的值<br>    2. index(可选), 当前元素的索引值<br>    3. arr(可选),数组对象本身<br>  </code></pre><br><p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p><br><p>这两个方法都可以识别<code>NaN</code>,弥补了<code>indexOf</code>的不足.</p><br><p>eg:</p><br><pre><code class="copyable">        // find<br>        let a = [1, 4, -5, 10].find((n) =&gt; n &lt; 0); // 返回元素-5<br>        let b = [1, 4, -5, 10,NaN].find((n) =&gt; Object.is(NaN, n));  // 返回元素NaN<br>        // findIndex<br>        let a = [1, 4, -5, 10].findIndex((n) =&gt; n &lt; 0); // 返回索引2<br>        let b = [1, 4, -5, 10,NaN].findIndex((n) =&gt; Object.is(NaN, n));  // 返回索引4<br>  </code></pre><br><p>浏览器兼容(MDN):Chrome 45,Firefox 25,Opera 32, Safari 8, Edge yes,</p><br><h4 class="heading" data-id="heading-36">ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</h4><br><p>定义：三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值。</p><br><p>语法：</p><br><pre><code class="copyable">    array.keys()<br>    array.values()<br>    array.entries()<br>  </code></pre><br><p>参数：无。</p><pre><code class="copyable">    for (let index of ['a', 'b'].keys()) {      console.log(index);    }    // 0    // 1    for (let elem of ['a', 'b'].values()) {      console.log(elem);    }    // 'a'    // 'b'    for (let [index, elem] of ['a', 'b'].entries()) {      console.log(index, elem);    }    // 0 "a"    // 1 "b"  </code></pre><p>在<code>for..of</code>中如果遍历中途要退出，可以使用<code>break</code>退出循环。</p><p>如果不使用<code>for...of</code>循环，可以手动调用遍历器对象的next方法，进行遍历:</p><pre><code class="copyable">    let letter = ['a', 'b', 'c'];    let entries = letter.entries();    console.log(entries.next().value); // [0, 'a']    console.log(entries.next().value); // [1, 'b']    console.log(entries.next().value); // [2, 'c']  </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;数组的方法汇集-解析&quot;&gt;&lt;a href=&quot;#数组的方法汇集-解析&quot; class=&quot;headerlink&quot; title=&quot;数组的方法汇集+解析&quot;&gt;&lt;/a&gt;&lt;strong&gt;数组的方法汇集+解析&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;数组方法的运用,在实际的项目真的是涉及到很多,熟练运用好数组的方法,可以帮我们轻松解决掉很多问题,那么数组的方法有哪些? 我特意去收集查找了一下,码了下来…..&lt;/p&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数组" scheme="http://lingkeyu.com/categories/%E6%95%B0%E7%BB%84/"/>
    
      <category term="javascript" scheme="http://lingkeyu.com/categories/%E6%95%B0%E7%BB%84/javascript/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="前端学习" scheme="http://lingkeyu.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Android四大组件知识点</title>
    <link href="http://lingkeyu.com/2017/04/19/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://lingkeyu.com/2017/04/19/Android四大组件知识点/</id>
    <published>2017-04-19T03:02:11.000Z</published>
    <updated>2018-09-01T13:04:08.285Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Android四大组件知识点"><a href="#Android四大组件知识点" class="headerlink" title="Android四大组件知识点"></a><strong>Android四大组件知识点</strong></h4><p><code>分别为activity、service、content provider、broadcast receiver。</code></p><p><hr><br><a id="more"></a></p><blockquote><p>一、android四大组件详解</p></blockquote><p>1、Activity</p><p>（1）一个Activity通常就是一个单独的屏幕（窗口），它上面可以显示一些控件也可以监听并处理用户的事件做出响应。</p><p>（2）Activity之间通过Intent进行通信。</p><p>（3）android应用中每一个Activity都必须要在AndroidManifest.xml配置文件中声明，否则系统将不识别也不执行该Activity。</p><p>2、Service</p><p>（1）service用于在后台完成用户指定的操作。service分为两种：<br>（a）started（启动）：当应用程序组件（如activity）调用startService()方法启动服务时，服务处于started状态。<br>（b）bound（绑定）：当应用程序组件调用bindService()方法绑定到服务时，服务处于bound状态。</p><p>(2)startService()与bindService()区别：<br>(a)started service（启动服务）是由其他组件调用startService()方法启动的，<br>这导致服务的onStartCommand()方法被调用。当服务是started状态时，<br>其生命周期与启动它的组件无关，并且可以在后台无限期运行，即使启动服务的组件已经被销毁。<br>因此，服务需要在完成任务后调用stopSelf()方法停止，或者由其他组件调用stopService()方法停止。</p><p>(b)使用bindService()方法启用服务，调用者与服务绑定在了一起，<br>调用者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。</p><p>(3)开发人员需要在应用程序配置文件中声明全部的service，使用标签。</p><p>(4)Service通常位于后台运行，它一般不需要与用户交互，因此Service组件没有图形用户界面。<br>Service组件需要继承Service基类。Service组件通常用于为其他组件提供后台服务或监控其他组件的运行状态。</p><p>3、Content Psrovider</p><p>（1）android平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。<br>其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。</p><p>（2）只有需要在多个应用程序间共享数据是才需要内容提供者。<br>例如，通讯录数据被多个应用程序使用，且必须存储在一个内容提供者中。它的好处是统一数据访问方式。<br>（3）ContentProvider实现数据共享。ContentProvider用于保存和获取数据，并使其对所有应用程序可见。<br>这是不同应用程序间共享数据的唯一方式，因为android没有提供所有应用共同访问的公共存储区。</p><p>（4）开发人员不会直接使用ContentProvider类的对象，大多数是通过ContentResolver对象实现对ContentProvider的操作。</p><p>（5）ContentProvider使用URI来唯一标识其数据集，这里的URI以content://作为前缀，表示该数据由ContentProvider来管理。</p><p>4、Broadcast Receiver</p><p>（1）你的应用可以使用它对外部事件进行过滤，只对感兴趣的外部事件(如当电话呼入时，或者数据网络可用时)<br>进行接收并做出响应。广播接收器没有用户界面。<br>然而，它们可以启动一个activity或serice来响应它们收到的信息，或者用NotificationManager来通知用户。<br>通知可以用很多种方式来吸引用户的注意力，例如闪动背灯、震动、播放声音等。<br>一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。</p><p>（2）广播接收者的注册有两种方法，分别是程序动态注册和AndroidManifest文件中进行静态注册。</p><p>（3）动态注册广播接收器特点是当用来注册的Activity关掉后，广播也就失效了。<br>静态注册无需担忧广播接收器是否被关闭，只要设备是开启状态，广播接收器也是打开着的。<br>也就是说哪怕app本身未启动，该app订阅的广播在触发时也会对它起作用。</p><blockquote><p>二、android四大组件总结：</p></blockquote><p>（1）4大组件的注册</p><p>4大基本组件都需要注册才能使用，每个Activity、service、Content Provider都需要在AndroidManifest文件中进行配置。<br>AndroidManifest文件中未进行声明的activity、服务以及内容提供者将不为系统所见，从而也就不可用。<br>而broadcast receiver广播接收者的注册分静态注册（在AndroidManifest文件中进行配置）<br>和通过代码动态创建并以调用Context.registerReceiver()的方式注册至系统。<br>需要注意的是在AndroidManifest文件中进行配置的广播接收者会随系统的启动而一直处于活跃状态，<br>只要接收到感兴趣的广播就会触发（即使程序未运行）。</p><p>（2）4大组件的激活</p><p>内容提供者的激活：当接收到ContentResolver发出的请求后，内容提供者被激活。<br>而其它三种组件activity、服务和广播接收器被一种叫做intent的异步消息所激活。</p><p>（3）4大组件的关闭</p><p>内容提供者仅在响应ContentResolver提出请求的时候激活。而一个广播接收器仅在响应广播信息的时候激活。<br>所以，没有必要去显式的关闭这些组件。<br>Activity关闭：可以通过调用它的finish()方法来关闭一个activity。<br>服务关闭：对于通过startService()方法启动的服务要调用Context.stopService()方法关闭服务，<br>使用bindService()方法启动的服务要调用Context.unbindService()方法关闭服务。</p><p>（4）android中的任务（activity栈）</p><p>（a）任务其实就是activity的栈，它由一个或多个Activity组成，<br>共同完成一个完整的用户体验。栈底的是启动整个任务的Activity，<br>栈顶的是当前运行的用户可以交互的Activity，当一个activity启动另外一个的时候，<br>新的activity就被压入栈，并成为当前运行的activity。而前一个activity仍保持在栈之中。<br>当用户按下BACK键的时候，当前activity出栈，而前一个恢复为当前运行的activity。<br>栈中保存的其实是对象，栈中的Activity永远不会重排，只会压入或弹出。</p><p>（b）任务中的所有activity是作为一个整体进行移动的。<br>整个的任务（即activity栈）可以移到前台，或退至后台。</p><p>（c）Android系统是一个多任务(Multi-Task)的操作系统，可以在用手机听音乐的同时，<br>也执行其他多个程序。每多执行一个应用程序，就会多耗费一些系统内存，<br>当同时执行的程序过多，或是关闭的程序没有正确释放掉内存，系统就会觉得越来越慢，<br>甚至不稳定。为了解决这个问题，Android引入了一个新的机制，即生命周期(Life Cycle)。</p><h3 id="Activity的生命周期："><a href="#Activity的生命周期：" class="headerlink" title="Activity的生命周期："></a>Activity的生命周期：</h3><p>1.七大生命周期：<br>onCreate() 第一次创建时执行;<br>onStart() 显示窗口时执行;<br>onResume() 可获取用户焦点时执行;<br>onPause() 失去用户焦点时执行;<br>onStop() 关闭窗口时执行;<br>onRestart() 重新显示窗口时执行;<br>onDestroy() 销毁时执行;</p><p>2.各种情况下生命周期的回调规律：</p><p>（1）应用程序进来主页面后：<br>onCreate() 创建activity时<br>onStart () 启动时<br>onResume() 显示时</p><p>（2) 按返回退出后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onPause()    暂停时  --&gt;丧失用户焦点的第一个特征</span><br><span class="line">onStop()     停止时</span><br><span class="line">onDestroy()  销毁时</span><br></pre></td></tr></table></figure><p>（3）按home后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onPause()    暂停时   </span><br><span class="line">onStop()     停止时</span><br></pre></td></tr></table></figure><p>（4）在home页再次点击这个应用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onRestart()   </span><br><span class="line">onStart()    启动时</span><br><span class="line">onResume ()  显示时</span><br></pre></td></tr></table></figure><p>（5）切换成横屏后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onPause()    暂停时          </span><br><span class="line">onStop()     停止时</span><br><span class="line">onDestroy()  销毁时</span><br><span class="line">onCreate()   创建activity时</span><br><span class="line">onStart()   启动时</span><br><span class="line">onResume()  显示时</span><br></pre></td></tr></table></figure><p><code>注意</code>设置 Activity 的 android:configChanges=”orientation|keyboardHidden|screenSize”时，<br>切屏不会重新调用各个生命周期，只会执行 onConfigurationChanged 方法</p><blockquote><p>三、Activity的启动模式：</p></blockquote><p>第一：什么是启动模式，启动的模式，理解成一个activity的启动的方式。<br>分为四种：</p><p>1、首先，我们现在没有指定任何启动模式，叫默认模式（standard）<br>标准的启动模式，每次激活activity时都会创建activity，创建之后，会把它放到任务栈里。</p><p>2、singleTop<br>如果在任务的栈顶，就重用该实例，如果栈顶不是这个activity，就重新实例化一个activity放到栈顶。</p><p>3、singleTask<br>如果在栈中已经有该activity的实例，就重复使用该实例，并且把压在它上边的实例全都清除掉；<br>如果在栈中没有找到该activity的实例，就创建一个放在栈顶。</p><p>4、singleInstance<br>与singletask的区别是，存放singleinstance模式的activity的回退栈，<br>不能有其他任何activity对象，也就是说，它自己单独有一个回退栈。</p><p><code>我们可以在 AndroidManifest.xml 配置的 android:launchMode 属性为以上四种之一即可</code></p><p>第二：两个 Activity 之间跳转时必然会执行的是哪几个方法？（重要）</p><p>一般情况下比如说有两个 activity,分别叫 A,B。当在 A 里面激活 B 组件的时候,A 会调用 onPause()方法,然后 B 调用 onCreate() ,onStart(), onResume()。这个时候 B 覆盖了窗体, A 会调用 onStop()方法. 如果 B 是个透明的,或者是对话框的样式, 就不会调用 A 的onStop()方法</p><p>第三：如何将一个 Activity 设置成窗口的样式？</p><p>只需要给我们的 Activity 配置如下属性即可。<br>android:theme=”@android:style/Theme.Dialog</p><p>第四：如何退出 Activity？如何安全退出已调用多个 Activity 的 Application？</p><p>1、通常情况用户退出一个 Activity 只需按返回键，我们写代码想退出 activity 直接调用 finish()方法就行。</p><p>2、记录打开的 Activity：<br>每打开一个 Activity，就记录下来。在需要退出时，关闭每一个 Activity 即可。<br>//伪代码<br>List lists ;// 在 application 全局的变量里面<br>lists = new ArrayList();<br>lists.add(this);<br>for(Activity activity: lists)<br>{<br>activity.finish();<br>}<br>lists.remove(this);</p><p>3、发送特定广播：<br>在需要结束应用时，发送一个特定的广播，每个 Activity 收到广播后，关闭即可。<br>//给某个 activity 注册接受接受广播的意图<br>registerReceiver(receiver, filter)<br>//如果过接受到的是 关闭 activity 的广播 就调用 finish()方法 把当前的 activity finish()掉</p><p>4、递归退出<br>在打开新的 Activity 时使用 startActivityForResult，然后自己加标志，在 onActivityResult 中处理，递归关闭。</p><p>5、其实 也可以通过 intent 的 flag 来实现 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP) 激活<br>一个新的 activity。此时如果该任务栈中已经有该 Activity，那么系统会把这个 Activity 上面的所有 Activity 干掉。其<br>实相当于给 Activity 配置的启动模式为 SingleTop。</p><h4 id="Service的知识点"><a href="#Service的知识点" class="headerlink" title="Service的知识点"></a>Service的知识点</h4><blockquote><p>第一：Service 是否在 main thread 中执行, service 里面是否能执行耗时的操作?</p></blockquote><p>默认情况,如果没有显示的指 service 所运行的进程, Service 和 activity 是<br>运行在当前 app 所在进程的 mainthread(UI 主线程)里面。<br>service 里面不能执行耗时的操作(网络请求,拷贝数据库,大文件 )<br>特殊情况 ,可以在清单文件配置 service 执行所在的进程 ,让 service 在另外的进程中执行。</p><blockquote><p>第二：请描述一下 Service 的生命周期</p></blockquote><p>Service 有绑定模式和非绑定模式，以及这两种模式的混合使用方式。不同的使用方法生命周期方法也不同。<br><code>非绑定模式</code>：当第一次调用 startService 的时候执行的方法依次为 onCreate()、onStartCommand()， （onStart()）<br>当 Service 关闭的时候调用 onDestory 方法。<br><code>绑定模式</code>：第一次 bindService（）的时候，执行的方法为 onCreate()、onBind(）解除绑定的时候会执行<br>onUnbind()、onDestory()。</p><p>上面的两种生命周期是在相对单纯的模式下的情形。我们在开发的过程中还必须注意 Service 实例只会有一个，<br>也就是说如果当前要启动的 Service 已经存在了那么就不会再次创建该 Service 当然也不会调用 onCreate（）方法。</p><p>一个 Service 可以被多个客户进行绑定，只有所有的绑定对象都执行了 onBind（）方法后该 Service 才会销毁，<br>不过如果有一个客户执行了 onStart()方法，那么这个时候如果所有的 bind 客户都执行了 unBind()该 Service 也不会销毁。</p><blockquote><p>第三：Service 的 onStartCommand 方法有几种返回值？各代表什么意思？</p></blockquote><p>有四种返回值，不同值代表的意思如下： </p><ul><li><p>（1）START_STICKY：如果 service 进程被 kill 掉，保留 service 的状态为开始状态，但不保留递送的 intent 对象。<br>随后 系 统 会 尝 试 重 新 创 建 service ， 由 于 服 务 状 态 为 开 始 状 态 ，<br>所以创建服务后一定会调用onStartCommand(Intent,int,int)方法。如果在此期间没有任何启动命令被传递到 service，<br>那么参数 Intent 将为 null。</p></li><li><p>（2）START_NOT_STICKY：“非粘性的”。使用这个返回值时，如果在执行完 onStartCommand 后，服务被异常 kill<br>掉，系统不会自动重启该服务。</p></li><li><p>（3）START_REDELIVER_INTENT：重传 Intent。使用这个返回值时，如果在执行完 onStartCommand 后，服务被异<br>常 kill 掉，系统会自动重启该服务，并将 Intent 的值传入。</p></li><li><p>（4）START_STICKY_COMPATIBILITY：START_STICKY 的兼容版本，但不保证服务被 kill 后一定能重启</p></li></ul><blockquote><p>第四：Service 的 onRebind（Intent）方法在什么情况下会执行？</p></blockquote><p>如果在 onUnbind（）方法返回 true 的情况下会执行，否则不执行。</p><p>####BroadCastReceiver<br><code>BroadCastReceiver</code> 是 Android <code>四大组件之一</code>，主要用于接收系统或者 app 发送的广播事件。</p><p>广播分两种：<code>有序广播</code>和<code>无序广播</code>。<br>内部通信实现机制：通过 Android 系统的 Binder 机制实现通信。</p><p><code>无序广播</code>：完全异步，逻辑上可以被任何广播接收者接收到。优点是效率较高。缺点是一个接收者不能将处理结果传递给下一个接收者，并无法终止广播 intent 的传播。</p><p><code>有序广播</code>：按照被接收者的优先级顺序，在被接收者中依次传播。比如有三个广播接收者 A，B，C，优先级是 A &gt; B &gt; C。那这个消息先传给 A，再传给 B，最后传给 C。每个接收者有权终止广播，比如 B 终止广播，C 就无法接收到。<br>此外 A 接收到广播后可以对结果对象进行操作，当广播传给 B 时，B 可以从结果对象中取得 A 存入的数据。<br>在通过 Context.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode,<br>initialData, initialExtras)时我们可以指定 resultReceiver 广播接收者，这个接收者我们可以认为是最终接收者，<br>通常情况下如果比他优先级更高的接收者如果没有终止广播，那么他的 onReceive 会被执行两次，<br>第一次是正常的按照优先级顺序执行，第二次是作为最终接收者接收。如果比他优先级高的接收者终止了广播，<br>那么他依然能接收到广播。<br>在我们的项目中经常使用广播接收者接收系统通知，比如开机启动、sd 挂载、低电量、外拨电话、锁屏等。<br>如果我们做的是播放器，那么监听到用户锁屏后我们应该将我们的播放之暂停等。</p><h4 id="BroadCastReceiver-的生命周期："><a href="#BroadCastReceiver-的生命周期：" class="headerlink" title="BroadCastReceiver 的生命周期："></a>BroadCastReceiver 的生命周期：</h4><p>a. 广播接收者的生命周期非常短暂的，在接收到广播的时候创建，onReceive()方法结束之后销毁；<br>b. 广播接收者中不要做一些耗时的工作，否则会弹出 Application No Response 错误对话框；<br>c. 最好也不要在广播接收者中创建子线程做耗时的工作，因为广播接收者被销毁后进程就成为了空进程，很容易<br>被系统杀掉；<br>d. 耗时的较长的工作最好放在服务中完成；</p><ul><li>第三：什么是最终广播接收者？</li></ul><p>最终广播是我们自己应用发送有序广播时通过 ContextWrapper.sendOrderedBroadcast()方法指定的当前应用下的广播，该广播可能会被执行两次，第一次是作为普通广播按照优先级接收广播，<br>第二次是作为 final receiver 必须接收一次。</p><ul><li><p>第四：广播的优先级对无序广播生效吗？—- 生效！！！！</p></li><li><p>第五：动态注册的广播谁的优先级高？—– 谁先注册谁的优先级高！！</p></li><li><p>第六：如何判断当前 BroadcastReceiver 接收到的是有序广播还是无序广播 ？</p></li></ul><p>在 BroadcastReceiver 类中 onReceive（）方法中，可以调用 boolean b = isOrderedBroadcast（）;<br>该方法是BroadcastReceiver 类中提供的方法，用于告诉我们当前的接收到的广播是否为有序广播</p><h4 id="ContentProvider-amp-数据库"><a href="#ContentProvider-amp-数据库" class="headerlink" title="ContentProvider&amp; 数据库"></a>ContentProvider&amp; 数据库</h4><blockquote><p>ContentProvider 是如何实现数据共享的？</p></blockquote><p>在 Android 中如果想将自己应用的数据（一般多为数据库中的数据）提供给第三发应用，那么我们只能通过<br>ContentProvider 来实现了。<br>ContentProvider 是应用程序之间共享数据的接口。使用的时候首先自定义一个类继承 ContentProvider，然后<br>覆写 query、insert、update、delete 等方法。因为其是四大组件之一因此必须在 AndroidManifest 文件中进行注册。</p><blockquote><p>为什么要用 ContentProvider？它和 sql 的实现上有什么差别？</p></blockquote><p>ContentProvider 屏蔽了数据存储的细节,内部实现对用户完全透明,用户只需要关心操作数据的 uri 就可以了，<br>ContentProvider 可以实现不同 app 之间共享。<br>Sql 也有增删改查的方法，但是 sql 只能查询本应用下的数据库。而 ContentProvider 还可以去增删改查本<br>地文件. xml 文件的读取等。</p><blockquote><p>ContentProvider、ContentResolver、ContentObserver 之间的关系</p></blockquote><p>ContentProvider 内容提供者，用于对外提供数据<br>ContentResolver.notifyChange(uri)发出消息<br>ContentResolver 内容解析者，用于获取内容提供者提供的数据<br>ContentObserver 内容监听器，可以监听数据的改变状态<br>ContentResolver.registerContentObserver()监听消息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Android四大组件知识点&quot;&gt;&lt;a href=&quot;#Android四大组件知识点&quot; class=&quot;headerlink&quot; title=&quot;Android四大组件知识点&quot;&gt;&lt;/a&gt;&lt;strong&gt;Android四大组件知识点&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;分别为activity、service、content provider、broadcast receiver。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://lingkeyu.com/categories/android/"/>
    
    
      <category term="知识管理" scheme="http://lingkeyu.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
      <category term="Android" scheme="http://lingkeyu.com/tags/Android/"/>
    
  </entry>
  
</feed>
