{"meta":{"title":"凌可语-lingkeyu","subtitle":"如梦初醒 始料未及 别来无恙~","description":null,"author":"凌可语","url":"http://lingkeyu.com"},"pages":[{"title":"分类","date":"2018-08-09T16:33:27.000Z","updated":"2018-09-01T13:11:58.738Z","comments":false,"path":"categories/index.html","permalink":"http://lingkeyu.com/categories/index.html","excerpt":"","text":""},{"title":"标签云","date":"2018-08-09T16:33:58.000Z","updated":"2018-08-16T12:35:58.000Z","comments":false,"path":"tags/index.html","permalink":"http://lingkeyu.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"如何防止XSS攻击","slug":"如何防止XSS攻击","date":"2018-09-26T11:25:12.000Z","updated":"2018-09-28T08:11:17.459Z","comments":true,"path":"2018/09/26/如何防止XSS攻击/","link":"","permalink":"http://lingkeyu.com/2018/09/26/如何防止XSS攻击/","excerpt":"如何防止XSS攻击？ 主要包括: XSS 攻击的介绍 XSS 攻击的分类 XSS 攻击的预防和检测 XSS 攻击的总结 XSS 攻击案例","text":"如何防止XSS攻击？ 主要包括: XSS 攻击的介绍 XSS 攻击的分类 XSS 攻击的预防和检测 XSS 攻击的总结 XSS 攻击案例 随着互联网的高速发展，信息安全问题已经成为企业最为关注的焦点之一，而前端又是引发企业安全问题的高危据点。在移动互联网时代，前端人员除了传统的 XSS、CSRF 等安全问题之外，又时常遭遇网络劫持、非法调用 Hybrid API 等新型安全问题。当然，浏览器自身也在不断在进化和发展，不断引入 CSP、Same-Site Cookies 等新技术来增强安全性，但是仍存在很多潜在的威胁，这需要前端技术人员不断进行“查漏补缺” XSS 攻击的介绍在开始本文之前，我们先提出一个问题，请判断以下两个说法是否正确： XSS 防范是后端 RD（研发人员）的责任，后端 RD 应该在所有用户提交数据的接口，对敏感字符进行转义，才能进行下一步操作。 所有要插入到页面上的数据，都要通过一个敏感字符过滤函数的转义，过滤掉通用的敏感字符后，就可以插入到页面中。 如果你还不能确定答案，那么可以带着这些问题向下看，我们将逐步拆解问题。 XSS 漏洞的发生和修复XSS 攻击是页面被注入了恶意的代码，为了更形象的介绍，我们用发生在小明同学身边的事例来进行说明。 一个案例某天，公司需要一个搜索页面，根据 URL 参数决定关键词的内容。小明很快把页面写好并且上线。代码如下： 12345&lt;input type=\"text\" value=\"&lt;%= getParameter(\"keyword\") %&gt;\"&gt;&lt;button&gt;搜索&lt;/button&gt;&lt;div&gt; 您搜索的关键词是：&lt;%= getParameter(\"keyword\") %&gt;&lt;/div&gt; 然而，在上线后不久，小明就接到了安全组发来的一个神秘链接： 1http://xxx/search?keyword=\"&gt;&lt;script&gt;alert('XSS');&lt;/script&gt; 小明带着一种不祥的预感点开了这个链接[请勿模仿，确认安全的链接才能点开]。果然，页面中弹出了写着”XSS”的对话框。当浏览器请求http://xxx/search?keyword=&quot;&gt;&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt; 时，服务端会解析出请求参数 keyword，得到 &lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;，拼接到 HTML 中返回给浏览器。形成了如下的 HTML： 12345&lt;input type=\"text\" value=\"\"&gt;&lt;script&gt;alert('XSS');&lt;/script&gt;\"&gt;&lt;button&gt;搜索&lt;/button&gt;&lt;div&gt; 您搜索的关键词是：\"&gt;&lt;script&gt;alert('XSS');&lt;/script&gt;&lt;/div&gt; 浏览器无法分辨出 alert(‘XSS’); 是恶意代码，因而将其执行。这里不仅仅 div 的内容被注入了，而且 input 的 value 属性也被注入， alert 会弹出两次。面对这种情况，我们应该如何进行防范呢？其实，这只是浏览器把用户的输入当成了脚本进行了执行。那么只要告诉浏览器这段内容是文本就可以了。聪明的小明很快找到解决方法，把这个漏洞修复： 12345&lt;input type=\"text\" value=\"&lt;%= escapeHTML(getParameter(\"keyword\")) %&gt;\"&gt;&lt;button&gt;搜索&lt;/button&gt;&lt;div&gt; 您搜索的关键词是：&lt;%= escapeHTML(getParameter(\"keyword\")) %&gt;&lt;/div&gt; escapeHTML()按照如下规则进行转义： 经过了转义函数的处理后，最终浏览器接收到的响应为： 12345&lt;input type=\"text\" value=\"&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(&amp;#x27;XSS&amp;#x27;);&amp;lt;&amp;#x2F;script&amp;gt;\"&gt;&lt;button&gt;搜索&lt;/button&gt;&lt;div&gt; 您搜索的关键词是：&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert(&amp;#x27;XSS&amp;#x27;);&amp;lt;&amp;#x2F;script&amp;gt;&lt;/div&gt; 恶意代码都被转义，不再被浏览器执行，而且搜索词能够完美的在页面显示出来。 通过这个事件，小明学习到了如下知识： 通常页面中包含的用户输入内容都在固定的容器或者属性内，以文本的形式展示。 攻击者利用这些页面的用户输入片段，拼接特殊格式的字符串，突破原有位置的限制，形成了代码片段。 攻击者通过在目标网站上注入脚本，使之在用户的浏览器上运行，从而引发潜在风险。 通过 HTML 转义，可以防止 XSS 攻击。 #####注意特殊的 HTML 属性、JavaScript API自从上次事件之后，小明会小心的把插入到页面中的数据进行转义。而且他还发现了大部分模板都带有的转义配置，让所有插入到页面中的数据都默认进行转义。这样就不怕不小心漏掉未转义的变量啦，于是小明的工作又渐渐变得轻松起来。 但是，作为导演的我，不可能让小明这么简单、开心地改 Bug 。 不久，小明又收到安全组的神秘链接：http://xxx/?redirect_to=javascript:alert(&#39;XSS&#39;)。小明不敢大意，赶忙点开页面。然而，页面并没有自动弹出万恶的“XSS”。 小明打开对应页面的源码，发现有以下内容： 1&lt;a href=\"&lt;%= escapeHTML(getParameter(\"redirect_to\")) %&gt;\"&gt;跳转...&lt;/a&gt; 这段代码，当攻击 URL 为 http://xxx/?redirect_to=javascript:alert(&#39;XSS&#39;)，服务端响应就成了： 1&lt;a href=\"javascript:alert(&amp;#x27;XSS&amp;#x27;)\"&gt;跳转...&lt;/a&gt; 虽然代码不会立即执行，但一旦用户点击 a 标签时，浏览器会就会弹出“XSS”。 在这里，用户的数据并没有在位置上突破我们的限制，仍然是正确的 href 属性。但其内容并不是我们所预期的类型。 原来不仅仅是特殊字符，连 javascript: 这样的字符串如果出现在特定的位置也会引发 XSS 攻击。 小明眉头一皱，想到了解决办法： 1234567891011// 禁止 URL 以 \"javascript:\" 开头xss = getParameter(\"redirect_to\").startsWith('javascript:');if (!xss) &#123; &lt;a href=\"&lt;%= escapeHTML(getParameter(\"redirect_to\"))%&gt;\"&gt; 跳转... &lt;/a&gt;&#125; else &#123; &lt;a href=\"/404\"&gt; 跳转... &lt;/a&gt;&#125; 只要 URL 的开头不是 javascript:，就安全了吧？ 安全组随手又扔了一个连接：http://xxx/?redirect_to=jAvascRipt:alert(&#39;XSS&#39;) 小明欲哭无泪，在判断 URL 开头是否为 javascript: 时，先把用户输入转成了小写，然后再进行比对。 不过，所谓“道高一尺，魔高一丈”。面对小明的防护策略，安全组就构造了这样一个连接： http://xxx/?redirect_to=%20javascript:alert(&#39;XSS&#39;) %20javascript:alert(&#39;XSS&#39;) 经过 URL 解析后变成 javascript:alert(&#39;XSS&#39;)，这个字符串以空格开头。这样攻击者可以绕过后端的关键词规则，又成功的完成了注入。 最终，小明选择了白名单的方法，彻底解决了这个漏洞： 1234567891011121314// 根据项目情况进行过滤，禁止掉 \"javascript:\" 链接、非法 scheme 等allowSchemes = [\"http\", \"https\"];valid = isValid(getParameter(\"redirect_to\"), allowSchemes);if (valid) &#123; &lt;a href=\"&lt;%= escapeHTML(getParameter(\"redirect_to\"))%&gt;\"&gt; 跳转... &lt;/a&gt;&#125; else &#123; &lt;a href=\"/404\"&gt; 跳转... &lt;/a&gt;&#125; 通过这个事件，小明学习到了如下知识： 做了 HTML 转义，并不等于高枕无忧。 对于链接跳转，如&lt;a href=&quot;xxx&quot; 或 location.href=&quot;xxx&quot;，要检验其内容，禁止以javascript: 开头的链接，和其他非法的 scheme。 #####根据上下文采用不同的转义规则某天，小明为了加快网页的加载速度，把一个数据通过 JSON 的方式内联到 HTML 中 123&lt;script&gt;var initData = &lt;%= data.toJSON() %&gt;&lt;/script&gt; 插入 JSON 的地方不能使用 escapeHTML()，因为转义&quot;后，JSON 格式会被破坏。但安全组又发现有漏洞，原来这样内联 JSON 也是不安全的： 当 JSON 中包含U+2028或 U+2029这两个字符时，不能作为 JavaScript 的字面量使用，否则会抛出语法错误。当 JSON 中包含字符串 &lt;/script&gt; 时，当前的 script 标签将会被闭合，后面的字符串内容浏览器会按照 HTML 进行解析；通过增加下一个 &lt;script&gt; 标签等方法就可以完成注入。 于是我们又要实现一个 escapeEmbedJSON() 函数，对内联 JSON 进行转义。转义规则如下： 修复后的代码如下： 12&lt;script&gt;var initData = &lt;%= escapeEmbedJSON(data.toJSON()) %&gt; 漏洞总结 在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。 在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。 在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。 在标签的 href、src 等属性中，包含 javascript: 等可执行代码。 在 onload、onerror、onclick 等事件中，注入不受控制代码。 在 style 属性和标签中，包含类似 background-image:url(“javascript:…”); 的代码（新版本浏览器已经可以防范）。 在 style 属性和标签中，包含类似 expression(…) 的 CSS 表达式代码（新版本浏览器已经可以防范）。 总之，如果开发者没有将用户输入的文本进行合适的过滤，就贸然插入到 HTML 中，这很容易造成注入漏洞。攻击者可以利用漏洞，构造出恶意的代码指令，进而利用恶意代码危害数据安全。 XSS 攻击的分类#####什么是 XSS Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。 为了和 CSS 区分，这里把攻击的第一个字母改成了 X，于是叫做 XSS。 XSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。 而由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，或者利用这些信息冒充用户向网站发起攻击者定义的请求。 在部分情况下，由于输入的限制，注入的恶意脚本比较短。但可以通过引入外部的脚本，并由浏览器执行，来完成比较复杂的攻击策略。这里有一个问题：用户是通过哪种方法“注入”恶意脚本的呢？ 不仅仅是业务上的“用户的 UGC 内容”可以进行注入，包括 URL 上的参数等都可以是攻击的来源。在处理输入时，以下内容都不可信： 来自用户的 UGC 信息 来自第三方的链接 URL 参数 POST 参数 Referer （可能来自不可信的来源） Cookie （可能来自其他子域注入） XSS 分类 存储区：恶意代码存放的位置。 插入点：由谁取得恶意代码，并插入到网页上。 存储型 XSS 攻击者将恶意代码提交到目标网站的数据库中。 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。 这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。 反射型 XSS反射型 XSS 的攻击步骤： 攻击者构造出特殊的 URL，其中包含恶意代码。 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。 反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。 反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。 由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。 POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见。 DOM 型 XSSDOM 型 XSS 的攻击步骤： 攻击者构造出特殊的 URL，其中包含恶意代码。 用户打开带有恶意代码的 URL。 用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。 DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。 XSS 攻击的预防通过前面的介绍可以得知，XSS 攻击有两大要素： 攻击者提交恶意代码。 浏览器执行恶意代码。 针对第一个要素：我们是否能够在用户输入的过程，过滤掉用户输入的恶意代码呢？ 输入过滤在用户提交时，由前端过滤输入，然后提交到后端。这样做是否可行呢？ 答案是不可行。一旦攻击者绕过前端过滤，直接构造请求，就可以提交恶意代码了。 那么，换一个过滤时机：后端在写入数据库前，对输入进行过滤，然后把“安全的”内容，返回给前端。这样是否可行呢？ 我们举一个例子，一个正常的用户输入了5 &lt; 7这个内容，在写入数据库前，被转义，变成了5 &amp;lt; 7。 问题是：在提交阶段，我们并不确定内容要输出到哪里。 这里的“并不确定内容要输出到哪里”有两层含义：用户的输入内容可能同时提供给前端和客户端，而一旦经过了 escapeHTML()，客户端显示的内容就变成了乱码( 5 &lt; 7 )。 在前端中，不同的位置所需的编码也不同。 当5 &amp;lt; 7作为 HTML 拼接页面时，可以正常显示： 1&lt;div title=\"comment\"&gt;5 &amp;lt; 7&lt;/div&gt; 当 5 &amp;lt; 7通过 Ajax 返回，然后赋值给 JavaScript 的变量时，前端得到的字符串就是转义后的字符。这个内容不能直接用于 Vue 等模板的展示，也不能直接用于内容长度计算。不能用于标题、alert 等。 所以，输入侧过滤能够在某些情况下解决特定的 XSS 问题，但会引入很大的不确定性和乱码问题。在防范 XSS 攻击时应避免此类方法。 当然，对于明确的输入类型，例如数字、URL、电话号码、邮件地址等等内容，进行输入过滤还是必要的。 既然输入过滤并非完全可靠，我们就要通过“防止浏览器执行恶意代码”来防范 XSS。这部分分为两类： 防止 HTML 中出现注入。 防止 JavaScript 执行时，执行恶意代码。 预防存储型和反射型 XSS 攻击存储型和反射型 XSS 都是在服务端取出恶意代码后，插入到响应 HTML 里的，攻击者刻意编写的“数据”被内嵌到“代码”中，被浏览器所执行。 预防这两种漏洞，有两种常见做法： 改成纯前端渲染，把代码和数据分隔开。 对 HTML 做充分转义。 纯前端渲染 浏览器先加载一个静态 HTML，此 HTML 中不包含任何跟业务相关的数据。 然后浏览器执行 HTML 中的 JavaScript。 JavaScript 通过 Ajax 加载业务数据，调用 DOM API 更新到页面上。 在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了。 但纯前端渲染还需注意避免 DOM 型 XSS 漏洞（例如onload事件和 href 中的 javascript:xxx等，请参考下文”预防 DOM 型 XSS 攻击“部分）。 在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，我们仍然要面对拼接 HTML 的问题。 转义 HTML如果拼接 HTML 是必要的，就需要采用合适的转义库，对 HTML 模板各处插入点进行充分的转义。 常用的模板引擎，如 doT.js、ejs、FreeMarker 等，对于 HTML 转义通常只有一个规则，就是把&amp; &lt; &gt; &quot; &#39; /这几个字符转义掉，确实能起到一定的 XSS 防护作用，但并不完善： 所以要完善 XSS 防护措施，我们要使用更完善更细致的转义策略。 预防 DOM 型 XSS 攻击DOM 型 XSS 攻击，实际上就是网站前端 JavaScript 代码本身不够严谨，把不可信的数据当作代码执行了。在使用.innerHTML、.outerHTML、document.write()时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等。如果用Vue/React技术栈，并且不使用v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。DOM 中的内联事件监听器，如location、onclick、onerror、onload、onmouseover等，&lt;a&gt; 标签的href 属性，JavaScript 的 eval()、setTimeout()、setInterval()等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。 1234567891011121314151617&lt;!-- 内联事件监听器中包含恶意代码 --&gt;&lt;img onclick=\"UNTRUSTED\" onerror=\"UNTRUSTED\" src=\"data:image/png,\"&gt;&lt;!-- 链接内包含恶意代码 --&gt;&lt;a href=\"UNTRUSTED\"&gt;1&lt;/a&gt;&lt;script&gt;// setTimeout()/setInterval() 中调用恶意代码setTimeout(\"UNTRUSTED\")setInterval(\"UNTRUSTED\")// location 调用恶意代码location.href = 'UNTRUSTED'// eval() 中调用恶意代码eval(\"UNTRUSTED\")&lt;/script&gt; 如果项目中有用到这些的话，一定要避免在字符串中拼接不可信数据 其他 XSS 防范措施虽然在渲染页面和执行 JavaScript 时，通过谨慎的转义可以防止 XSS 的发生，但完全依靠开发的谨慎仍然是不够的。以下介绍一些通用的方案，可以降低 XSS 带来的风险和后果。 Content Security Policy 严格的 CSP 在 XSS 的防范中可以起到以下的作用： 禁止加载外域代码，防止复杂的攻击逻辑。 禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。 禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。 禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。 合理使用上报可以及时发现 XSS，利于尽快修复问题。 输入内容长度控制对于不受信任的输入，都应该限定一个合理的长度。虽然无法完全防止 XSS 发生，但可以增加 XSS 攻击的难度 其他安全措施 HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。 验证码：防止脚本冒充用户提交危险操作。 XSS 的检测学会了如何去预防和修复 XSS 漏洞，在日常开发中也具备了相关的安全意识。但对于已经上线的代码，如何去检测其中有没有 XSS 漏洞呢？ 两个方法：使用通用 XSS 攻击字符串手动检测 XSS 漏洞使用扫描工具自动检测 XSS 漏洞。 1jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\\x3csVg/&lt;sVg/oNloAd=alert()//&gt;\\x3e 它能够检测到存在于 HTML 属性、HTML 文字内容、HTML 注释、跳转链接、内联 JavaScript 字符串、内联 CSS 样式表等多种上下文中的 XSS 漏洞，也能检测eval()、setTimeout()、setInterval()、Function()、innerHTML、document.write()等 DOM 型 XSS 漏洞，并且能绕过一些 XSS 过滤器。 只要在网站的各输入框中提交这个字符串，或者把它拼接到 URL 参数上，就可以进行检测了。 1http://xxx/search?keyword=jaVasCript%3A%2F*-%2F*%60%2F*%60%2F*%27%2F*%22%2F**%2F(%2F*%20*%2FoNcliCk%3Dalert()%20)%2F%2F%250D%250A%250d%250a%2F%2F%3C%2FstYle%2F%3C%2FtitLe%2F%3C%2FteXtarEa%2F%3C%2FscRipt%2F--!%3E%3CsVg%2F%3CsVg%2FoNloAd%3Dalert()%2F%2F%3E%3E 除了手动检测之外，还可以使用自动扫描工具寻找 XSS 漏洞，例如 Arachni、Mozilla HTTP Observatory、w3af等。 XSS 攻击的总结 XSS 防范是后端 RD 的责任，后端 RD 应该在所有用户提交数据的接口，对敏感字符进行转义，才能进行下一步操作。不正确。因为： 防范存储型和反射型 XSS 是后端 RD 的责任。而 DOM 型 XSS 攻击不发生在后端，是前端 RD 的责任。防范 XSS 是需要后端 RD 和前端 RD 共同参与的系统工程。 转义应该在输出 HTML 时进行，而不是在提交用户输入时。 所有要插入到页面上的数据，都要通过一个敏感字符过滤函数的转义，过滤掉通用的敏感字符后，就可以插入到页面中。不正确。 不同的上下文，如 HTML 属性、HTML 文字内容、HTML 注释、跳转链接、内联 JavaScript 字符串、内联 CSS 样式表等，所需要的转义规则不一致。 业务 RD 需要选取合适的转义库，并针对不同的上下文调用不同的转义规则。 整体的 XSS 防范是非常复杂和繁琐的，我们不仅需要在全部需要转义的位置，对数据进行对应的转义。而且要防止多余和错误的转义，避免正常的用户输入出现乱码 虽然很难通过技术手段完全避免 XSS，但我们可以总结以下原则减少漏洞的产生： 利用模板引擎开启模板引擎自带的 HTML 转义功能例如：在 ejs 中，尽量使用&lt;%= data %&gt;而不是&lt;%- data %&gt;； 在 FreeMarker 中，确保引擎版本高于 2.3.24，并且选择正确的 freemarker.core.OutputFormat。 避免内联事件尽量不要使用 onLoad=”onload(‘‘)”、onClick=”go(‘‘)” 这种拼接内联事件的写法。在 JavaScript 中通过 .addEventlistener() 事件绑定会更安全。 避免拼接 HTML前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 createElement、setAttribute 之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。 时刻保持警惕在插入位置为 DOM 属性、链接等位置时，要打起精神，严加防范。 增加攻击难度，降低攻击后果通过 CSP、输入长度配置、接口安全措施等方法，增加攻击的难度，降低攻击的后果。 主动检测和发现可使用 XSS 攻击字符串和自动扫描工具寻找潜在的 XSS 漏洞。 XSS 攻击案例QQ 邮箱 m.exmail.qq.com 域名反射型 XSS 漏洞 攻击者发现http://m.exmail.qq.com/cgi-bin/login?uin=aaaa&amp;domain=bbbb这个 URL 的参数uin、domain未经转义直接输出到 HTML 中。于是攻击者构建出一个 URL，并引导用户去点击：http://m.exmail.qq.com/cgi-bin/login?uin=aaaa&amp;domain=bbbb%26quot%3B%3Breturn+false%3B%26quot%3B%26lt%3B%2Fscript%26gt%3B%26lt%3Bscript%26gt%3Balert(document.cookie)%26lt%3B%2Fscript%26gt%3B用户点击这个 URL 时，服务端取出 URL 参数，拼接到 HTML 响应中： 12&lt;script&gt;getTop().location.href=\"/cgi-bin/loginpage?autologin=n&amp;errtype=1&amp;verify=&amp;clientuin=aaa\"+\"&amp;t=\"+\"&amp;d=bbbb\";return false;&lt;/script&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;\"+\"... 浏览器接收到响应后就会执行alert(document.cookie)，攻击者通过 JavaScript 即可窃取当前用户在 QQ 邮箱域名下的 Cookie ，进而危害数据安全。 浏览器接收到响应后就会加载执行恶意脚本 //xxxx.cn/image/t.js，在恶意脚本中利用用户的登录状态进行关注、发微博、发私信等操作，发出的微博和私信可再带上攻击 URL，诱导更多人点击，不断放大攻击范围。这种窃用受害者身份发布恶意内容，层层放大攻击范围的方式，被称为“XSS 蠕虫”。 本文来源：掘金链接：https://juejin.im/post/5bad9140e51d450e935c6d64","categories":[{"name":"XSS攻击","slug":"XSS攻击","permalink":"http://lingkeyu.com/categories/XSS攻击/"}],"tags":[{"name":"XSS防范","slug":"XSS防范","permalink":"http://lingkeyu.com/tags/XSS防范/"},{"name":"XSS攻击","slug":"XSS攻击","permalink":"http://lingkeyu.com/tags/XSS攻击/"},{"name":"安全","slug":"安全","permalink":"http://lingkeyu.com/tags/安全/"}]},{"title":"Vue2.0搭建Vue脚手架（vue-cli）","slug":"Vue2.0搭建Vue脚手架（vue-cli）","date":"2018-09-10T03:34:12.000Z","updated":"2018-09-28T09:05:49.633Z","comments":true,"path":"2018/09/10/Vue2.0搭建Vue脚手架（vue-cli）/","link":"","permalink":"http://lingkeyu.com/2018/09/10/Vue2.0搭建Vue脚手架（vue-cli）/","excerpt":"Vue2.0搭建Vue脚手架（vue-cli） 随着vue.js越来越火爆，更多的项目都用到vue进行开发，在实际的开发项目中如何搭建开发脚手架呢，今天跟大家分享一下，首先需要了解的知识：","text":"Vue2.0搭建Vue脚手架（vue-cli） 随着vue.js越来越火爆，更多的项目都用到vue进行开发，在实际的开发项目中如何搭建开发脚手架呢，今天跟大家分享一下，首先需要了解的知识： Html Css Javascript Node.js 环境（npm包管理工具） Webpack 自动化构建工具 一、安装node.js 进入官网下载node.js 二、安装 cnpm 1、说明：npm（node package manager）是nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）； 2、使用npm安装插件：命令提示符执行npm install 3、选装 cnpm 因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事！来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”; 安装：npm install -g cnpm –registry=https://registry.npm.taobao.org 输入cnpm -v，可以查看当前cnpm版本 三、安装vue-cli脚手架构建工具 vue-cli 提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目： 安装：$ cnpm install vue-cli –g //g表示全局安装 安装完成之后输入vue -V（注意这里是大写的“V”），如下图，如果出现相应的版本号，则说明安装成功。 四、创建一个基于webpack模板的新项目 要创建项目，首先我们要选定目录，然后再命令行中把目录转到选定的目录。可以使用： $ vue init webpack my-app // my-app为自定义项目名 运行初始化命令的时候回让用户输入几个基本的选项，如项目名称，描述，作者等信息，如果不想填直接回车默认就好 Project name (my-app) # 项目名称（我的项目） Project description (A Vue.js project) # 项目描述一个Vue.js 项目 Author 作者（你的名字） Install vue-router? (Y/n) # 是否安装Vue路由，也就是以后是spa（但页面应用需要的模块） Use ESLint to lint your code? (Y/n) # 使用 ESLint 到你的代码？ （Y [ yes ] / N [ no ]） Pick an ESLint preset (Use arrow keys) # 选择一个预置ESLint（使用箭头键） Setup unit tests with Karma + Mocha? (Y/n) # 设置单元测Karma + Mocha？ （Y/ N） Setup e2e tests with Nightwatch? (Y/n) # 设置端到端测试，Nightwatch？ （Y/ N） 注：当然这些都看你自己个人的情况 五、运行项目 $ cnpm run dev 运行成功后，浏览器直接显示的是页面如下：六、安装项目所需要的依赖 刚初始化的项目是没有依赖的，如果运行会报类似这样的错误，输入命令 $ cnpm install","categories":[{"name":"Vue2.0搭建Vue脚手架","slug":"Vue2-0搭建Vue脚手架","permalink":"http://lingkeyu.com/categories/Vue2-0搭建Vue脚手架/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://lingkeyu.com/tags/vue/"},{"name":"vue-cli","slug":"vue-cli","permalink":"http://lingkeyu.com/tags/vue-cli/"}]},{"title":"JavaScript之原型与原型链","slug":"JavaScript之原型与原型链","date":"2018-07-20T01:55:52.000Z","updated":"2018-09-05T13:06:20.562Z","comments":true,"path":"2018/07/20/JavaScript之原型与原型链/","link":"","permalink":"http://lingkeyu.com/2018/07/20/JavaScript之原型与原型链/","excerpt":"JavaScript之原型与原型链 首先万物皆对象 在JavaScript中除值类型之外，其他的都是对象，为了说明这点，我们举几个例子我们可以使用typeof来做类型判断","text":"JavaScript之原型与原型链 首先万物皆对象 在JavaScript中除值类型之外，其他的都是对象，为了说明这点，我们举几个例子我们可以使用typeof来做类型判断123456789typeof a; // undefinedtypeof 1; // numbertypeof 'xiaoming'; // stringtypeof true; // boolean typeof function()&#123;&#125;; // functiontypeof []; // objecttypeof null; // objecttypeof &#123;&#125;; // object 除了undefined、number、string、boolean属于值类型之外，其他都是对象。你可能要问了，不是还有一个是function吗？要校验他是不是应该对象可以这样做: 12var fn = function()&#123;&#125;fn instanceof Object // true 由上面的例子所示，函数确实是对象，为什么呢？我们看一下下面的例子 12345function Person(name)&#123; this.name = name; &#125;var person = new Person('xiaoming');console.log(person) // Person &#123;name: \"xiaoming\"&#125; 由此我们可以得知，对象都是通过函数创建的，你看下面的就不是函数创建的 1var person = &#123;name:'xiaoming'&#125; 归根结底他还是通过函数创建的 12var person = new Object()person.name = 'xiaoming' 所以对象是通过函数创建的 构造函数(constructor)12345function Person(name)&#123; this.name = name&#125;var person1 = new Person('xiaoming 1')var person2 = new Person('xiaoming 2') 上面Person就是一个构造函数，我们通过new的方式创建了一个实例对象person我们来看看person1和person2的constructor(构造函数)是不是指向Person的 12person1.constructor === Person // trueperson2.constructor === Person // true 原型(prototype) 在JavaScript中，每定义一个函数都会产生一个prototype(原型)属性，这个属性指向函数的原型对象 12345678function Person()&#123;&#125;Person.prototype.name = 'xiaoming'Person.prototype.age = '10'Person.prototype.sayAge = function()&#123; console.log(this.age)&#125;var person = new Person()person.sayAge(); // 10 那么这个prototype到底是什么呢？跟构造函数有关系？其实函数的prototype指向函数的原型对象，每个对象都会关联另外一个对象，也就是原型，上面的例子改成： 1234567Person.prototype = &#123; name: 'xiaoming', age: 10, satAge: function()&#123; console.log(this.age) &#125;&#125; 隐式原型(__proto__)上面我们说到每定义一个函数都会产生一个原型，每个函数它不止有原型，还有一个__proto__(隐式原型)每个对象都有一个__proto__属性，指向创建该对象函数的prototype，我们可以来试试，还是上面的例子： 123function Person()&#123;&#125;var person = new Person()person.__proto__ === Person.prototype // true 由上图我们可以知道： 123Person.prototype.constructor = Personperson.__proto__ = Person.prototypeperson.constructor = Person 我们可以看到person.__proto__指向构造函数的原型，那么构造函数的原型即Person的__proto__指向哪里呢？我们知道构造函数其实就是由Function来创建的，由此得出: 1Person.__proto__ === Function.prototype 那么构造函数的原型即Person.prototype的__proto__指向哪里呢？原型对象其实是通过Object生成的，自然而然的得出: 1Person.prototype.__proto__ === Object.prototype 那么Object.prototype的__proto__指向哪里呢？答案是null，最终得到下面的图来看看下面几道题 12345person.__proto__Person.__proto__Person.prototype.__proto__Object.__proto__Object.prototype.__proto__ 解： 每个对象都有一个__proto__属性，指向创建该对象函数的prototype，因为Person是person的构造函数Person === person.constructor为true,所以：person.__proto__ === Person.prototype Person构造函数是由Function创建的，所以可以得出Person.__proto__ === Fucntion.prototype我们上面说过Person.prototype其实是一个对象，而对象是由Object创建的，所以 Person.prototype.__proto__ === Object.prototypeObject对象都是函数创建的，所以Object.__proto__ === Function.prototype虽然Object.prototype是一个对象但是他的__proto__为null 实例和原型当我们要取一个值的时候，会先从实例中取，如果实例中存在，则取实例的值，如果实例不存在，则会顺着原型里找，直到找到 12345678function Person()&#123;&#125;Person.prototype.name = '我来自原型' var person = new Person()person.name = '我来自实例'console.log(person.name); // 我来自实例delete person.nameconsole.log(person.name)); // 我来自原型 首先person实例中有这个属性，返回我来自实例,然后将它删除之后，会从原型中招，也就是person.__proto__，因为Person.prototype === person.__proto__，所以得到我来自原型 原文地址：http://www.wclimb.site/2018/06/13/JavaScript","categories":[{"name":"原型与原型链","slug":"原型与原型链","permalink":"http://lingkeyu.com/categories/原型与原型链/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/tags/面试题/"},{"name":"原型与原型链","slug":"原型与原型链","permalink":"http://lingkeyu.com/tags/原型与原型链/"},{"name":"JavaScript专题","slug":"JavaScript专题","permalink":"http://lingkeyu.com/tags/JavaScript专题/"}]},{"title":"React进阶之路(一)","slug":"React进阶之路(一)","date":"2018-07-08T13:34:52.000Z","updated":"2018-09-10T05:39:47.744Z","comments":true,"path":"2018/07/08/React进阶之路(一)/","link":"","permalink":"http://lingkeyu.com/2018/07/08/React进阶之路(一)/","excerpt":"React是FaceBook（脸书）公司研发的一款JS框架（基于MVC）React是一款框架：具备自己开发的独立思想(MVC：Model View Controller)","text":"React是FaceBook（脸书）公司研发的一款JS框架（基于MVC）React是一款框架：具备自己开发的独立思想(MVC：Model View Controller) React的脚手架 划分组件开发 基于路由的SPA单页面开发 基于ES6来编写代码(最后部署上线的时候，我们需要把ES6编译成ES5 =&gt;基于Babel来完成编译) 可能用到Less/Sass等，我们也需要使用对应的插件把他们进行预编译 最后为了优化性能（减少HTTP请求次数），我们需要把JS或者CSS进行合并压缩 … webpack来完成以上页面组件合并、JS/CSS编译加合并等工作 前端工程化开发： - 基于框架的组件化/模块化开发 - 基于WEBPACK的自动部署 但是配置WEBPACK是一个相对复杂的工作，我们需要自己安装很多的包，还需要自己写相对复杂的配置文件…如果我们有一个插件，基于它可以快速构建一套完整的自动化工程项目结构，那么有助于提高开发的效率 =&gt;“脚手架” VUE：VUE-CLI REACT：CREATE-REACT-APP 【create-react-app 的使用】 &gt;$ npm install create-react-app -g 把模块安装在全局环境下（目的：可以使用命令），MAC电脑安装的时候，前面需要加SUDO，否则没有权限 &gt;$ create-react-app [项目名称] 基于脚手架命令，创建出一个基于React的自动化/工程化项目目录，和npm发包时候的命名规范一样，项目名称中不能出现：大写字母、中文汉字、特殊符号（-或者_是可以的）等 【脚手架生成目录中的一些内容】 node_modules 当前项目中依赖的包都安装在这里 .bin 本地项目中可执行命令，在package.json的scripts中配置对应的脚本即可（其中有一个就是：react-scripts命令） public 存放的是当前项目的HTML页面（单页面应用放一个index.html即可，多页面根据自己需求放置需要的页面） src项目结构中最主要的目录，因为后期所有的JS、路由、组件等都是放到这里面（包括需要编写的CSS或者图片等） index.js 是当前项目的入口文件 .gitignore Git提交时候的忽略提交文件配置项123456789101112131415161718192021222324package.json 当前项目的配置清单 \"dependencies\": &#123; \"react\": \"^16.4.1\", \"react-dom\": \"^16.4.1\", \"react-scripts\": \"1.1.4\" &#125; 基于脚手架生成工程目录，自动帮我们安装了三个模块：react/react-dom/react-scripts react-scripts集成了webpack需要的内容 -&gt;Babel一套 -&gt;CSS处理的一套 -&gt;eslint一套 -&gt;webpack一套 -&gt;其它的 没有less/sass的处理内容（项目中使用less，我们需要自己额外的安装） ---- \"scripts\": &#123; \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test --env=jsdom\", \"eject\": \"react-scripts eject\" &#125; 可执行的脚本“$ npm run start / $ yarn start” start：开发环境下，基于webpack编译处理，最后可以预览当前开发的项目成果（在webpack中安装了webpack-dev-server插件，基于这个插件会自动创建一个WEB服务[端口号默认是3000]，webpack会帮我们自动打开浏览器，并且展示我们的页面，并且能够监听我们代码的改变，如果代码改变了，webpack会自动重新编译，并且刷新浏览器来完成重新渲染） build：项目需要部署到服务器上，我们先执行yarn build，把项目整体编译打包（完成后会在项目中生成一个build文件夹，这个文件夹中包含了所有编译后的内容，我们把它上传到服务器即可）;而且在服务上进行部署的时候，不需要安装任何模块了（因为webpack已经把需要的内容都打包到一个JS中了） React脚手架的深入剖析create-react-app脚手架为了让结构目录清晰，把安装的webpack及配置文件都集成在了react-scripts模块中，放到了node_modules中 但是真实项目中，我们需要在脚手架默认安装的基础上，额外安装一些我们需要的模块，例如：react-router-dom/axios...再比如：less/less-loader... 情况一：如果我们安装其它的组件，但是安装成功后不需要修改webpack的配置项，此时我们直接的安装，并且调取使用即可 情况二：我们安装的插件是基于webpack处理的，也就是需要把安装的模块配置到webpack中（重新修改webpack配置项了） =&gt;首先需要把隐藏到node_modules中的配置项暴露到项目中 $ yarn eject 首先会提示确认是否执行eject操作，这个操作是不可逆转的，一但暴露出来配置项，就无法在隐藏回去了 如果当前的项目基于GIT管理，在执行eject的时候，如果还有没有提交到历史的区的内容，需要先提交到历史区，然后在eject才可以，否则报错：This git repository has untracked files or uncommitted changes... =&gt;再去修改对应的配置项即可 一但暴露后，项目目录中多了两个文件夹：config存放的是webpack的配置文件webpack.config.dev.js 开发环境下的配置项（yarn start）webpack.config.prod.js 生产环境下的配置项（yarn build） scripts 存放的是可执行脚本的JS文件 start.js yarn start执行的就是这个JS build.js yarn build执行的就是这个JS package.json中的内容也改了 【举个栗子：需要配置LESS】 $ yarn add less less-loader less是开发和成产环境下都需要配置的 12345678910&#123; test: /\\.(css|less)$/, use: [ require.resolve('style-loader'), ... &#123; loader: require.resolve('less-loader') &#125; ], &#125; 我们预览项目的时候，也是先基于webpack编译，把编译后的内容放到浏览器中运行，所以如果项目中使用了less，我们需要修改webpack配置项，在配置项中加入less的编译工作，这样后期预览项目，首先基于webpack把less编译为css，然后在呈现在页面中. \\$ set HTTPS=true&amp;&amp;npm start 开启HTTPS协议模式（设置环境变量HTTPS的值） \\$ set PORT=63341 修改端口号 二. react &amp; react-dom 【渐进式框架】 一种最流行的框架设计思想，一般框架中都包含很多内容，这样导致框架的体积过于臃肿，拖慢加载的速度。真实项目中，我们使用一个框架，不一定用到所有的功能，此时我们应该把框架的功能进行拆分，用户想用什么，让其自己自由组合即可。 全家桶：渐进式框架N多部分的组合 VUE全家桶：vue-cli/vue/vue-router/vuex/axios(fetch)/vue element(vant) REACT全家桶：create-react-app/react/react-dom/react-router/redux/react-redux/axios/ant/dva/saga/mobx… react：REACT框架的核心部分，提供了Component类可以供我们进行组件开发，提供了钩子函数（生命周期函数：所有的生命周期函数都是基于回调函数完成的） react-dom：把JSX语法（REACT独有的语法）渲染为真实DOM（能够放到页面中展示的结构都叫做真实的DOM）的组件 三、把JSX（虚拟DOM）变为真实的DOM - ReactDOM.render([JSX],[CONTAINER],[CALLBACK]) : 把JSX元素渲染到页面中 - JSX : REACT 虚拟元素 - CONTINER : 容器, 我们想把元素放到的容器中 - CALLBACK : 当把内容放到页面中呈现触发的回调函数 - JSX : REACT独有的语法 JAVASCRIPT+XML(HTML) 和我们之前自己拼接的HTML字符串类似,都是把HTML结构代码和JS代码或者数据混合在一起了,但是它不是字符串 (不建议把JSX直接渲染到body中,而是放在自己创建的一个容器中,一般我们都放在一个ID为ROOT的DIV中就行) - 在JSX中出现的{}是存放JS的,但是要求JS代码执行完有返回结果(JS表达式) - 不能直接放在一个对象数据类型的值(对象, 数组(但数组中如果没有对象都是基本值或者是JSX元素,这样是可以的), 函数都不行) - 可以是基本数据类型的值,(布尔类型什么都不显示, null, undefined也是JSX元素, 代表的是空) - 循环运算语句都不支持,但是支持三元运算符;","categories":[{"name":"React","slug":"React","permalink":"http://lingkeyu.com/categories/React/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"前端学习","slug":"前端学习","permalink":"http://lingkeyu.com/tags/前端学习/"},{"name":"基础知识","slug":"基础知识","permalink":"http://lingkeyu.com/tags/基础知识/"},{"name":"React专题","slug":"React专题","permalink":"http://lingkeyu.com/tags/React专题/"}]},{"title":"面试题-CSS专题","slug":"面试题-CSS专题","date":"2018-06-20T15:46:32.000Z","updated":"2018-09-04T01:11:02.915Z","comments":true,"path":"2018/06/20/面试题-CSS专题/","link":"","permalink":"http://lingkeyu.com/2018/06/20/面试题-CSS专题/","excerpt":"请解释一下为什么需要清除浮动?清除浮动有哪些方式？比较好的方式是哪一种？清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。 父级div定义height。 结尾处加空div标签clear:both。 父级div定义伪类:after和zoom。 父级div定义overflow:hidden。 父级div定义overflow:auto。 父级div也浮动，需要定义宽度。 父级div定义display:table。 结尾处加br标签clear:both。","text":"请解释一下为什么需要清除浮动?清除浮动有哪些方式？比较好的方式是哪一种？清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。 父级div定义height。 结尾处加空div标签clear:both。 父级div定义伪类:after和zoom。 父级div定义overflow:hidden。 父级div定义overflow:auto。 父级div也浮动，需要定义宽度。 父级div定义display:table。 结尾处加br标签clear:both。 比较好的是第3种方式，好多网站都这么用。 原理： 1) display:block 使生成的元素以块级元素显示,占满剩余空间; 2) height:0 避免生成内容破坏原有布局的高度。 3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互; 4）通过 content:”.”生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 content:”.”,有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0 content:”” 仍然会产生额外的空隙； 5）zoom：1 触发IE hasLayout。 通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0。 zoom:1的清除浮动原理? 清除浮动，触发hasLayout； Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。 譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。 来龙去脉大概如下： 当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。 Zoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标准化，出现在 CSS 3.0 规范草案中。 目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？ 可以通过css3里面的动画属性scale进行缩放。 box-sizing常用的属性有哪些？分别有什么作用？ box-sizing: content-box|border-box|inherit; content-box:宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框(元素默认效果)。 border-box:元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。 页面导入样式时，使用link和@import有什么区别？ link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS; 页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载; import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题; 介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？-（1）有两种， IE 盒子模型、W3C 盒子模型。-（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)。-（3）区 别： IE的content部分把 border 和 padding计算了进去。 CSS优先级算法如何计算？ 优先级就近原则，同权重情况下样式定义最近者为准; 载入样式以最后载入的定位为准; 优先级为: !important &gt; id &gt; class &gt; tag important比内联优先级高(style) 为什么要使用CSS spritesCSS Sprites其实就是把网页中一些背景图片整合到一张图片文件中，再利用CSS的“background-image”，“background-position”的组合进行背景定位，这样可以减少很多图片请求的开销，因为请求耗时比较长；请求虽然可以并发，但是如果请求太多会给服务器增加很大的压力。 display:none和visibility:hidden的区别？ display:none 隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。 visibility:hidden 隐藏对应的元素，但是在文档布局中仍保留原来的空间。 position的absolute与fixed区别 absolute浮动定位是相对于父级中设置position为relative或者absolute最近的父级元素 fixed浮动定位是相对于浏览器视窗的 position的值relative和absolute定位原点是？ absolute 生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。 fixed （老IE不支持） 生成绝对定位的元素，相对于浏览器窗口进行定位。 relative 生成相对定位的元素，相对于其正常位置进行定位。 static 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。 inherit规定从父元素继承 position 属性的值。 IE 8以下版本的浏览器中的盒模型有什么不同？IE8以下浏览器的盒模型中定义的元素的宽高包括内边距和边框（怪异盒子模型） CSS3新增伪类有那些？举例： p:first-of-type 选择属于其父元素的首个 元素的每个 元素。 p:last-of-type 选择属于其父元素的最后 元素的每个 元素。 p:only-of-type 选择属于其父元素唯一的 元素的每个 元素。 p:only-child 选择属于其父元素的唯一子元素的每个 元素。 p:nth-child(2) 选择属于其父元素的第二个子元素的每个 元素。 ::after 在元素之前添加内容,也可以用来做清除浮动。 ::before 在元素之后添加内容 :enabled :disabled 控制表单控件的禁用状态。 :checked 单选框或复选框被选中。 如何居中div？ 水平居中：给div设置一个宽度，然后添加margin:0 auto属性 1234div&#123; width:200px; margin:0 auto; &#125; 让绝对定位的div居中 1234567891011div &#123; position: absolute; width: 300px; height: 300px; margin: auto; top: 0; left: 0; bottom: 0; right: 0; background-color: pink; /* 方便看效果 */&#125; 水平垂直居中一 123456789101112确定容器的宽高 宽500 高 300 的层设置层的外边距div &#123; position: relative; /* 相对定位或绝对定位均可 */ width:500px; height:300px; top: 50%; left: 50%; margin: -150px 0 0 -250px; /* 外边距为自身宽高的一半 */ background-color: pink; /* 方便看效果 */&#125; 水平垂直居中二 1234567891011未知容器的宽高，利用 `transform` 属性div &#123; position: absolute; /* 相对定位或绝对定位均可 */ width:500px; height:300px; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: pink; /* 方便看效果 */&#125; 水平垂直居中三 123456789101112 利用 flex 布局 实际使用时应考虑兼容性.container &#123; display: flex; align-items: center; /* 垂直居中 */ justify-content: center; /* 水平居中 */&#125;.container div &#123; width: 100px; height: 100px; background-color: pink; /* 方便看效果 */&#125; display有哪些值？说明他们的作用。 block 块类型。默认宽度为父元素宽度，可设置宽高，换行显示。 none 元素不显示，并从文档流中移除。 inline 行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。 inline-block 默认宽度为内容宽度，可以设置宽高，同行显示。 list-item 象块类型元素一样显示，并添加样式列表标记。 table 此元素会作为块级表格来显示。 inherit 规定应该从父元素继承 display 属性的值。 CSS3有哪些新特性？新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点） 圆角 （border-radius:8px） 多列布局 （multi-column layout） 阴影和反射 （Shadow\\Reflect） 文字特效 （text-shadow、） 文字渲染 （Text-decoration） 线性渐变 （gradient） 旋转 （transform） 缩放,定位,倾斜,动画,多背景例如:transform:\\scale(0.85,0.90)\\ translate(0px,-30px)\\ skew(-9deg,0deg)\\Animation: 请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。在布局上有了比以前更加灵活的空间。具体：http://www.w3cplus.com/css3/flexbox-basics.html 用纯CSS创建一个三角形的原理是什么？ 把上、左、右三条边隐藏掉（颜色设为 transparent） 1234567#demo &#123; width: 0; height: 0; border-width: 20px; border-style: solid; border-color: transparent transparent red transparent;&#125; 一个满屏 品 字布局 如何设计?简单的方式： 上面的div宽100%， 下面的两个div分别宽50%， 然后用float或者inline使其不换行即可 css多列等高如何实现？利用padding-bottom|margin-bottom正负值相抵；设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度，当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。 经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？ png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8. 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。 IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。 浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;} 这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——display:inline;将其转化为行内属性。(这个符号只有ie6会识别) 渐进识别的方式，从总体中逐渐排除局部。 首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。 接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。 123456.bb&#123; background-color:red;/*所有识别*/ background-color:#00deff\\9; /*IE6、7、8识别*/ +background-color:#a200ff;/*IE6、7识别*/ _background-color:#1e0bd1;/*IE6识别*/&#125; IE下,可以使用获取常规属性的方法来获取自定义属性,也可以使用getAttribute()获取自定义属性;Firefox下,只能使用getAttribute()获取自定义属性。解决方法:统一通过getAttribute()获取自定义属性。 IE下,even对象有x,y属性,但是没有pageX,pageY属性;Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。 解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。 Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。 超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:L-V-H-A : a:link {} a:visited {} a:hover {} a:active {} li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？行框的排列会受到中间空白（回车\\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。 为什么要初始化CSS样式。 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。 最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议） 淘宝的样式初始化代码： 123456789101112131415body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td &#123; margin:0; padding:0; &#125;body, button, input, select, textarea &#123; font:12px/1.5tahoma, arial, \\5b8b\\4f53; &#125;h1, h2, h3, h4, h5, h6&#123; font-size:100%; &#125;address, cite, dfn, em, var &#123; font-style:normal; &#125;code, kbd, pre, samp &#123; font-family:couriernew, courier, monospace; &#125;small&#123; font-size:12px; &#125;ul, ol &#123; list-style:none; &#125;a &#123; text-decoration:none; &#125;a:hover &#123; text-decoration:underline; &#125;sup &#123; vertical-align:text-top; &#125;sub&#123; vertical-align:text-bottom; &#125;legend &#123; color:#000; &#125;fieldset, img &#123; border:0; &#125;button, input, select, textarea &#123; font-size:100%; &#125;table &#123; border-collapse:collapse; border-spacing:0; &#125; absolute的containing block(容器块)计算方式跟正常流有什么不同？无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断： 1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形； 2、否则,则由这个祖先元素的 padding box 构成。 如果都找不到，则为 initial containing block。 补充： static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分） absolute: 向上找最近的定位为absolute/relative的元素 fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？对于普通元素visibility:collapse;会将元素完全隐藏,不占据页面布局空间,与display:none;表现相同. 如果目标元素为table,visibility:collapse;将table隐藏,但是会占据页面布局空间. 仅在Firefox下起作用,IE会显示元素,Chrome会将元素隐藏,但是占据空间. position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？如果元素的display为none,那么元素不被渲染,position,float不起作用,如果元素拥有position:absolute;或者position:fixed;属性那么元素将为绝对定位,float不起作用.如果元素float属性不是none,元素会脱离文档流,根据float属性值来显示.有浮动,绝对定位,inline-block属性的元素,margin不会和垂直方向上的其他元素margin折叠. 对BFC规范(块级格式化上下文：block formatting context)的理解？（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用。）一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。 css定义的权重1234567891011121314151617181920以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：/*权重为1*/div&#123;&#125;/*权重为10*/.class1&#123;&#125;/*权重为100*/#id1&#123;&#125;/*权重为100+1=101*/#id1 div&#123;&#125;/*权重为10+1=11*/.class1 div&#123;&#125;/*权重为10+10+1=21*/.class1 .class2 div&#123;&#125;如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现 什么是外边距合并？外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。w3school介绍网址： http://www.w3school.com.cn/css/css_margin_collapsing.asp 移动端的布局用过媒体查询吗？假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来， 而显示设备、屏幕投影和打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法 当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。 当媒体查询返回假， 标签上带有媒体查询的样式表 仍将被下载 （只不过不会被应用）。 包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。 CSS3加入的媒体查询使得无需修改内容便可以使样式应用于某些特定的设备范围。 1&lt;style&gt; @media (min-width: 700px) and (orientation: landscape)&#123; .sidebar &#123; display: none; &#125; &#125; &lt;/style&gt; 使用 CSS 预处理器吗？喜欢那个？SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS) CSS优化、提高性能的方法有哪些？关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）；提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）； 浏览器是怎样解析CSS选择器的？样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。 margin和padding分别适合什么场景使用？margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。margin用于布局分开元素使元素与元素互不相干；padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段 ::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，比如:first-line、:first-letter、:before、:after等，而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。想让插入的内容出现在其它内容前，使用::before，否者，使用::after；在代码顺序上，::after生成的内容也比::before生成的内容靠后。如果按堆栈视角，::after生成的内容会在::before生成的内容之上 如何修改chrome记住密码后自动填充表单的黄色背景 ？12345input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill &#123; background-color: rgb(250, 255, 189); /* #FAFFBD; */ background-image: none; color: rgb(0, 0, 0);&#125; 设置元素浮动后，该元素的display值是多少？自动变成了 display:block 怎么让Chrome支持小于12px 的文字？ 1、用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。 2、使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜。 3、继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-webkit-text-size-adjust:none，做到最大兼容考虑。 4、使用12px以上字体：为了兼容、为了代码更简单 从新考虑权重下兼容性。 让页面里的字体变清晰，变细用CSS怎么做？-webkit-font-smoothing: antialiased; position:fixed;在android下无效怎么处理？fixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，原来的网页还好好的在那，fixed的内容也没有变过位置，所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的。 1&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"/&gt; 如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms display:inline-block 什么时候会显示间隙？(携程)移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing 什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，所以不如隔离开。 因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。 同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，提高了webserver的http请求的解析速度。 什么是CSS 预处理器 / 后处理器？ 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。","categories":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/categories/面试题/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/tags/面试题/"},{"name":"CSS专题","slug":"CSS专题","permalink":"http://lingkeyu.com/tags/CSS专题/"}]},{"title":"面试题-HTML专题","slug":"面试题-HTML专题","date":"2018-06-20T15:46:07.000Z","updated":"2018-09-04T01:09:59.543Z","comments":true,"path":"2018/06/20/面试题-HTML专题/","link":"","permalink":"http://lingkeyu.com/2018/06/20/面试题-HTML专题/","excerpt":"常用哪几种浏览器测试？有哪些内核(Layout Engine)? 浏览器：IE,Chrome,FireFox,Safari,Opera 内核：Trident,Gecko,Presto,Webkit。","text":"常用哪几种浏览器测试？有哪些内核(Layout Engine)? 浏览器：IE,Chrome,FireFox,Safari,Opera 内核：Trident,Gecko,Presto,Webkit。 详细介绍 Trident内核代表产品Internet Explorer，又称其为IE内核。Trident（又称为MSHTML），是微软开发的一种排版引擎。使用Trident渲染引擎的浏览器包括：IE、傲游、世界之窗浏览器、Avant、腾讯TT、Netscape 8、NetCaptor、Sleipnir、GOSURF、GreenBrowser和KKman等。 Gecko内核代表作品Mozilla FirefoxGecko是一套开放源代码的、以C++编写的网页排版引擎。Gecko是最流行的排版引擎之一，仅次于Trident。使用它的最著名浏览器有Firefox、Netscape6至9。 WebKit内核代表作品Safari、Chromewebkit 是一个开源项目，包含了来自KDE项目和苹果公司的一些组件，主要用于Mac OS系统，它的特点在于源码结构清晰、渲染速度极快。缺点是对网页代码的兼容性不高，导致一些编写不标准的网页无法正常显示。主要代表作品有Safari和Google的浏览器Chrome。 Presto内核代表作品OperaPresto是由Opera Software开发的浏览器排版引擎，供Opera 7.0及以上使用。它取代了旧版Opera 4至6版本使用的Elektra排版引擎，包括加入动态功能，例如网页或其部分可随着DOM及Script语法的事件而重新排版。 说下行内元素和块级元素的区别？行内块元素的兼容性使用？(IE8 以下) 行内元素：会在水平方向排列，不能包含块级元素，设置width无效，height无效(可以设置line-height)，margin上下无效，左右有效，padding上下左右都有效。 块级元素：各占据一行，垂直方向排列。 兼容性： display:inline-block display:inline; zoom:1;说说对zoom：1的理解？zoom:1;属性是IE浏览器的专有属性，Firefox等其它浏览器不支持。它可以设置或检索对象的缩放比例。除此之外，它还有其他一些小作用，比如触发ie的hasLayout属性，清除浮动、清除margin的重叠等。但很遗憾的是，它通不过W3C验证．说说对IE的haslayout的理解？haslayout是Windows Internet Explorer渲染引擎的一个内部组成部分。在Internet Explorer中，使用布局概念来控制元素的尺寸和定位。在理想情况下，所有元素都控制自己的尺寸和定位。但是，这在IE中会导致很大的性能问题。因此，IE开发团队决定只将布局应用于实际需要它的那些元素，这样就可以充分地减少性能开销。具体什么是haslayout请看这篇文章 ： http://www.cnblogs.com/yuqingfamily/p/6866285.html Doctype作用？标准模式与兼容模式各有什么区别? &lt;!DOCTYPE&gt;告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。 标准模式的排版和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？ HTML5不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。 （1）行内元素有：a b span img input select strong（强调的语气） （2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p （3）常见的空元素： 鲜为人知的是： 不同浏览器（版本）、HTML4（5）、CSS2等实际略有差异参考: http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements html5有哪些新特性？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？ 新特性：HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。 (1)绘画 canvas; (2)用于媒介回放的 video 和 audio 元素; (3)本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失; (4)sessionStorage 的数据在浏览器关闭后自动删除; (5)语意化更好的内容元素，比如 article、footer、header、nav、section; (6)表单控件，calendar、date、time、email、url、search; (7)新的技术webworker, websocket, Geolocation; 如何处理浏览器兼容问题？ IE8/IE7/IE6支持通过document.createElement方法产生的标签，可以利用这一特性让这些浏览器支持HTML5新标签，浏览器支持新标签后，还需要添加标签默认的样式。当然也可以直接使用成熟的框架、比如html5shim;&lt;!–[if lt IE 9]&gt; src=”http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;![endif]–&gt; 如何区分 HTML 和 HTML5？ 文档声明，语意结构，H5新标签的使用 简述一下你对HTML语义化的理解？ 用正确的标签做正确的事情。 html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析; 即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的; 搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO; 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。 HTML5的离线储存怎么使用，工作原理能不能解释一下？在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。 原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。 如何使用： 1、页面头部像下面一样加入一个manifest的属性； 2、在cache.manifest文件的编写离线存储的资源； CACHE MANIFEST #v0.11 CACHE: js/app.js css/style.css NETWORK: resourse/logo.png FALLBACK: / /offline.html 3、在离线状态时，操作window.applicationCache进行需求实现。 浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。离线的情况下，浏览器就直接使用离线存储的资源。 请描述一下 cookies，sessionStorage 和 localStorage 的区别？ cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。 cookie数据始终在同源的http请求中携带（即使不需要），也会在浏览器和服务器间来回传递。 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。 存储大小： cookie数据大小不能超过4k。 sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。 有期时间： localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据； sessionStorage 数据在当前浏览器窗口关闭后自动删除。 cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭 iframe有那些缺点？ iframe会阻塞主页面的Onload事件； 搜索引擎的检索程序无法解读这种页面，不利于SEO; iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。 使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题。 如何实现浏览器内多个标签页之间的通信?(阿里)WebSocket、SharedWorker也可以调用localstorge、cookies等本地存储方式。localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，我们通过监听事件，控制它的值来进行页面信息通信。 注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常。 如何在页面上实现一个圆形的可点击区域？-（1）map+area或者svg-（2）border-radius-（3）纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等 Label的作用是什么？是怎么用的？label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。 123&lt;label for=\"Name\"&gt;Number:&lt;/label&gt;&lt;input type=“text“name=\"Name\" id=\"Name\"/&gt;&lt;label&gt;Date:&lt;input type=\"text\" name=\"B\"/&gt;&lt;/label&gt; HTML5的form如何关闭自动完成功能？给不想要提示的 form 或某个 input 设置为 autocomplete=off。 webSocket如何兼容低浏览器？(阿里) Adobe Flash Socket 、 ActiveX HTMLFile (IE) 、 基于 multipart 编码发送 XHR 、 基于长轮询的 XHR 页面可见性（Page Visibility API） 可以有哪些用途？通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放； 如何在页面上实现一个圆形的可点击区域？ 1、map+area或者svg 2、border-radius 3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等 实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。1&lt;div style=\"height:1px;overflow:hidden;background:red\"&gt;&lt;/div&gt; 网页验证码是干嘛的，是为了解决什么安全问题。区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。 title与h1的区别、b与strong的区别、i与em的区别？title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：会重读，而是展示强调内容。i内容展示为斜体，em表示强调的文本；Physical Style Elements – 自然样式标签b, i, u, s, preSemantic Style Elements – 语义样式标签strong, em, ins, del, code应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。 ##","categories":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/categories/面试题/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/tags/面试题/"},{"name":"HTML专题","slug":"HTML专题","permalink":"http://lingkeyu.com/tags/HTML专题/"}]},{"title":"面试题-JS专题(下)","slug":"面试题-JS专题(下)","date":"2018-06-20T06:25:52.000Z","updated":"2018-09-04T11:47:36.970Z","comments":true,"path":"2018/06/20/面试题-JS专题(下)/","link":"","permalink":"http://lingkeyu.com/2018/06/20/面试题-JS专题(下)/","excerpt":"如何解决跨域问题？要掌握跨域，首先要知道为什么会有跨域这个问题出现？ 为什么会有跨域由于浏览器存在同源策略，请求的 Url 地址的协议、主机名、端口号必须完全相同，否则会产生跨域，同源策略的限制下 cookie 、loclstorage、dom、ajax、IndexDB 等都不允许跨域、form 表单不受同源策略限制对跨域的理解有一个误区，跨域不是请求没有发送出去或者服务器接收到请求而没有响应，正确的情况是请求发出，服务器响应，由于响应和请求来自不同的域被浏览器拦截了。","text":"如何解决跨域问题？要掌握跨域，首先要知道为什么会有跨域这个问题出现？ 为什么会有跨域由于浏览器存在同源策略，请求的 Url 地址的协议、主机名、端口号必须完全相同，否则会产生跨域，同源策略的限制下 cookie 、loclstorage、dom、ajax、IndexDB 等都不允许跨域、form 表单不受同源策略限制对跨域的理解有一个误区，跨域不是请求没有发送出去或者服务器接收到请求而没有响应，正确的情况是请求发出，服务器响应，由于响应和请求来自不同的域被浏览器拦截了。 没有同源策略限制的两大危险场景浏览器是从两个方面去做这个同源策略的，一是针对接口的请求，二是针对Dom的查询。 没有同源策略限制的接口请求有一个小小的东西叫cookie大家应该知道，一般用来处理登录等场景，目的是让服务端知道谁发出的这次请求。如果你请求了接口进行登录，服务端验证通过后会在响应头加入Set-Cookie字段，然后下次再发请求的时候，浏览器会自动将cookie附加在HTTP请求的头字段Cookie中，服务端就能知道这个用户已经登录过了。知道这个之后，我们来看场景： 你准备去清空你的购物车，于是打开了买买买网站www.maimaimai.com，然后登录成功，一看，购物车东西这么少，不行，还得买多点。 你在看有什么东西买的过程中，你的好基友发给你一个链接www.nidongde.com，一脸yin笑地跟你说：“你懂的”，你毫不犹豫打开了。 你饶有兴致地浏览着www.nidongde.com，谁知这个网站暗地里做了些不可描述的事情！由于没有同源策略的限制，它向www.maimaimai.com发起了请求！聪明的你一定想到上面的话“服务端验证通过后会在响应头加入Set-Cookie字段，然后下次再发请求的时候，浏览器会自动将cookie附加在HTTP请求的头字段Cookie中”，这样一来，这个不法网站就相当于登录了你的账号，可以为所欲为了！如果这不是一个买买买账号，而是你的银行账号，那…… 这就是传说中的CSRF攻击。 没有同源策略限制的Dom查询 有一天你刚睡醒，收到一封邮件，说是你的银行账号有风险，赶紧点进www.yinghang.com改密码。你吓尿了，赶紧点进去，还是熟悉的银行登录界面，你果断输入你的账号密码，登录进去看看钱有没有少了。 睡眼朦胧的你没看清楚，平时访问的银行网站是www.yinhang.com，而现在访问的是www.yinghang.com，这个钓鱼网站做了什么呢？ 1234567// HTML&lt;iframe name=\"yinhang\" src=\"www.yinhang.com\"&gt;&lt;/iframe&gt;// JS// 由于没有同源策略的限制，钓鱼网站可以直接拿到别的网站的Domconst iframe = window.frames['yinhang']const node = iframe.document.getElementById('你输入账号密码Input')console.log(`拿到了这个$&#123;node&#125;，我还拿不到你刚刚输入的账号密码吗`) 由此我们知道，同源策略确实能规避一些危险，不是说有了同源策略就安全，只是说同源策略是一种浏览器最基本的安全机制，毕竟能提高一点攻击的成本。其实没有刺不穿的盾，只是攻击的成本和攻击成功后获得的利益成不成正比。 跨域正确的打开方式经过对同源策略的了解，我们应该要消除对浏览器的误解，同源策略是浏览器做的一件好事，是用来防御来自邪门歪道的攻击，但总不能为了不让坏人进门而把全部人都拒之门外吧。没错，我们这种正人君子只要打开方式正确，就应该可以跨域。 下面将一个个演示正确打开方式，但在此之前，有些准备工作要做。为了本地演示跨域，我们需要： 随便跑起一份前端代码（以下前端是随便跑起来的vue），地址是http://localhost:9099。 随便跑起一份后端代码（以下后端是随便跑起来的node koa2），地址是http://localhost:9971。 同源策略限制下接口请求的正确打开方式JSONP在HTML标签里，一些标签比如script、img这样的获取资源的标签是没有跨域限制的，利用这一点，我们可以这样干。 后端写个小接口： 12345678910111213// 处理成功失败返回格式的工具const &#123;successBody&#125; = require('../utli')class CrossDomain&#123; static async jsonp (ctx) &#123;// 前端传过来的参数const query = ctx.request.query// 设置一个cookies ctx.cookies.set('tokenId', '1')// query.cb是前后端约定的方法名字，其实就是后端返回一个直接执行的方法给前端，由于前端是用script标签发起的请求，所以返回了这个方法后相当于立马执行，并且把要返回的数据放在方法的参数里。 ctx.body = `$&#123;query.cb&#125;($&#123;JSON.stringify(successBody(&#123;msg: query.msg&#125;, 'success'))&#125;)`&#125;&#125;module.exports = CrossDomain 简单版前端： 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt;&lt;script type='text/javascript'&gt;// 后端返回直接执行的方法，相当于执行这个方法，由于后端把返回的数据放在方法的参数里，所以这里能拿到res。 window.jsonpCb = function(res) &#123; console.log(res) &#125;&lt;/script&gt;&lt;script src='http://localhost:9871/api/jsonp?msg=helloJsonp&amp;cb=jsonpCb' type='text/javascript'&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 简单封装一下前端这个套路： 1234567891011121314151617181920212223242526272829303132333435363738394041/** * JSONP请求工具 * @param url 请求的地址 * @param data 请求的参数 * @returns &#123;Promise&lt;any&gt;&#125; */const request = (&#123;url, data&#125;) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123;// 处理传参成xx=yy&amp;aa=bb的形式const handleData = (data) =&gt; &#123;const keys = Object.keys(data)const keysLen = keys.length return keys.reduce((pre, cur, index) =&gt; &#123;const value = data[cur] const flag = index !== keysLen - 1 ? '&amp;' : ''return `$&#123;pre&#125;$&#123;cur&#125;=$&#123;value&#125;$&#123;flag&#125;`&#125;, '')&#125; // 动态创建script标签 const script = document.createElement('script')// 接口返回的数据获取 window.jsonpCb = (res) =&gt; &#123; document.body.removeChild(script) delete window.jsonpCb resolve(res)&#125; script.src = `$&#123;url&#125;?$&#123;handleData(data)&#125;&amp;cb=jsonpCb` document.body.appendChild(script)&#125;)&#125;// 使用方式request(&#123; url: 'http://localhost:9871/api/jsonp', data: &#123;// 传参 msg: 'helloJsonp'&#125;&#125;).then(res =&gt; &#123; console.log(res)&#125;) 空iframe加form细心的朋友可能发现，JSONP只能发GET请求，因为本质上script加载资源就是GET，那么如果要发POST请求怎么办呢？ 后端写个小接口： 12345678910// 处理成功失败返回格式的工具const &#123;successBody&#125; = require('../utli')class CrossDomain&#123; static async iframePost (ctx) &#123; let postData = ctx.request.body console.log(postData) ctx.body = successBody(&#123;postData: postData&#125;, 'success')&#125;&#125;module.exports = CrossDomain 前端： 123456789101112131415161718192021222324252627282930313233343536const requestPost = (&#123;url, data&#125;) =&gt; &#123;// 首先创建一个用来发送数据的iframe.const iframe = document.createElement('iframe')iframe.name = 'iframePost'iframe.style.display = 'none'document.body.appendChild(iframe)const form = document.createElement('form')const node = document.createElement('input')// 注册iframe的load事件处理程序,如果你需要在响应返回时执行一些操作的话.iframe.addEventListener('load', function() &#123; console.log('post success')&#125;)form.action = url // 在指定的iframe中执行formform.target = iframe.nameform.method = 'post'for(let name indata) &#123; node.name = name node.value = data[name].toString() form.appendChild(node.cloneNode())&#125; // 表单元素需要添加到主文档中.form.style.display = 'none'document.body.appendChild(form)form.submit()// 表单提交后,就可以删除这个表单,不影响下次的数据发送.document.body.removeChild(form)&#125;// 使用方式requestPost(&#123; url: 'http://localhost:9871/api/iframePost', data: &#123; msg: 'helloIframePost' &#125;&#125;) CORSCORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）跨域资源共享 CORS 详解。看名字就知道这是处理跨域问题的标准做法。CORS有两种请求，简单请求和非简单请求。 浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。只要同时满足以下两大条件，就属于简单请求 （1）请求方法是以下三种方法之一： HEAD GET POST （2）HTTP的头信息不超出以下几种字段： Accept Accept-Language Content-Language Last-Event-ID Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain 简单请求后端： 123456789101112// 处理成功失败返回格式的工具const &#123;successBody&#125; = require('../utli')class CrossDomain&#123; static async cors (ctx) &#123; const query = ctx.request.query // *时cookie不会在http请求中带上 ctx.set('Access-Control-Allow-Origin', '*') ctx.cookies.set('tokenId', '2') ctx.body = successBody(&#123;msg: query.msg&#125;, 'success') &#125;&#125;module.exports = CrossDomain 前端什么也不用干，就是正常发请求就可以，如果需要带cookie的话，前后端都要设置一下，下面那个非简单请求例子会看到。 1fetch(`http://localhost:9871/api/cors?msg=helloCors`).then(res =&gt; &#123;console.log(res)&#125;) 非简单请求非简单请求会发出一次预检测请求，返回码是204，预检测通过才会真正发出请求，这才返回200。这里通过前端发请求的时候增加一个额外的headers来触发非简单请求。 后端： 1234567891011121314151617// 处理成功失败返回格式的工具const &#123;successBody&#125; = require('../utli')class CrossDomain&#123; static async cors (ctx) &#123;const query = ctx.request.query// 如果需要http请求中带上cookie，需要前后端都设置credentials，且后端设置指定的origin ctx.set('Access-Control-Allow-Origin','http://localhost:9099') ctx.set('Access-Control-Allow-Credentials', true)// 非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为\"预检\"请求（preflight）// 这种情况下除了设置origin，还需要设置Access-Control-Request-Method以及Access-Control-Request-Headers ctx.set('Access-Control-Request-Method', 'PUT,POST,GET,DELETE,OPTIONS') ctx.set('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, t') ctx.cookies.set('tokenId', '2') ctx.body = successBody(&#123;msg: query.msg&#125;, 'success')&#125;&#125;module.exports = CrossDomain 一个接口就要写这么多代码，如果想所有接口都统一处理，有什么更优雅的方式呢？见下面的koa2-cors。 12345678910111213141516171819202122232425const path = require('path')const Koa = require('koa')const koaStatic = require('koa-static')const bodyParser = require('koa-bodyparser')const router = require('./router')const cors = require('koa2-cors')const app = new Koa()const port = 9871app.use(bodyParser())// 处理静态资源 这里是前端build好之后的目录app.use(koaStatic(path.resolve(__dirname, '../dist')))// 处理corsapp.use(cors(&#123; origin: function(ctx) &#123; return 'http://localhost:9099' &#125;, credentials: true, allowMethods: ['GET', 'POST', 'DELETE'], allowHeaders: ['t', 'Content-Type']&#125;))// 路由app.use(router.routes()).use(router.allowedMethods())// 监听端口app.listen(9871)console.log(`[demo] start-quick is starting at port $&#123;port&#125;`) 前端： 12345678910fetch(`http://localhost:9871/api/cors?msg=helloCors`, &#123;// 需要带上cookie credentials: 'include',// 这里添加额外的headers来触发非简单请求 headers: &#123; 't': 'extra headers' &#125;&#125;).then(res =&gt; &#123; console.log(res)&#125;) 代理想一下，如果我们请求的时候还是用前端的域名，然后有个东西帮我们把这个请求转发到真正的后端域名上，不就避免跨域了吗？这时候，Nginx出场了。 Nginx配置： 1234567891011server&#123;# 监听9099端口 listen 9099;# 域名是localhost server_name localhost;#凡是localhost:9099/api这个样子的，都转发到真正的服务端地址http://localhost:9871 location ^~ /api &#123; proxy_pass http://localhost:9871; &#125; &#125; 前端就不用干什么事情了，除了写接口，也没后端什么事情了。 1234567891011// 请求的时候直接用回前端这边的域名http://localhost:9099，这就不会跨域，然后Nginx监听到凡是localhost:9099/api这个样子的，都转发到真正的服务端地址http://localhost:9871 fetch('http://localhost:9099/api/iframePost', &#123; method: 'POST', headers: &#123; 'Accept': 'application/json', 'Content-Type': 'application/json' &#125;, body: JSON.stringify(&#123; msg: 'helloIframePost' &#125;)&#125;) Nginx转发的方式似乎很方便！但这种使用也是看场景的，如果后端接口是一个公共的API，比如一些公共服务获取天气什么的，前端调用的时候总不能让运维去配置一下Nginx，如果兼容性没问题（IE 10或者以上），CROS才是更通用的做法吧。 同源策略限制下Dom查询的正确打开方式postMessagewindow.postMessage() 是HTML5的一个接口，专注实现不同窗口不同页面的跨域通讯。 为了演示方便，我们将hosts改一下：127.0.0.1 crossDomain.com，现在访问域名crossDomain.com就等于访问127.0.0.1。 这里是http://localhost:9099/#/crossDomain，发消息方： 12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div&gt;&lt;button @click = \"postMessage\"&gt;//给http://crossDomain.com:9099发消息&lt;/button&gt; &lt;iframe name = \"crossDomainIframe\" src = \"http://crossdomain.com:9099\"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default&#123; mounted () &#123; window.addEventListener('message', (e) =&gt; &#123;// 这里一定要对来源做校验 if(e.origin === 'http://crossdomain.com:9099') &#123;// 来自http://crossdomain.com:9099的结果回复 console.log(e.data) &#125; &#125;) &#125;, methods: &#123;// 向http://crossdomain.com:9099发消息 postMessage () &#123; const iframe = window.frames['crossDomainIframe'] iframe.postMessage('我是[http://localhost:9099], 麻烦你查一下你那边有没有id为app的Dom', 'http://crossdomain.com:9099') &#125; &#125;&#125;&lt;/script&gt; 这里是http://crossdomain.com:9099，接收消息方： 1234567891011121314151617181920212223&lt;template&gt;&lt;div&gt; 我是http://crossdomain.com:9099&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; mounted () &#123; window.addEventListener('message', (e) =&gt; &#123;// 这里一定要对来源做校验if(e.origin === 'http://localhost:9099') &#123;// http://localhost:9099发来的信息 console.log(e.data); // e.source可以是回信的对象，其实就是http://localhost:9099窗口对象(window)的引用// e.origin可以作为targetOrigin e.source.postMessage(`我是[http://crossdomain.com:9099]，我知道了兄弟，这就是你想知道的结果：$&#123;document.getElementById('app') ? '有id为app的Dom' : '没有id为app的Dom'&#125;`, e.origin); &#125; &#125;) &#125;&#125;&lt;/script&gt; document.domain这种方式只适合主域名相同，但子域名不同的iframe跨域。 比如主域名是http://crossdomain.com:9099，子域名是http://child.crossdomain.com:9099，这种情况下给两个页面指定一下document.domain即document.domain = crossdomain.com就可以访问各自的window对象了。 canvas操作图片的跨域问题documen.write和 innerHTML的区别 document.write只能重绘整个页面 innerHTML可以重绘页面的一部分 DOM操作——怎样添加、移除、移动、复制、创建和查找节点?（1）创建新节点 createDocumentFragment() //创建一个DOM片段 createElement() //创建一个具体的元素 createTextNode() //创建一个文本节点###（2）添加、移除、替换、插入 appendChild() removeChild() replaceChild() insertBefore() //在已有的子节点前插入一个新的子节点###（3）查找 getElementsByTagName() //通过标签名称 getElementsByName() //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的) getElementById() //通过元素Id，唯一性 jquery.extend 与 jquery.fn.extend的区别？jquery.extend 为jquery类添加类方法，可以理解为添加静态方法jquery.fn.extend: 源码中jquery.fn = jquery.prototype，所以对jquery.fn的扩展，就是为jquery类添加成员函数 使用： jquery.extend扩展，需要通过jquery类来调用，而jquery.fn.extend扩展，所有jquery实例都可以直接调用。 那些操作会造成内存泄漏？内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。 垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。 setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。 闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环） JQuery一个对象可以同时绑定多个事件，这是如何实现的？1234567多个事件同一个函数： $(\"div\").on(\"click mouseover\", function()&#123;&#125;);多个事件不同函数 $(\"div\").on(&#123; click: function()&#123;&#125;, mouseover: function()&#123;&#125; &#125;); 用js实现千位分隔符?12345678function commafy(num) &#123; return num &amp;&amp; num .toString() .replace(/(\\d)(?=(\\d&#123;3&#125;)+\\.)/g, function($0, $1) &#123; return $1 + \",\"; &#125;); &#125;console.log(commafy(1234567.90)); //1,234,567.90 检测浏览器版本版本有哪些方式？功能检测、userAgent特征检测 比如：navigator.userAgent//“Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36(KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36” 使用JS实现获取文件扩展名？1234567function getFileExtension(filename) &#123; return filename.slice((filename.lastIndexOf(\".\") - 1 &gt;&gt;&gt; 0) + 2); &#125;String.lastIndexOf() 方法返回指定值（本例中的'.'）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。对于'filename'和'.hiddenfile'，lastIndexOf的返回值分别为0和-1无符号右移操作符(»&gt;) 将-1转换为4294967295，将-2转换为4294967294，这个方法可以保证边缘情况时文件名不变。String.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为\"\"。 Webpack热更新实现原理? Webpack编译期，为需要热更新的 entry 注入热更新代码(EventSource通信) 页面首次打开后，服务端与客户端通过 EventSource 建立通信渠道，把下一次的 hash 返回前端 客户端获取到hash，这个hash将作为下一次请求服务端 hot-update.js 和 hot-update.json的hash 修改页面代码后，Webpack 监听到文件修改后，开始编译，编译完成后，发送 build 消息给客户端 客户端获取到hash，成功后客户端构造hot-update.js script链接，然后插入主文档 hot-update.js 插入成功后，执行hotAPI 的 createRecord 和 reload方法，获取到 Vue 组件的 render方法，重新 render 组件， 继而实现 UI 无刷新更新。 描述一下React 生命周期渲染过程调用到的生命周期函数，主要几个要知道； constructor getInitialState getDefaultProps componentWillMount render componentDidMount 更新过程 componentWillReceiveProps shouldComponentUpdate componentWillUpdate render componentDidUpdate 卸载过程 componentWillUnmount 实现组件有哪些方式？ React.createClass 使用API来定义组件 React ES6 class component 用 ES6 的class 来定义组件 Functional stateless component 通过函数定义无状态组件 应该在React生命周期的什么阶段发出ajax请求，为什么？AJAX请求应在 componentDidMount函数 进行请求。 shouldComponentUpdate函数有什么作用？shouldComponentUpdate是一个允许我们自行决定某些组件（以及他们的子组件）是否进行更新的生命周期函数，reconciliation的最终目的是尽可能以最有效的方式去根据新的state更新UI， 如果你已经知道UI的哪些状态无需进行改变，就没必要去让React去判断它是否该改变。 让shouldComponentUpdate返回falss, React就会让当前的组件和其子组件保持不变。 当组件的setState函数被调用之后，发生了什么？React会做的第一件事就是把你传递给setState的参数对象合并到组件原先的state。这个事件会导致一个“reconciliation”（调和）的过程。reconciliation的最终目标就是， 尽可能以最高效的方法，去基于新的state来更新UI。为了达到这个目的，React会构建一个React元素树（你可以把这个想象成一个表示UI的一个对象）。一旦这个树构建完毕， React为了根据新的state去决定UI要怎么进行改变，它会找出这棵新树和旧树的不同之处。React能够相对精确地找出哪些位置发生了改变以及如何发生了什么变化， 并且知道如何只通过必要的更新来最小化重渲染。 为什么循环产生的组件中要利用上key这个特殊的prop？Keys负责帮助React跟踪列表中哪些元素被改变/添加/移除。React利用子元素的key在比较两棵树的时候，快速得知一个元素是新的还是刚刚被移除。没有keys，React也就不知道当前哪一个的item被移除了。 React-router 路由的实现原理？说说React Native,Weex框架的实现原理？受控组件(Controlled Component)与非受控组件(Uncontrolled Component)的区别refs 是什么Refs是能访问DOM元素或组件实例的一个函数； React为什么自己定义一套事件体系呢，与浏览器原生事件体系有什么关系什么时候应该选择用class实现一个组件，什么时候用一个函数实现一个组件组件用到了state或者用了生命周期函数，那么就该使用Class component。其他情况下，应使用Functional component。 什么是HoC Higher-Order Component适用于什么场景高阶组件就是一个 React 组件包裹着另外一个 React 组件并不是父子关系的组件，如何实现相互的数据通信 使用父组件，通过props将变量传入子组件（如通过refs，父组件获取一个子组件的方法，简单包装后，将包装后的方法通过props传入另一个子组件） 用过 React 技术栈中哪些数据流管理库？Redux\\Dva Redux是如何做到可预测呢？Redux将React组件划分为哪两种？Redux是如何将state注入到React组件上的？请描述一次完整的 Redux 数据流React的批量更新机制 BatchUpdates？React与Vue，各自的组件更新进行对比，它们有哪些区别？你遇到过比较难的技术问题是？你是如何解决的？设计模式 知道什么是singleton, factory, strategy, decrator么?常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？页面重构怎么操作？ 网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。 也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。 对于传统的网站来说重构通常是： 表格(table)布局改为DIV+CSS 使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的) 对于移动平台的优化 针对于SEO进行优化 深层次的网站重构应该考虑的方面 减少代码间的耦合 让代码保持弹性 严格按规范编写代码 设计可扩展的API 代替旧有的框架、语言(如VB) 增强用户体验 通常来说对于速度的优化也包含在重构中 压缩JS、CSS、image等前端资源(通常是由服务器来解决)程序的性能优化(如数据读写) 采用CDN来加速资源加载 对于JS DOM的优化 HTTP服务器的文件缓存 列举IE与其他浏览器不一样的特性？1、事件不同之处： 触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性； 获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性； 阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法； 停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()； 99%的网站都需要被重构是那本书上写的？ 网站重构：应用web标准进行设计（第2版） WEB应用从服务器主动推送Data到客户端有那些方式？ html5提供的Websocket 不可见的iframe WebSocket通过Flash XHR长时间连接 XHR Multipart Streaming 对Node的优点和缺点提出了自己的看法？（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。 此外，与Node代理服务器交互的客户端代码是由javascript语言编写的， 因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。 （缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。 http状态码有那些？分别代表是什么意思？简单版[ 100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息 200 OK 正常返回信息 201 Created 请求成功并且服务器创建了新的资源 202 Accepted 服务器已接受请求，但尚未处理 301 Moved Permanently 请求的网页已永久移动到新位置。 302 Found 临时性重定向。 303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。 304 Not Modified 自从上次请求后，请求的网页未修改过。 400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。 401 Unauthorized 请求未授权。 403 Forbidden 禁止访问。 404 Not Found 找不到如何与 URI 相匹配的资源。 500 Internal Server Error 最常见的服务器端错误。 503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。 ] 详细版： 1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理; 2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法; 3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求; 4、进行HTTP协议会话，客户端发送报头(请求报头); 5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器; 6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理; 7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304; 8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存; 9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie; 10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。 简洁版： 浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求； 服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）； 浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）； 载入解析到的资源文件，渲染页面，完成。 部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？ 从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?第一次访问页面中时弹出引导，用户关闭引导，之后再次进入页面时不希望出现引导，如何实现？localStorage 除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？你用的得心应手用的熟练地编辑器&amp;开发环境是什么样子？ Sublime Text 3 + 插件 Google chrome 查看页面UI、动画效果和交互功能，Firebug 兼容测试和 Node.js + webpack Git 版本控制和Code Review 对前端工程师这个职位是怎么样理解的？它的前景会怎么样？ 前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。 1、实现界面交互 2、提升用户体验 3、有了Node.js，前端可以实现服务端的一些事情 前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好， 参与项目，快速高质量完成实现效果图，精确到1px； 与团队成员，UI设计，产品经理的沟通； 做好的页面结构，页面重构和用户体验； 处理hack，兼容、写出优美的代码格式； 针对服务器的优化、拥抱最新前端技术。 你怎么看待Web App 、hybrid App、Native App？你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）产品进行版本升级时，可能发生不兼容性问题，如何提前预防和解决？ 非覆盖式发布，API新增而不是在原来的上面修改； 提前做好 @Deprecated的版本提示； 你对加班的看法？ 加班就像借钱，原则应当是——救急不救穷 平时如何管理你的项目？ 先期团队必须确定好全局样式（global.css），编码模式(utf-8) 等； 编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）； 标注样式编写人，各模块都及时标注（标注关键样式调用的地方）； 页面进行标注（例如 页面 模块 开始和结束）； CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）； JS 分文件夹存放 命名以该JS功能为准的英文翻译。 图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理 如何设计突发大规模并发架构？当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？说说最近最流行的一些东西吧？常去哪些网站？ES6\\WebAssembly\\Node\\MVVM\\Web Components\\React\\React Native\\Webpack 组件化 知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?移动端（Android IOS）怎么做好用户体验? 清晰的视觉纵线、 信息的分组、极致的减法、 利用选择代替输入、 标签及文字的排布方式、 依靠明文确认密码、 合理的键盘利用、 简单描述一下你做过的移动APP项目研发流程？你在现在的团队处于什么样的角色，起到了什么明显的作用？你认为怎样才是全端工程师（Full Stack developer）？介绍一个你最得意的作品吧？你有自己的技术博客吗，用了哪些技术？对前端安全有什么看法？是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。最近在学什么东西？你的优点是什么？缺点是什么？如何管理前端团队?最近在学什么？能谈谈你未来3，5年给自己的规划吗？jQuery 基本原理 JavaScript 秘密花园 CSS参考手册 JavaScript 标准参考教程 ECMAScript 6入门","categories":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/categories/面试题/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/tags/面试题/"},{"name":"JavaScript专题","slug":"JavaScript专题","permalink":"http://lingkeyu.com/tags/JavaScript专题/"}]},{"title":"面试题-JS专题(上)","slug":"面试题-JS专题(上)","date":"2018-06-20T03:45:52.000Z","updated":"2018-09-04T07:53:05.207Z","comments":true,"path":"2018/06/20/面试题-JS专题(上)/","link":"","permalink":"http://lingkeyu.com/2018/06/20/面试题-JS专题(上)/","excerpt":"介绍js的基本数据类型undefined、null、boolean、number、string js有哪些内置对象？ 数据封装类对象：Object、Array、Boolean、Number 和 String 其他对象：Function、Arguments、Math、Date、RegExp、Error","text":"介绍js的基本数据类型undefined、null、boolean、number、string js有哪些内置对象？ 数据封装类对象：Object、Array、Boolean、Number 和 String 其他对象：Function、Arguments、Math、Date、RegExp、Error this对象的理解 this总是指向函数的直接调用者（而非间接调用者）； 如果有new关键字，this指向new出来的那个对象； 在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window； eval是做什么的？它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’); DOM怎样添加、移除、移动、复制、创建和查找节点12345678910111213// 创建新节点createDocumentFragment() //创建一个DOM片段createElement() //创建一个具体的元素createTextNode() //创建一个文本节点// 添加、移除、替换、插入appendChild()removeChild()replaceChild()insertBefore() //在已有的子节点前插入一个新的子节点// 查找getElementsByTagName() //通过标签名称getElementsByName() //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)getElementById() //通过元素Id，唯一性 null和undefined的区别？ null 表示一个对象是“没有值”的值，也就是值为“空”； undefined 表示一个变量声明了没有初始化(赋值)； undefined不是一个有效的JSON，而null是； undefined的类型(typeof)是undefined； null的类型(typeof)是object； Javascript将未赋值的变量默认值设为undefined；Javascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。 typeof undefined //“undefined” undefined :是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined； 例如变量被声明了，但没有赋值时，就等于undefined typeof null //“object” null : 是一个对象(空对象, 没有任何属性和方法)； 例如作为函数的参数，表示该函数的参数不是对象； 注意： 在验证null时，一定要使用 === ，因为 == 无法分别 null 和 undefined null == undefined // true null === undefined // false null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。 undefined： （1）变量被声明了，但没有赋值时，就等于undefined。 （2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。 （3）对象没有赋值的属性，该属性的值为undefined。 （4）函数没有返回值时，默认返回undefined。 null： （1） 作为函数的参数，表示该函数的参数不是对象。 （2） 作为对象原型链的终点。 具体差别可查看这篇文章：http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html new操作符具体干了什么呢?-（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。-（2）属性和方法被加入到 this 引用的对象中。-（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。 JSON 的了解？JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’} call() 和 apply() 的区别和作用？apply()函数有两个参数：第一个参数是上下文，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。如：function.apply(this,[1,2,3]);call()的第一个参数是上下文，后续是实例传入的参数序列。如：function.call(this,1,2,3); 如何获取UA（用户代理）？123456function whatBrowser() &#123; document.Browser.Name.value=navigator.appName; document.Browser.Version.value=navigator.appVersion; document.Browser.Code.value=navigator.appCodeName; document.Browser.Agent.value=navigator.userAgent; &#125; navigator.userAgent 获取浏览器UA 说几条写JavaScript的基本规范？ 1.不要在同一行声明多个变量。 2.请使用 ===/!==来比较true/false或者数值 3.使用对象字面量替代new Array这种形式 4.不要使用全局函数。 5.Switch语句必须带有default分支 6.函数不应该有时候有返回值，有时候没有返回值。 7.For循环必须使用大括号 8.If语句必须使用大括号 9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。 JavaScript原型，原型链 ? 有什么特点？ （1）原型对象也是普通的对象，是对象一个自带隐式的 proto 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为null的话，我们就称之为原型链。 （2）原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链。 每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念。关系：instance.constructor.prototype = instance.proto 特点：JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。 12345678910function Func()&#123;&#125; Func.prototype.name = \"Sean\"; Func.prototype.getInfo = function() &#123; return this.name;&#125;var person = new Func();//现在可以参考var person = Object.create(oldObject);console.log(person.getInfo());//它拥有了Func的属性和方法//\"Sean\"console.log(Func.prototype);// Func &#123; name=\"Sean\", getInfo=function()&#125; JavaScript有几种类型的值？，你能画一下他们的内存图吗？ 栈：原始数据类型（Undefined，Null，Boolean，Number、String） 堆：引用数据类型（对象、数组和函数） 两种类型的区别是：存储位置不同； 原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储； 引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体 Flash、Ajax各自的优缺点，在使用中如何取舍？Flash适合处理多媒体、矢量图形、访问机器；对CSS、处理文本上不足，不容易被搜索。Ajax对CSS、文本支持很好，支持搜索；多媒体、矢量图形、机器访问不足。共同点：与服务器的无刷新传递消息、用户离线和在线状态、操作DOM 什么是闭包？为什么要用它？闭包的理解闭包，官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。 闭包的特点： （1）作为一个函数变量的一个引用，当函数返回时，其处于激活状态。 （2） 一个闭包就是当一个函数返回时，一个没有释放资源的栈区。 闭包的特性： 1.函数内再嵌套函数 2.内部函数可以引用外层的参数和变量 3.参数和变量不会被垃圾回收机制回收 简单的说，Javascript允许使用内部函数—即函数定义和函数表达式位于另一个函数的函数体内。而且，这些内部函数可以访问它们所在的外部函数中声明的所有局部变量、参数和声明的其他内部函数。当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包。 为什么要用闭包？1234567891011121314151617//li节点的onclick事件都能正确的弹出当前被点击的li索引 &lt;ul id=\"testUL\"&gt; &lt;li&gt; index = 0&lt;/li&gt; &lt;li&gt; index = 1&lt;/li&gt; &lt;li&gt; index = 2&lt;/li&gt; &lt;li&gt; index = 3&lt;/li&gt; &lt;/ul&gt; &lt;script type=\"text/javascript\"&gt; var nodes = document.getElementsByTagName(\"li\"); for(i = 0;i&lt;nodes.length;i+= 1)&#123; nodes[i].onclick = (function(i)&#123; return function() &#123; console.log(i); &#125; //不用闭包的话，值每次都是4 &#125;)(i); &#125; &lt;/script&gt; 执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源因为say667()的内部函数的执行需要依赖say667()中的变量这是对闭包作用的非常直白的描述 123456789101112function say667() &#123; // Local variable that ends up within closure var num = 666; var sayAlert = function() &#123; alert(num); &#125; num++; return sayAlert; &#125;var sayAlert = say667();sayAlert()//执行结果应该弹出的667 javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？ use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行, 使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。 默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值; 全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用； 消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同; 提高编译器效率，增加运行速度； 为未来新版本的Javascript标准化做铺垫。 Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？hasOwnProperty javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。 使用方法：object.hasOwnProperty(proName)其中参数object是必选项。一个对象的实例。proName是必选项。一个属性名称的字符串值。 如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。 js延迟加载的方式有哪些？defer和async、动态创建DOM方式（用得最多）、按需异步载入js javascript里面的继承怎么实现，如何避免原型链上面的对象共享用构造函数和原型链的混合模式去实现继承，避免对象共享可以参考经典的extend()函数，很多前端框架都有封装的，就是用一个空函数当做中间变量 ajax过程 (1)创建XMLHttpRequest对象,也就是创建一个异步调用对象. (2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息. (3)设置响应HTTP请求状态变化的函数. (4)发送HTTP请求. (5)获取异步调用返回的数据. (6)使用JavaScript和DOM实现局部刷新. Ajax 解决浏览器缓存问题？ 1、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(“If-Modified-Since”,”0”)。 2、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(“Cache-Control”,”no-cache”)。 3、在URL后面加上一个随机数： “fresh=” + Math.random();。 在URL后面加上时间戳：”nowtime=” + new Date().getTime();。 如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。 同步和异步的区别？同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性. 同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。 异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。 AMD和CMD的区别？ AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。 CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。 类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。 这些规范的目的都是为了 JavaScript 的模块化开发，特别是在浏览器端的。目前这些规范的实现都能达成浏览器端模块化开发的目的。 区别： 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. CMD 推崇依赖就近，AMD 推崇依赖前置。 123456789101112131415// CMDdefine(function(require, exports, module) &#123; var a = require('./a') a.doSomething() // 此处略去 100 行 var b = require('./b') // 依赖可以就近书写 b.doSomething() // ... &#125;)// AMD 默认推荐的是define(['./a', './b'], function(a, b) &#123; // 依赖必须一开始就写好 a.doSomething()// 此处略去 100 行 b.doSomething()&#125;) ajax不可避免的问题都有什么？如何解决呢？ （Q1）ajax以何种数据格式交换数据和跨域的问题如何解决 （Q2）这两大问题，都有不同的解决方案，但是最被推崇的就是用JSON来传数据，靠JSONP来跨域 你有哪些性能优化的方法？ （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。 （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数 （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。 （4） 当需要设置的样式很多时设置className而不是直接操作style。 （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。 （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。 （7） 图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳。什么叫优雅降级和渐进增强？优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效. 渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。 哪些常见操作会造成内存泄漏？内存泄漏：指任何对象在您不再拥有或需要它之后仍然存在。 垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。 setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。 闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？ ###【http 请求阶段】； 浏览器首先会把url发送给DNS服务器；解析出一个服务器的IP地址； DNS 服务器会根据IP找到对应的服务器，（服务器需要联网） 3.服务器接收到请求；客户端和服务器已经产生了连接； 【http的响应阶段】 4.服务器接收到请求后，会根据你的传过来的地址，路径，等找到相应的项目； 5.在服务器找到之后，服务器立即把一些响应信息放在响应头中，通过http发送给客户端；同时，进行数据的整理； 6.把整理出来的数据，通过http发送给客户端；直到客户端数据接收完毕； 【浏览器渲染阶段】 7.浏览器拿到从服务器传输过来的数据文件； 8.首先会遍历HTML，形成DOM树； 9.代码从上到下解析，形成css树； 10.DOM树和cSS树，重新组合成render树； 11.浏览器进行描绘和渲染； 从浏览器发送请求开始，并通过http把数据传输给服务器，服务器通过http把数据返回给客户端，这样一个闭合的过程称为一个http事物； 框架 ：组件化开发 、虚拟DOM；操作的不是真实的DOMjquery : 真实的DOM。性能慢，比较低； 用户体验 ：http的三次握手和四次挥手：浏览器在给服务器传输数据之间，有三次握手，握成功之后，才可以传输数据； 三次握手 浏览器需要先发送SYN码，客户端请求和服务器建立连接； 服务器接收到SYN码，再发送给客户端ACK码，我可以建立连接； 客户端接收到ACK码，验证这个ACK是否正确，如果正确，则客户端和服务器就建立起数据连接；双方的数据发送通道都将开启； 四次挥手： 1.当客户端把数据都发送给服务器，没有数据再传输给服务器，那么会发送一个FIN码 2.当服务器接收客户端数据完毕之后，告诉给客户端，给客户端发送AC码，你可以把数据通道关闭； 当服务器发送完毕之后，也会发送FIN码，告诉浏览器，数据发送完毕 4.当客户端接收完毕之后，同样发送ACK码，告诉服务器，数据接收完毕，你可以进行关闭； 优点： 确保数据的安全性； 确保数据的完整性； 响应头：服务器会告诉浏览器数据的长度；浏览器接收的数据长度和响应头数据长度相同，说明数据已经接收完毕； 如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为『12,000,000.11』?1234567 function commafy(num)&#123; return num &amp;&amp; num .toString() .replace(/(\\d)(?=(\\d&#123;3&#125;)+\\.)/g, function($1, $2)&#123; return $2 + ','; &#125;);&#125; 如何实现数组的随机排序？1234567891011121314151617181920212223242526272829303132方法一： var arr = [1,2,3,4,5,6,7,8,9,10]; function randSort1(arr)&#123; for(var i = 0,len = arr.length;i &lt; len; i++ )&#123; var rand = parseInt(Math.random()*len); var temp = arr[rand]; arr[rand] = arr[i]; arr[i] = temp; &#125; return arr; &#125; console.log(randSort1(arr)); 方法二： var arr = [1,2,3,4,5,6,7,8,9,10]; function randSort2(arr)&#123; var mixedArray = []; while(arr.length &gt; 0)&#123; var randomIndex = parseInt(Math.random()*arr.length); mixedArray.push(arr[randomIndex]); arr.splice(randomIndex, 1); &#125; return mixedArray; &#125; console.log(randSort2(arr)); 方法三： var arr = [1,2,3,4,5,6,7,8,9,10]; arr.sort(function()&#123; return Math.random() - 0.5; &#125;) console.log(arr); Javascript如何实现继承？继承方式原型式继承核心：将父类的实例作为子类的原型。 123SubType.prototype = newSuperType() // 所有涉及到原型链继承的继承方式都要修改子类构造函数的指向，否则子类实例的构造函数会指向SuperType。SubType.prototype.constructor = SubType; 优点：父类方法可以复用。缺点： 父类的引用属性会被所有子类实例共享 子类构建实例时不能向父类传递参数 构造函数继承核心：将父类构造函数的内容复制给了子类的构造函数。这是所有继承中唯一一个不涉及到prototype的继承。 1SuperType.call(SubType); 优点：和原型链继承完全反过来 父类的引用属性不会被共享 子类构建实例时可以向父类传递参数 缺点：父类的方法不能复用，子类实例的方法每次都是单独创建的。组合继承核心：原型式继承和构造函数继承的组合，兼具了二者的优点。 12345678910111213functionSuperType() &#123; this.name = 'parent';this.arr = [1, 2, 3];&#125;SuperType.prototype.say = function() &#123; console.log('this is parent')&#125;functionSubType() &#123;SuperType.call(this) // 第二次调用SuperType&#125;SubType.prototype = newSuperType() // 第一次调用SuperType 优点： 父类的方法可以被复用 父类的引用属性不会被共享 子类构建实例时可以向父类传递参数 缺点：调用了两次父类的构造函数，第一次给子类的原型添加了父类的name, arr属性，第二次又给子类的构造函数添加了父类的name, arr属性，从而覆盖了子类原型中的同名参数。这种被覆盖的情况造成了性能上的浪费。 原型式继承核心：原型式继承的object方法本质上是对参数对象的一个浅复制。 1234567891011121314151617functionobject(o)&#123; function F()&#123;&#125; F.prototype = o;return new F();&#125;var person = &#123; name: \"Nicholas\", friends: [\"Shelby\", \"Court\", \"Van\"]&#125;;var anotherPerson = object(person);anotherPerson.name = \"Greg\";anotherPerson.friends.push(\"Rob\");var yetAnotherPerson = object(person);yetAnotherPerson.name = \"Linda\";yetAnotherPerson.friends.push(\"Barbie\");alert(person.friends); //\"Shelby,Court,Van,Rob,Barbie\" ECMAScript 5 通过新增 Object.create()方法规范化了原型式继承。这个方法接收两个参数:一 个用作新对象原型的对象和(可选的)一个为新对象定义额外属性的对象。在传入一个参数的情况下， Object.create()与 object()方法的行为相同。——《JAVASCript高级编程》 所以上文中代码可以转变为： 12var yetAnotherPerson = object(person); =&gt; var yetAnotherPerson = Object.create(person); 优点：父类方法可以复用。缺点： 父类的引用属性会被所有子类实例共享 子类构建实例时不能向父类传递参数 寄生式继承核心：使用原型式继承获得一个目标对象的浅复制，然后增强这个浅复制的能力。 优缺点：仅提供一种思路，没什么优点。1234567891011121314151617function createAnother(original)&#123; var clone = object(original); //通过调用函数创建一个新对象 clone.sayHi = function()&#123; //以某种方式来增强这个对象 alert(\"hi\");&#125;; return clone; //返回这个对象&#125;var person = &#123; name: \"Nicholas\", friends: [\"Shelby\", \"Court\", \"Van\"]&#125;;var anotherPerson = createAnother(person);anotherPerson.sayHi(); //\"hi\" 寄生组合继承刚才说到组合继承有一个会两次调用父类的构造函数造成浪费的缺点，寄生组合继承就可以解决这个问题。 123456789101112131415161718192021222324function inheritPrototype(subType, superType)&#123; var prototype = object(superType.prototype); // 创建了父类原型的浅复制 prototype.constructor = subType; // 修正原型的构造函数 subType.prototype = prototype; // 将子类的原型替换为这个原型&#125;function SuperType(name)&#123; this.name = name; this.colors = [\"red\", \"blue\", \"green\"];&#125;SuperType.prototype.sayName = function()&#123; alert(this.name);&#125;;function SubType(name, age)&#123; SuperType.call(this, name); this.age = age;&#125;// 核心：因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费inheritPrototype(SubType, SuperType);SubType.prototype.sayAge = function()&#123; alert(this.age);&#125; 优缺点：这是一种完美的继承方式。ES6的类继承核心： ES6继承的结果和寄生组合继承相似，本质上，ES6继承是一种语法糖。但是，寄生组合继承是先创建子类实例this对象，然后再对其增强；而ES6先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。 123456class A &#123;&#125;class B extends A &#123; constructor() &#123; super(); &#125;&#125; ES6实现继承的具体原理： 12345678910class A &#123;&#125;class B &#123;&#125;Object.setPrototypeOf = function(obj, proto) &#123; obj.__proto__ = proto;return obj;&#125;// B 的实例继承 A 的实例Object.setPrototypeOf(B.prototype, A.prototype);// B 继承 A 的静态属性Object.setPrototypeOf(B, A); ES6继承与ES5继承的异同：相同点：本质上ES6继承是ES5继承的语法糖。不同点： ES6继承中子类的构造函数的原型链指向父类的构造函数，ES5中使用的是构造函数复制，没有原型链指向。 ES6子类实例的构建，基于父类实例，ES5中不是。 总结 ES6 Class extends是ES5继承的语法糖 JS的继承除了构造函数继承之外都基于原型链构建的 可以用寄生组合继承实现ES6 Class extends，但是还是会有细微的差别 javascript创建对象的几种方式？javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。 1、对象字面量的方式1person=&#123;firstname:\"Mark\",lastname:\"Yun\",age:25,eyecolor:\"black\"&#125;; 2、用function来模拟无参的构造函数12345678function Person()&#123;&#125; var person=new Person();//定义一个function，如果使用new\"实例化\",该function可以看作是一个Class person.name=\"Mark\"; person.age=\"25\"; person.work=function()&#123; alert(person.name+\" hello...\");&#125;person.work(); 3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）12345678910function Pet(name,age,hobby)&#123; this.name=name;//this作用域：当前对象 this.age=age; this.hobby=hobby; this.eat=function()&#123; alert(\"我叫\"+this.name+\",我喜欢\"+this.hobby+\",是个程序员\"); &#125;&#125;var maidou =new Pet(\"麦兜\",25,\"coding\");//实例化、创建对象maidou.eat();//调用eat方法 4、用工厂方式来创建（内置对象）1234567var wcDog =new Object(); wcDog.name=\"旺财\"; wcDog.age=3; wcDog.work=function()&#123; alert(\"我是\"+wcDog.name+\",汪汪汪......\"); &#125;wcDog.work(); 5、用原型方式来创建1234567function Dog()&#123;&#125;Dog.prototype.name=\"旺财\";Dog.prototype.eat=function()&#123; alert(this.name+\"是个吃货\");&#125;var wangcai =new Dog();wangcai.eat(); 6、用混合方式来创建123456789function Car(name,price)&#123; this.name=name; this.price=price;&#125;Car.prototype.sell=function()&#123; alert(\"我是\"+this.name+\"，我现在卖\"+this.price+\"万元\");&#125;var camry =new Car(\"凯美瑞\",27); camry.sell(); 什么是window对象? 什么是document对象? window对象是指浏览器打开的窗口。 document对象是Documentd对象（HTML 文档对象）的一个只读引用，window对象的一个属性。 写一个通用的事件侦听器函数。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677// event(事件)工具集，来源：github.com/markyun markyun.Event = &#123; // 页面加载完成后 readyEvent : function(fn) &#123; if (fn==null) &#123; fn=document; &#125; var oldonload = window.onload; if (typeof window.onload != 'function') &#123; window.onload = fn; &#125; else &#123; window.onload = function() &#123; oldonload(); fn(); &#125;; &#125; &#125;, // 视能力分别使用dom0||dom2||IE方式 来绑定事件 // 参数： 操作的元素,事件名称 ,事件处理程序 addEvent : function(element, type, handler) &#123; if (element.addEventListener) &#123; //事件类型、需要执行的函数、是否捕捉 element.addEventListener(type, handler, false); &#125; else if (element.attachEvent) &#123; element.attachEvent('on' + type, function() &#123; handler.call(element); &#125;); &#125; else &#123; element['on' + type] = handler; &#125; &#125;, // 移除事件 removeEvent : function(element, type, handler) &#123; if (element.removeEventListener) &#123; element.removeEventListener(type, handler, false); &#125; else if (element.datachEvent) &#123; element.detachEvent('on' + type, handler); &#125; else &#123; element['on' + type] = null; &#125; &#125;, // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获) stopPropagation : function(ev) &#123; if (ev.stopPropagation) &#123; ev.stopPropagation(); &#125; else &#123; ev.cancelBubble = true; &#125; &#125;, // 取消事件的默认行为 preventDefault : function(event) &#123; if (event.preventDefault) &#123; event.preventDefault(); &#125; else &#123; event.returnValue = false; &#125; &#125;, // 获取事件目标 getTarget : function(event) &#123; return event.target || event.srcElement; &#125;, // 获取event对象的引用，取到事件的所有信息，确保随时能使用event； getEvent : function(e) &#123; var ev = e || window.event; if (!ev) &#123; var c = this.getEvent.caller; while (c) &#123; ev = c.arguments[0]; if (ev &amp;&amp; Event == ev.constructor) &#123; break; &#125; c = c.caller; &#125; &#125; return ev; &#125; &#125;; [“1”, “2”, “3”].map(parseInt) 答案是多少？123456789101112parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)， 其中 radix 表示要解析的数字的基数。【该值介于 2 ~ 36 之间，并且字符串中的数字不能大于radix才能正确返回数字结果值】; 但此处 map 传了 3 个 (element, index, array),我们重写parseInt函数测试一下是否符合上面的规则。 function parseInt(str, radix) &#123; return str+'-'+radix; &#125;; var a=[\"1\", \"2\", \"3\"]; a.map(parseInt); // [\"1-0\", \"2-1\", \"3-2\"] 不能大于radix 因为二进制里面，没有数字3,导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN 所以[\"1\", \"2\", \"3\"].map(parseInt) 答案也就是：[1, NaN, NaN] 事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？ 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件； ev.stopPropagation();(旧ie的方法 ev.cancelBubble = true;)","categories":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/categories/面试题/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/tags/面试题/"},{"name":"JavaScript专题","slug":"JavaScript专题","permalink":"http://lingkeyu.com/tags/JavaScript专题/"}]},{"title":"面试题-算法专题","slug":"面试题-算法专题","date":"2018-05-18T15:48:17.000Z","updated":"2018-09-02T05:20:32.396Z","comments":true,"path":"2018/05/18/面试题-算法专题/","link":"","permalink":"http://lingkeyu.com/2018/05/18/面试题-算法专题/","excerpt":"阐述下 JavaScript 中的变量提升所谓提升，顾名思义即是 JavaScript 会将所有的声明提升到当前作用域的顶部。这也就意味着我们可以在某个变量声明前就使用该变量，不过虽然 JavaScript 会将声明提升到顶部，但是并不会执行真的初始化过程。","text":"阐述下 JavaScript 中的变量提升所谓提升，顾名思义即是 JavaScript 会将所有的声明提升到当前作用域的顶部。这也就意味着我们可以在某个变量声明前就使用该变量，不过虽然 JavaScript 会将声明提升到顶部，但是并不会执行真的初始化过程。 阐述下 use strict; 的作用use strict; 顾名思义也就是 JavaScript 会在所谓严格模式下执行，其一个主要的优势在于能够强制开发者避免使用未声明的变量。对于老版本的浏览器或者执行引擎则会自动忽略该指令。 1234567// Example of strict mode\"use strict\";catchThemAll();function catchThemAll() &#123; x = 3.14; // Error will be thrown return x * x;&#125; 解释下什么是 Event Bubbling 以及如何避免Event Bubbling 即指某个事件不仅会触发当前元素，还会以嵌套顺序传递到父元素中。直观而言就是对于某个子元素的点击事件同样会被父元素的点击事件处理器捕获。避免 Event Bubbling 的方式可以使用event.stopPropagation() 或者 IE 9 以下使用event.cancelBubble。 == 与 === 的区别是什么=== 也就是所谓的严格比较，关键的区别在于=== 会同时比较类型与值，而不是仅比较值。 12345// Example of comparators0 == false; // true0 === false; // false2 == '2'; // true2 === '2'; // false 解释下 null 与 undefined 的区别JavaScript 中，null 是一个可以被分配的值，设置为 null 的变量意味着其无值。而 undefined 则代表着某个变量虽然声明了但是尚未进行过任何赋值。 解释下 原型继承 与 类继承 的区别在类继承中，类是不可变的，不同的语言中对于多继承的支持也不一样，有些语言中还支持接口、final、abstract 的概念。而原型继承则更为灵活，原型本身是可以可变的，并且对象可能继承自多个原型。 数组找出整型数组中乘积最大的三个数给定一个包含整数的无序数组，要求找出乘积最大的三个数。 12345678910111213141516171819var unsorted_array = [-10, 7, 29, 30, 5, -10, -70];computeProduct(unsorted_array); // 21000function sortIntegers(a, b) &#123; return a - b;&#125;// greatest product is either (min1 * min2 * max1 || max1 * max2 * max3)function computeProduct(unsorted) &#123; var sorted_array = unsorted.sort(sortIntegers), product1 = 1, product2 = 1, array_n_element = sorted_array.length - 1; // Get the product of three largest integers in sorted array for (var x = array_n_element; x &gt; array_n_element - 3; x--) &#123; product1 = product1 * sorted_array[x]; &#125; product2 = sorted_array[0] * sorted_array[1] * sorted_array[array_n_element]; if (product1 &gt; product2) return product1; return product2&#125;; 寻找连续数组中的缺失数给定某无序数组，其包含了 n 个连续数字中的 n – 1 个，已知上下边界，要求以O(n)的复杂度找出缺失的数字。 1234567891011121314151617181920// The output of the function should be 8var array_of_integers = [2, 5, 1, 4, 9, 6, 3, 7];var upper_bound = 9;var lower_bound = 1;findMissingNumber(array_of_integers, upper_bound, lower_bound); //8function findMissingNumber(array_of_integers, upper_bound, lower_bound) &#123; // Iterate through array to find the sum of the numbers var sum_of_integers = 0; for (var i = 0; i &lt; array_of_integers.length; i++) &#123; sum_of_integers += array_of_integers[i]; &#125; // 以高斯求和公式计算理论上的数组和 // Formula: [(N * (N + 1)) / 2] - [(M * (M - 1)) / 2]; // N is the upper bound and M is the lower bound upper_limit_sum = (upper_bound * (upper_bound + 1)) / 2; lower_limit_sum = (lower_bound * (lower_bound - 1)) / 2; theoretical_sum = upper_limit_sum - lower_limit_sum; // return (theoretical_sum - sum_of_integers)&#125; 数组去重给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。 123456789101112131415161718// ES6 Implementationvar array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];Array.from(new Set(array)); // [1, 2, 3, 5, 9, 8]// ES5 Implementationvar array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];uniqueArray(array); // [1, 2, 3, 5, 9, 8]function uniqueArray(array) &#123; var hashmap = &#123;&#125;; var unique = []; for(var i = 0; i &lt; array.length; i++) &#123; // If key returns null (unique), it is evaluated as false. if(!hashmap.hasOwnProperty([array[i]])) &#123; hashmap[array[i]] = 1; unique.push(array[i]); &#125; &#125; return unique;&#125; 数组中元素最大差值计算给定某无序数组，求取任意两个元素之间的最大差值，注意，这里要求差值计算中较小的元素下标必须小于较大元素的下标。譬如[7, 8, 4, 9, 9, 15, 3, 1, 10]这个数组的计算值是 11( 15 – 4 ) 而不是 14(15 – 1)，因为 15 的下标小于 1。 1234567891011121314151617181920212223var array = [7, 8, 4, 9, 9, 15, 3, 1, 10];// [7, 8, 4, 9, 9, 15, 3, 1, 10] would return `11` based on the difference between `4` and `15`// Notice: It is not `14` from the difference between `15` and `1` because 15 comes before 1.findLargestDifference(array);function findLargestDifference(array) &#123; // 如果数组仅有一个元素，则直接返回 -1 if (array.length &lt;= 1) return -1; // current_min 指向当前的最小值 var current_min = array[0]; var current_max_difference = 0; // 遍历整个数组以求取当前最大差值，如果发现某个最大差值，则将新的值覆盖 current_max_difference // 同时也会追踪当前数组中的最小值，从而保证 `largest value in future` - `smallest value before it` for (var i = 1; i &lt; array.length; i++) &#123; if (array[i] &gt; current_min &amp;&amp; (array[i] - current_min &gt; current_max_difference)) &#123; current_max_difference = array[i] - current_min; &#125; else if (array[i] &lt;= current_min) &#123; current_min = array[i]; &#125; &#125; // If negative or 0, there is no largest difference if (current_max_difference &lt;= 0) return -1; return current_max_difference;&#125; 数组中元素乘积给定某无序数组，要求返回新数组 output ，其中 output[i] 为原数组中除了下标为 i 的元素之外的元素乘积，要求以 O(n) 复杂度实现： 123456789101112131415161718192021222324252627var firstArray = [2, 2, 4, 1];var secondArray = [0, 0, 0, 2];var thirdArray = [-2, -2, -3, 2];productExceptSelf(firstArray); // [8, 8, 4, 16]productExceptSelf(secondArray); // [0, 0, 0, 0]productExceptSelf(thirdArray); // [12, 12, 8, -12]function productExceptSelf(numArray) &#123; var product = 1; var size = numArray.length; var output = []; // From first array: [1, 2, 4, 16] // The last number in this case is already in the right spot (allows for us) // to just multiply by 1 in the next step. // This step essentially gets the product to the left of the index at index + 1 for (var x = 0; x &lt; size; x++) &#123; output.push(product); product = product * numArray[x]; &#125; // From the back, we multiply the current output element (which represents the product // on the left of the index, and multiplies it by the product on the right of the element) var product = 1; for (var i = size - 1; i &gt; -1; i--) &#123; output[i] = output[i] * product; product = product * numArray[i]; &#125; return output;&#125; 数组交集给定两个数组，要求求出两个数组的交集，注意，交集中的元素应该是唯一的。 12345678910111213141516171819202122var firstArray = [2, 2, 4, 1];var secondArray = [1, 2, 0, 2];intersection(firstArray, secondArray); // [2, 1]function intersection(firstArray, secondArray) &#123; // The logic here is to create a hashmap with the elements of the firstArray as the keys. // After that, you can use the hashmap's O(1) look up time to check if the element exists in the hash // If it does exist, add that element to the new array. var hashmap = &#123;&#125;; var intersectionArray = []; firstArray.forEach(function(element) &#123; hashmap[element] = 1; &#125;); // Since we only want to push unique elements in our case... we can implement a counter to keep track of what we already added secondArray.forEach(function(element) &#123; if (hashmap[element] === 1) &#123; intersectionArray.push(element); hashmap[element]++; &#125; &#125;); return intersectionArray; // Time complexity O(n), Space complexity O(n)&#125; 字符串颠倒字符串给定某个字符串，要求将其中单词倒转之后然后输出，譬如”Welcome to this Javascript Guide!” 应该输出为 “emocleW ot siht tpircsavaJ !ediuG”。 12345678var string = \"Welcome to this Javascript Guide!\";// Output becomes !ediuG tpircsavaJ siht ot emocleWvar reverseEntireSentence = reverseBySeparator(string, \"\");// Output becomes emocleW ot siht tpircsavaJ !ediuGvar reverseEachWord = reverseBySeparator(reverseEntireSentence, \" \");function reverseBySeparator(string, separator) &#123; return string.split(separator).reverse().join(separator);&#125; 乱序同字母字符串给定两个字符串，判断是否颠倒字母而成的字符串，譬如Mary与Army就是同字母而顺序颠倒： 123456789101112var firstWord = \"Mary\";var secondWord = \"Army\";isAnagram(firstWord, secondWord); // truefunction isAnagram(first, second) &#123; // For case insensitivity, change both words to lowercase. var a = first.toLowerCase(); var b = second.toLowerCase(); // Sort the strings, and join the resulting array to a string. Compare the results a = a.split(\"\").sort().join(\"\"); b = b.split(\"\").sort().join(\"\"); return a === b;&#125; 会问字符串判断某个字符串是否为回文字符串，譬如racecar与race car都是回文字符串： 12345678isPalindrome(\"racecar\"); // trueisPalindrome(\"race Car\"); // truefunction isPalindrome(word) &#123; // Replace all non-letter chars with \"\" and change to lowercase var lettersOnly = word.toLowerCase().replace(/\\s/g, \"\"); // Compare the string with the reversed version of the string return lettersOnly === lettersOnly.split(\"\").reverse().join(\"\");&#125; 栈与队列使用两个栈实现入队与出队123456789101112131415161718var inputStack = []; // First stackvar outputStack = []; // Second stack// For enqueue, just push the item into the first stackfunction enqueue(stackInput, item) &#123; return stackInput.push(item);&#125;function dequeue(stackInput, stackOutput) &#123; // Reverse the stack such that the first element of the output stack is the // last element of the input stack. After that, pop the top of the output to // get the first element that was ever pushed into the input stack if (stackOutput.length &lt;= 0) &#123; while(stackInput.length &gt; 0) &#123; var elementToOutput = stackInput.pop(); stackOutput.push(elementToOutput); &#125; &#125; return stackOutput.pop();&#125; 判断大括号是否闭合创建一个函数来判断给定的表达式中的大括号是否闭合： 1234567891011121314151617181920212223242526var expression = \"&#123;&#123;&#125;&#125;&#123;&#125;&#123;&#125;\"var expressionFalse = \"&#123;&#125;&#123;&#123;&#125;\";isBalanced(expression); // trueisBalanced(expressionFalse); // falseisBalanced(\"\"); // truefunction isBalanced(expression) &#123; var checkString = expression; var stack = []; // If empty, parentheses are technically balanced if (checkString.length &lt;= 0) return true; for (var i = 0; i &lt; checkString.length; i++) &#123; if(checkString[i] === '&#123;') &#123; stack.push(checkString[i]); &#125; else if (checkString[i] === '&#125;') &#123; // Pop on an empty array is undefined if (stack.length &gt; 0) &#123; stack.pop(); &#125; else &#123; return false; &#125; &#125; &#125; // If the array is not empty, it is not balanced if (stack.pop()) return false; return true;&#125; 递归二进制转换通过某个递归函数将输入的数字转化为二进制字符串： 123456789101112131415161718decimalToBinary(3); // 11decimalToBinary(8); // 1000decimalToBinary(1000); // 1111101000function decimalToBinary(digit) &#123; if(digit &gt;= 1) &#123; // If digit is not divisible by 2 then recursively return proceeding // binary of the digit minus 1, 1 is added for the leftover 1 digit if (digit % 2) &#123; return decimalToBinary((digit - 1) / 2) + 1; &#125; else &#123; // Recursively return proceeding binary digits return decimalToBinary(digit / 2) + 0; &#125; &#125; else &#123; // Exit condition return ''; &#125;&#125; 二分搜索123456789101112function recursiveBinarySearch(array, value, leftPosition, rightPosition) &#123; // Value DNE if (leftPosition &gt; rightPosition) return -1; var middlePivot = Math.floor((leftPosition + rightPosition) / 2); if (array[middlePivot] === value) &#123; return middlePivot; &#125; else if (array[middlePivot] &gt; value) &#123; return recursiveBinarySearch(array, value, leftPosition, middlePivot - 1); &#125; else &#123; return recursiveBinarySearch(array, value, middlePivot + 1, rightPosition); &#125;&#125; 数字判断是否为 2 的指数值123456789101112131415161718192021isPowerOfTwo(4); // trueisPowerOfTwo(64); // trueisPowerOfTwo(1); // trueisPowerOfTwo(0); // falseisPowerOfTwo(-1); // false// For the non-zero case:function isPowerOfTwo(number) &#123; // `&amp;` uses the bitwise n. // In the case of number = 4; the expression would be identical to: // `return (4 &amp; 3 === 0)` // In bitwise, 4 is 100, and 3 is 011. Using &amp;, if two values at the same // spot is 1, then result is 1, else 0. In this case, it would return 000, // and thus, 4 satisfies are expression. // In turn, if the expression is `return (5 &amp; 4 === 0)`, it would be false // since it returns 101 &amp; 100 = 100 (NOT === 0) return number &amp; (number - 1) === 0;&#125;// For zero-case:function isPowerOfTwoZeroCase(number) &#123; return (number !== 0) &amp;&amp; ((number &amp; (number - 1)) === 0);&#125;","categories":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/categories/面试题/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"http://lingkeyu.com/tags/面试题/"},{"name":"算法","slug":"算法","permalink":"http://lingkeyu.com/tags/算法/"}]},{"title":"Vue学习笔记(三)-vue实例的生命周期","slug":"Vue学习笔记(三)-生命周期","date":"2018-04-02T15:02:01.000Z","updated":"2018-09-01T13:04:13.918Z","comments":true,"path":"2018/04/02/Vue学习笔记(三)-生命周期/","link":"","permalink":"http://lingkeyu.com/2018/04/02/Vue学习笔记(三)-生命周期/","excerpt":"Vue学习笔记(三)vue实例的生命周期 什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！ 生命周期钩子：就是生命周期事件的别名而已； 生命周期钩子 = 生命周期函数 = 生命周期事件","text":"Vue学习笔记(三)vue实例的生命周期 什么是生命周期：从Vue实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为生命周期！ 生命周期钩子：就是生命周期事件的别名而已； 生命周期钩子 = 生命周期函数 = 生命周期事件 主要的生命周期函数分类： 创建期间的生命周期函数： beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性 created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板 beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中 mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示 运行期间的生命周期函数： beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点 updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！ 销毁期间的生命周期函数： beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。 destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 vue-resource 实现 get, post, jsonp请求除了 vue-resource 之外，还可以使用 axios 的第三方包实现实现数据的请求 之前的学习中，如何发起数据请求？ 常见的数据请求类型？ get post jsonp 测试的URL请求资源地址： get请求地址： http://vue.studyit.io/api/getlunbo post请求地址：http://vue.studyit.io/api/post jsonp请求地址：http://vue.studyit.io/api/jsonp JSONP的实现原理 由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全； 可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式，称作JSONP（注意：根据JSONP的实现原理，知晓，JSONP只支持Get请求）； 具体实现过程： 先在客户端定义一个回调方法，预定义对数据的操作； 再把这个回调方法的名称，通过URL传参的形式，提交到服务器的数据接口； 服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行； 客户端拿到服务器返回的字符串之后，当作Script脚本去解析执行，这样就能够拿到JSONP的数据了； 带大家通过 Node.js ，来手动实现一个JSONP的请求例子； 12345678910111213141516171819202122232425262728293031323334const http = require('http'); // 导入解析 URL 地址的核心模块 const urlModule = require('url'); const server = http.createServer(); // 监听 服务器的 request 请求事件，处理每个请求 server.on('request', (req, res) =&gt; &#123; const url = req.url; // 解析客户端请求的URL地址 var info = urlModule.parse(url, true); // 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据 if (info.pathname === '/getjsonp') &#123; // 获取客户端指定的回调函数的名称 var cbName = info.query.callback; // 手动拼接要返回给客户端的数据对象 var data = &#123; name: 'zs', age: 22, gender: '男', hobby: ['吃饭', '睡觉', '运动'] &#125; // 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法： var result = `$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)`; // 将拼接好的方法的调用，返回给客户端去解析执行 res.end(result); &#125; else &#123; res.end('404'); &#125; &#125;); server.listen(3000, () =&gt; &#123; console.log('server running at http://127.0.0.1:3000'); &#125;); 123456789105. vue-resource 的配置步骤： + 直接在页面中，通过`script`标签，引入 `vue-resource` 的脚本文件； + 注意：引用的先后顺序是：先引用 `Vue` 的脚本文件，再引用 `vue-resource` 的脚本文件；6. 发送get请求：```javascriptgetInfo() &#123; // get 方式获取数据 this.$http.get('http://127.0.0.1:8899/api/getlunbo').then(res =&gt; &#123; console.log(res.body); &#125;)&#125; 发送post请求： 12345678910postInfo() &#123; var url = 'http://127.0.0.1:8899/api/post'; // post 方法接收三个参数： // 参数1： 要请求的URL地址 // 参数2： 要发送的数据对象 // 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded this.$http.post(url, &#123; name: 'zs' &#125;, &#123; emulateJSON: true &#125;).then(res =&gt; &#123; console.log(res.body); &#125;);&#125; 发送JSONP请求获取数据： 123456jsonpInfo() &#123; // JSONP形式从服务器获取数据 var url = 'http://127.0.0.1:8899/api/jsonp'; this.$http.jsonp(url).then(res =&gt; &#123; console.log(res.body); &#125;);&#125; 在2.x版本中手动实现筛选的方式： 筛选框绑定到 VM 实例中的 searchName 属性： 1234&lt;hr&gt; 输入筛选名称：&lt;input type=\"text\" v-model=\"searchName\"&gt; 在使用 v-for 指令循环每一行数据的时候，不再直接 item in list，而是 in 一个 过滤的methods 方法，同时，把过滤条件searchName传递进去： 1234567891011121314151617181920&lt;tbody&gt; &lt;tr v-for=\"item in search(searchName)\"&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;a href=\"#\" @click.prevent=\"del(item.id)\"&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; search 过滤方法中，使用 数组的 filter 方法进行过滤： 12345678910search(name) &#123; return this.list.filter(x =&gt; &#123; return x.name.indexOf(name) != -1; &#125;);&#125; Vue调试工具vue-devtools的安装步骤和使用Vue.js devtools - 翻墙安装方式 - 推荐 过滤器概念：Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示； 私有过滤器 HTML元素： 12&lt;td&gt;&#123;&#123;item.ctime | dataFormat('yyyy-mm-dd')&#125;&#125;&lt;/td&gt; 私有 filters 定义方式： 1234567891011121314151617181920212223242526272829303132333435363738394041424344filters: &#123; // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用 dataFormat(input, pattern = \"\") &#123; // 在参数列表中 通过 pattern=\"\" 来指定形参默认值，防止报错 var dt = new Date(input); // 获取年月日 var y = dt.getFullYear(); var m = (dt.getMonth() + 1).toString().padStart(2, '0'); var d = dt.getDate().toString().padStart(2, '0'); // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日 // 否则，就返回 年-月-日 时：分：秒 if (pattern.toLowerCase() === 'yyyy-mm-dd') &#123; return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`; &#125; else &#123; // 获取时分秒 var hh = dt.getHours().toString().padStart(2, '0'); var mm = dt.getMinutes().toString().padStart(2, '0'); var ss = dt.getSeconds().toString().padStart(2, '0'); return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`; &#125; &#125; &#125; 使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串；","categories":[{"name":"vue","slug":"vue","permalink":"http://lingkeyu.com/categories/vue/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"前端学习","slug":"前端学习","permalink":"http://lingkeyu.com/tags/前端学习/"},{"name":"基础知识","slug":"基础知识","permalink":"http://lingkeyu.com/tags/基础知识/"},{"name":"vue 知识","slug":"vue-知识","permalink":"http://lingkeyu.com/tags/vue-知识/"}]},{"title":"Vue学习笔记(二)","slug":"vue学习笔记(二)","date":"2018-03-26T13:22:41.000Z","updated":"2018-09-01T13:05:18.975Z","comments":true,"path":"2018/03/26/vue学习笔记(二)/","link":"","permalink":"http://lingkeyu.com/2018/03/26/vue学习笔记(二)/","excerpt":"Vue学习笔记(二)Vue调试工具vue-devtools的安装步骤和使用Vue.js devtools - 翻墙安装方式 - 推荐","text":"Vue学习笔记(二)Vue调试工具vue-devtools的安装步骤和使用Vue.js devtools - 翻墙安装方式 - 推荐 过滤器概念：Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示； 私有过滤器 HTML元素： 12&lt;td&gt;&#123;&#123;item.ctime | dataFormat('yyyy-mm-dd')&#125;&#125;&lt;/td&gt; 私有 filters 定义方式： 1234567891011121314151617181920212223242526272829303132333435363738394041424344filters: &#123; // 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用 dataFormat(input, pattern = \"\") &#123; // 在参数列表中 通过 pattern=\"\" 来指定形参默认值，防止报错 var dt = new Date(input); // 获取年月日 var y = dt.getFullYear(); var m = (dt.getMonth() + 1).toString().padStart(2, '0'); var d = dt.getDate().toString().padStart(2, '0'); // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日 // 否则，就返回 年-月-日 时：分：秒 if (pattern.toLowerCase() === 'yyyy-mm-dd') &#123; return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`; &#125; else &#123; // 获取时分秒 var hh = dt.getHours().toString().padStart(2, '0'); var mm = dt.getMinutes().toString().padStart(2, '0'); var ss = dt.getSeconds().toString().padStart(2, '0'); return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`; &#125; &#125; &#125; 使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString=’’) 或 String.prototype.padEnd(maxLength, fillString=’’)来填充字符串； 全局过滤器123456789101112131415161718192021222324252627282930313233343536373839404142// 定义一个全局过滤器Vue.filter('dataFormat', function (input, pattern = '') &#123; var dt = new Date(input); // 获取年月日 var y = dt.getFullYear(); var m = (dt.getMonth() + 1).toString().padStart(2, '0'); var d = dt.getDate().toString().padStart(2, '0'); // 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日 // 否则，就返回 年-月-日 时：分：秒 if (pattern.toLowerCase() === 'yyyy-mm-dd') &#123; return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125;`; &#125; else &#123; // 获取时分秒 var hh = dt.getHours().toString().padStart(2, '0'); var mm = dt.getMinutes().toString().padStart(2, '0'); var ss = dt.getSeconds().toString().padStart(2, '0'); return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`; &#125;&#125;); 注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！ 键盘修饰符以及自定义键盘修饰符1.x中自定义键盘修饰符【了解即可】12Vue.directive('on').keyCodes.f2 = 113; 2.x中自定义键盘修饰符 通过Vue.config.keyCodes.名称 = 按键值来自定义案件修饰符的别名： 12Vue.config.keyCodes.f2 = 113; 使用自定义的按键修饰符： 12&lt;input type=\"text\" v-model=\"name\" @keyup.f2=\"add\"&gt; 自定义指令 自定义全局和局部的 自定义指令： 123456789101112131415161718192021222324252627282930313233343536// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：Vue.directive('focus', &#123; inserted: function (el) &#123; // inserted 表示被绑定元素插入父节点时调用 el.focus(); &#125;&#125;);// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细： directives: &#123; color: &#123; // 为元素设置指定的字体颜色 bind(el, binding) &#123; el.style.color = binding.value; &#125; &#125;, 'font-weight': function (el, binding2) &#123; // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数 el.style.fontWeight = binding2.value; &#125; &#125; 自定义指令的使用方式： 12&lt;input type=\"text\" v-model=\"searchName\" v-focus v-color=\"'red'\" v-font-weight=\"900\"&gt; Vue 1.x 中 自定义元素指令【已废弃,了解即可】12345Vue.elementDirective('red-color', &#123; bind: function () &#123; this.el.style.color = 'red'; &#125;&#125;); 使用方式：1&lt;red-color&gt;1232&lt;/red-color&gt; 相关文章 vue.js 1.x 文档 vue.js 2.x 文档 String.prototype.padStart(maxLength, fillString) js 里面的键盘事件对应的键码 Vue.js双向绑定的实现原理","categories":[{"name":"vue","slug":"vue","permalink":"http://lingkeyu.com/categories/vue/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"前端学习","slug":"前端学习","permalink":"http://lingkeyu.com/tags/前端学习/"},{"name":"基础知识","slug":"基础知识","permalink":"http://lingkeyu.com/tags/基础知识/"},{"name":"vue 知识","slug":"vue-知识","permalink":"http://lingkeyu.com/tags/vue-知识/"}]},{"title":"Vue学习笔记(一)","slug":"vue学习笔记(一)","date":"2018-03-17T03:02:31.000Z","updated":"2018-09-01T13:04:20.906Z","comments":true,"path":"2018/03/17/vue学习笔记(一)/","link":"","permalink":"http://lingkeyu.com/2018/03/17/vue学习笔记(一)/","excerpt":"Vue学习笔记(一)什么是Vue.js Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex） Vue.js 是前端的主流框架之一，和Angular.js、React.js 一起，并成为前端三大主流框架！","text":"Vue学习笔记(一)什么是Vue.js Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex） Vue.js 是前端的主流框架之一，和Angular.js、React.js 一起，并成为前端三大主流框架！ Vue.js 是一套构建用户界面的框架，只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发） 前端的主要工作？主要负责MVC中的V这一层；主要工作就是和界面打交道，来制作前端页面效果； 为什么要学习流行框架 企业为了提高开发效率：在企业中，时间就是效率，效率就是金钱； 企业中，使用框架，能够提高开发的效率； 提高开发效率的发展历程：原生JS -&gt; Jquery之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】） 在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑； 框架和库的区别 框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。 node 中的 express； 库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。 从Jquery 切换到 Zepto 从 EJS 切换到 art-template Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别 MVC 是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于 视图层分离，也就是说：MVVM把前端的视图层，分为了 三部分 Model, View , VM ViewModel 为什么有了MVC还要有MVVM Vue.js 基本代码 和 MVVM 之间的对应关系Vue之 - 基本的代码结构和插值表达式、v-cloakVue指令之v-text和v-htmlVue指令之v-bind的三种用法 直接使用指令v-bind 使用简化指令: 在绑定的时候，拼接绑定内容：:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot; Vue指令之v-on和跑马灯效果跑马灯效果 HTML结构： 12345678910&lt;div id=\"app\"&gt; &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;/p&gt; &lt;input type=\"button\" value=\"开启\" v-on:click=\"go\"&gt; &lt;input type=\"button\" value=\"停止\" v-on:click=\"stop\"&gt; &lt;/div&gt; Vue实例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546// 创建 Vue 实例，得到 ViewModel var vm = new Vue(&#123; el: '#app', data: &#123; info: 'vue轻便 易上手~！', intervalId: null &#125;, methods: &#123; go() &#123; // 如果当前有定时器在运行，则直接return if (this.intervalId != null) &#123; return; &#125; // 开始定时器 this.intervalId = setInterval(() =&gt; &#123; this.info = this.info.substring(1) + this.info.substring(0, 1); &#125;, 500); &#125;, stop() &#123; clearInterval(this.intervalId); &#125; &#125; &#125;); Vue指令之v-on的缩写和事件修饰符事件修饰符： .stop 阻止冒泡 .prevent 阻止默认事件 .capture 添加事件侦听器时使用事件捕获模式 .self 只当事件在该元素本身（比如不是子元素）触发时触发回调 .once 事件只触发一次 Vue指令之v-model和双向数据绑定简易计算器案例 HTML 代码结构 123456789101112131415161718192021222324&lt;div id=\"app\"&gt; &lt;input type=\"text\" v-model=\"n1\"&gt; &lt;select v-model=\"opt\"&gt; &lt;option value=\"0\"&gt;+&lt;/option&gt; &lt;option value=\"1\"&gt;-&lt;/option&gt; &lt;option value=\"2\"&gt;*&lt;/option&gt; &lt;option value=\"3\"&gt;÷&lt;/option&gt; &lt;/select&gt; &lt;input type=\"text\" v-model=\"n2\"&gt; &lt;input type=\"button\" value=\"=\" v-on:click=\"getResult\"&gt; &lt;input type=\"text\" v-model=\"result\"&gt;&lt;/div&gt; Vue实例代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556// 创建 Vue 实例，得到 ViewModel var vm = new Vue(&#123; el: '#app', data: &#123; n1: 0, n2: 0, result: 0, opt: '0' &#125;, methods: &#123; getResult() &#123; switch (this.opt) &#123; case '0': this.result = parseInt(this.n1) + parseInt(this.n2); break; case '1': this.result = parseInt(this.n1) - parseInt(this.n2); break; case '2': this.result = parseInt(this.n1) * parseInt(this.n2); break; case '3': this.result = parseInt(this.n1) / parseInt(this.n2); break; &#125; &#125; &#125; &#125;); 在Vue中使用样式使用class样式 数组 1&lt;h1 :class=\"['red', 'thin']\"&gt;这是一个邪恶的H1&lt;/h1&gt; 数组中使用三元表达式 1&lt;h1 :class=\"['red', 'thin', isactive?'active':'']\"&gt;这是一个邪恶的H1&lt;/h1&gt; 数组中嵌套对象 1&lt;h1 :class=\"['red', 'thin', &#123;'active': isactive&#125;]\"&gt;这是一个邪恶的H1&lt;/h1&gt; 直接使用对象 1&lt;h1 :class=\"&#123;red:true, italic:true, active:true, thin:true&#125;\"&gt;这是一个邪恶的H1&lt;/h1&gt; 使用内联样式 直接在元素上通过 :style 的形式，书写样式对象 1&lt;h1 :style=\"&#123;color: 'red', 'font-size': '40px'&#125;\"&gt;这是一个善良的H1&lt;/h1&gt; 将样式对象，定义到 data 中，并直接引用到 :style 中 在data上定义样式： 123data: &#123; h1StyleObj: &#123; color: 'red', 'font-size': '40px', 'font-weight': '200' &#125;&#125; 在元素中，通过属性绑定的形式，将样式对象应用到元素中： 1&lt;h1 :style=\"h1StyleObj\"&gt;这是一个善良的H1&lt;/h1&gt; 在 :style 中通过数组，引用多个 data 上的样式对象 在data上定义样式： 1234data: &#123; h1StyleObj: &#123; color: 'red', 'font-size': '40px', 'font-weight': '200' &#125;, h1StyleObj2: &#123; fontStyle: 'italic' &#125;&#125; 在元素中，通过属性绑定的形式，将样式对象应用到元素中： 1&lt;h1 :style=\"[h1StyleObj, h1StyleObj2]\"&gt;这是一个善良的H1&lt;/h1&gt; Vue指令之v-for和key属性 迭代数组 123&lt;ul&gt; &lt;li v-for=\"(item, i) in list\"&gt;索引：&#123;&#123;i&#125;&#125; --- 姓名：&#123;&#123;item.name&#125;&#125; --- 年龄：&#123;&#123;item.age&#125;&#125;&lt;/li&gt;&lt;/ul&gt; 迭代对象中的属性 1234&lt;!-- 循环遍历对象身上的属性 --&gt; &lt;div v-for=\"(val, key, i) in userInfo\"&gt;&#123;&#123;val&#125;&#125; --- &#123;&#123;key&#125;&#125; --- &#123;&#123;i&#125;&#125;&lt;/div&gt; 迭代数字 12&lt;p v-for=\"i in 10\"&gt;这是第 &#123;&#123;i&#125;&#125; 个P标签&lt;/p&gt; 2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。 当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。 为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。 Vue指令之v-if和v-show 一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。 1.x 版本中的filterBy指令，在2.x中已经被废除： filterBy - 指令 12345678910111213141516&lt;tr v-for=\"item in list | filterBy searchName in 'name'\"&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;a href=\"#\" @click.prevent=\"del(item.id)\"&gt;删除&lt;/a&gt; &lt;/td&gt;&lt;/tr&gt; 在2.x版本中手动实现筛选的方式： 筛选框绑定到 VM 实例中的 searchName 属性： 1234&lt;hr&gt; 输入筛选名称：&lt;input type=\"text\" v-model=\"searchName\"&gt; 在使用 v-for 指令循环每一行数据的时候，不再直接 item in list，而是 in 一个 过滤的methods 方法，同时，把过滤条件searchName传递进去： 1234567891011121314151617181920&lt;tbody&gt; &lt;tr v-for=\"item in search(searchName)\"&gt; &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123;item.ctime&#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;a href=\"#\" @click.prevent=\"del(item.id)\"&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; search 过滤方法中，使用 数组的 filter 方法进行过滤： 12345678910search(name) &#123; return this.list.filter(x =&gt; &#123; return x.name.indexOf(name) != -1; &#125;);&#125;","categories":[{"name":"vue","slug":"vue","permalink":"http://lingkeyu.com/categories/vue/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"前端学习","slug":"前端学习","permalink":"http://lingkeyu.com/tags/前端学习/"},{"name":"基础知识","slug":"基础知识","permalink":"http://lingkeyu.com/tags/基础知识/"},{"name":"vue 知识","slug":"vue-知识","permalink":"http://lingkeyu.com/tags/vue-知识/"}]},{"title":"工作中需要掌握的Git命令","slug":"工作中需要掌握的Git命令","date":"2018-01-23T15:22:11.000Z","updated":"2018-09-01T13:04:47.816Z","comments":true,"path":"2018/01/23/工作中需要掌握的Git命令/","link":"","permalink":"http://lingkeyu.com/2018/01/23/工作中需要掌握的Git命令/","excerpt":"工作中需要掌握的Git命令","text":"工作中需要掌握的Git命令 初始化配置 #配置使用git仓库的人员姓名 git config –global user.name “Your Name Comes Here” #配置使用git仓库的人员email git config –global user.email you@yourdomain.example.com #配置到缓存 默认15分钟 git config –global credential.helper cache #修改缓存时间 git config –global credential.helper ‘cache –timeout=3600’ git config –global color.ui true git config –global alias.co checkout git config –global alias.ci commit git config –global alias.st status git config –global alias.br branch git config –global core.editor “mate -w” # #### 设置Editor使用textmate git config -1 #列举所有配置 #用户的git配置文件~/.gitconfig 查看、添加、提交、删除、找回，重置修改文件 git help # 显示command的help git show # 显示某次提交的内容 git show $id git co – # 抛弃工作区修改 git co . # 抛弃工作区修改 git add # 将工作文件修改提交到本地暂存区 git add . # 将所有修改过的工作文件提交暂存区 git rm # 从版本库中删除文件 git rm –cached # 从版本库中删除文件，但不删除文件 git reset # 从暂存区恢复到工作文件 git reset – . # 从暂存区恢复到工作文件 git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 git ci git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做 git ci -am “some comments” git ci –amend # 修改最后一次提交记录 git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象 git revert HEAD # 恢复最后一次提交的状态 查看文件diff git diff # 比较当前文件和暂存区文件差异 git diff git diff &lt;$id1&gt; &lt;$id2&gt; # 比较两次提交之间的差异 git diff .. # 在两个分支之间比较 git diff –staged # 比较暂存区和版本库差异 git diff –cached # 比较暂存区和版本库差异 git diff –stat # 仅仅比较统计信息查看提交记录 git log git log # 查看该文件每次提交记录 git log -p # 查看每次详细修改内容的diff git log -p -2 # 查看最近两次详细修改内容的diff git log –stat #查看提交统计信息tigMac上可以使用tig代替diff和log，brew install tig 取得Git仓库 #初始化一个版本仓库 git init #Clone远程版本库 git clone git@xbc.me:wordpress.git #添加远程版本库origin，语法为 git remote add [shortname] [url] git remote add origin git@xbc.me:wordpress.git #查看远程仓库 git remote -v提交你的修改 #添加当前修改的文件到暂存区 git add . #如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件 git add -u #提交你的修改 git commit –m “你的注释” #推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支] git push origin master #查看文件状态 git status #跟踪新文件 git add readme.txt #从当前跟踪列表移除文件，并完全删除 git rm readme.txt #仅在暂存区删除，保留文件在当前目录，不再跟踪 git rm –cached readme.txt #重命名文件 git mv reademe.txt readme #查看提交的历史记录 git log #修改最后一次提交注释的，利用–amend参数 git commit –amend #忘记提交某些修改，下面的三条命令只会得到一个提交。 git commit –m &quot;add readme.txt&quot; git add readme_forgotten git commit –amend #假设你已经使用git add .，将修改过的文件a、b加到暂存区 #现在你只想提交a文件，不想提交b文件，应该这样 git reset HEAD b #取消对文件的修改 git checkout –- readme.txt查看、切换、创建和删除分支 git br -r # 查看远程分支 git br &lt;new_branch&gt; # 创建新的分支 git br -v # 查看各个分支最后提交信息 git br –merged # 查看已经被合并到当前分支的分支 git br –no-merged # 查看尚未被合并到当前分支的分支 git co # 切换到某个分支 git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去 git co -b &lt;new_branch&gt; # 基于branch创建新的new_branch git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除 git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支 git br -d # 删除某个分支 git br -D # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) 分支合并和rebase git merge # 将branch分支合并到当前分支 git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交 git rebase master # 将master rebase到branch，相当于： git co &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge Git补丁管理(方便在多台机器上开发同步时用) git diff &gt; ../sync.patch # 生成补丁 git apply ../sync.patch # 打补丁 git apply –check ../sync.patch #测试补丁能否成功Git暂存管理 git stash # 暂存 git stash list # 列所有stash git stash apply # 恢复暂存的内容 git stash drop # 删除暂存区 Git远程分支管理 git pull # 抓取远程仓库所有分支更新并合并到本地 git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并 git fetch origin # 抓取远程仓库更新 git merge origin/master # 将远程主分支合并到本地当前分支 git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支 git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上 git push # push所有分支 git push origin master # 将本地主分支推到远程主分支 git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库) git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名 git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支 git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d )，然后再push删除远程分支基本的分支管理 #创建一个分支 git branch dev #切换工作目录到dev git chekcout dev #将上面的命令合在一起，创建dev分支并切换到dev git chekcout –b dev #合并dev分支，当前工作目录为master git merge dev #合并完成后，没有出现冲突，删除dev分支 git branch –d dev #拉去远程仓库的数据，语法为 git fetch [remote-name] git fetch #fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并 git pull #查看远程仓库的信息 git remote show origin #建立本地的dev分支追踪远程仓库的develop分支 git checkout –b dev origin/developGit远程仓库管理 git remote -v # 查看远程服务器地址和仓库名称 git remote show origin # 查看远程服务器仓库状态 git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址 git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库创建远程仓库 git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库 scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上 mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库 git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址 git push -u origin master # 客户端首次提交 git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track git remote set-head origin master # 设置远程仓库的HEAD指向master分支也可以命令设置跟踪远程库和本地库 git branch –set-upstream master origin/master git branch –set-upstream develop origin/develop","categories":[{"name":"Git","slug":"Git","permalink":"http://lingkeyu.com/categories/Git/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"Git","slug":"Git","permalink":"http://lingkeyu.com/tags/Git/"},{"name":"工作","slug":"工作","permalink":"http://lingkeyu.com/tags/工作/"}]},{"title":"个人知识总结(三)","slug":"个人知识总结(三)","date":"2017-08-20T12:12:41.000Z","updated":"2018-09-01T13:04:33.967Z","comments":true,"path":"2017/08/20/个人知识总结(三)/","link":"","permalink":"http://lingkeyu.com/2017/08/20/个人知识总结(三)/","excerpt":"个人知识总结(三)设计模式 - 单例模式模块化开发 把一个项目按照页面或者功能分割成不同的任务,交给项目中不同的成员开发.开发结束之后将代码合并到一起. 多人协作开发的问题: 变量名 函数名 冲突 为了防止全局变量污染: 闭包但是闭包并不完美,所以选择搭配设计模式来进一步进行项目开发","text":"个人知识总结(三)设计模式 - 单例模式模块化开发 把一个项目按照页面或者功能分割成不同的任务,交给项目中不同的成员开发.开发结束之后将代码合并到一起. 多人协作开发的问题: 变量名 函数名 冲突 为了防止全局变量污染: 闭包但是闭包并不完美,所以选择搭配设计模式来进一步进行项目开发 单例模式 表现形式 : 就是一个对象 : { name : xxx , age : function(){} }; 定义 : 把描述同一功能的属性和方法放到一个对象[命名空间] 在设计模式当中,这个person不仅仅是一个对象名,还是一个命名空间,多个命名空间是相互独立的,互不干扰 好处 : 不受全局变量的污染和干扰.并且可以相互调用方法 由来 : 单例模式的本质就是一个对象 , 它object类上的一个实例,实例与实例之间互不干扰,叫做单独的实例,简称 “单例” 高级单例模式 定义 : 在高级单例模式当中,我们不只会把一个对象赋值给一个命名空间,我们会让它先执行一个自执行函数, [就形成了一个闭包,一个不销毁的作用域] 在自执行函数中,返回一个对象给这个命名空间 好处 : 可以在私有的作用于当中,创建很多属性和方法,仅需要把我们使用的属性和方法暴露在这个对象当中即可 工厂模式 把实现同一功能的代码放进一个函数,当实现类似功能时,只需要执行这个函数即可,传参数不同即可,减少代码的冗余,&quot;高内聚 , 低耦合&quot; –&gt; 函数的封装 面向对象 oop / op : 面向对象缩写 , 面向对象思想 定义 : 面向类的封装继承和多态 , 通过简单的实例化,调用其它方法和属性 JS 就是通过面向对象的思想设计开发出来的 需要了解 对象 类 实例 对象 : 万物皆对象,多为一种泛指,可以是任何物体 类 : 对象中具有同一属性和特征的集合, 类又分为大类和小类 实例 : 就是类中的一个具体的细分我们研究当前实例具有哪些属性和方法,那么证明当前类中的其他实例也同样具有 JS中的内置类 JS中的任何数据类型都是它所属的类,除了null 和 undefined Number , String , Boolean , Object , Array , RegExp , Function , Date … div -&gt; HTMLDIVElement-&gt;HTML document –&gt; HTMLDocument -&gt; Document(getElementById) getElementById只在document的原型上,普通元素对象上不存在这个属性 类的首字母都是大写 类的执行通过new来执行 Object 对象类 , 被称为 基类, 在任何数据类型都可以通过__proto__[原型链] 找到基类 Object 内置类的原型只能新增, 不能用新的地址覆盖 创建类 字面量方式 实例化方式 引用数据类型方式创建 var ary = new Arry (“1”) 构造函数 定义 : 当一个函数通过new关键字来执行的时候,这个函数就不是普通函数了,它是一个构造函数,也是一个自定义类,当前的函数名就是类名,这个函数的返回值就是类的实例 为了让构造函数和普通函数有一个区别,我们建议写构造函数的时候首字母大写[类名] 注意 : 一般情况下 ,我们写业务逻辑的时候不会用到构造函数.但是在封装库,框架,插件以及组件的时候会用到构造函数模式 构造函数执行的时候,如果没有参数的时候,小括号可以不用写 let person = new Person 普通函数 和 构造函数的区别 不同点 : 构造函数运行时，形成作用域之后，在代码运行之前，首先会给当前作用域初始化一个对象；并且让当前作用域下的this指向当前这个空对象；当代码运行结束，构造函数把函数体中this返回； 构造函数如果不需要实参 , 可以省略执行的小括号; 构造函数中的this 指向当前的实例 在构造函数中.return一个基本类型值,对实例没有任何影响如果return出一个引用数据类型值,那么会把默认return的this给替换掉 instanceof检测当前实例是否属于某个类,如果属于返回true 不属于返回false in : 检测某个属性是否属于对象 ,如果属于返回true 不属于返回false 构造函数的执行过程 形成一个私有的作用域 形参赋值 变量提升 浏览器会创建一个对象 , [开辟一个新的堆内存] , 将这个对象指向了this [堆内存指针指向了this实例] 代码从上到下执行 判断当前构造函数是否有return ,如果没有return默认将实例返回,如果有return , [如果return的是基本数据类型,对实例没有影响; 如果是引用数据类型,那么实例就是该引用数据类型 构造函数中 : 建议不要轻易return引用数据类型私有属性 在构造函数中,给this添加属性值和方法,都属于当前实例的私有属性公有属性 当前实例通过__proto__找到所有的属性和方法都是属于当前实例的公有属性 实例想要调取公有属性,直接可以调取,底层就是通过__proto__去找这个属性 用 in 这种方式来判断, 当前属性名[公有属性 + 私有属性] 是否属于这个对象 console.log(&quot;hasOwnProperty&quot; in person1); Object 类提供一个hasOwnProperty,这个方法判断当前属性是否是该实例的私有属性: 返回值是布尔值 console.log(person1.hasOwnProperty(&quot;age&quot;)) //trueconsole.log(person1.hasOwnProperty(&quot;valueof&quot;)) //false 自己封装一个方法,判断当前属性是否是当前实例的一个公有属性hasPubProperty 1234567891011121314151617181920person1.__proto__.hasPubProperty = function()&#123; //console.log(1); //判断参数值是否是当前实例的一个属性 //判断是否是当前实例的一个私有属性,且取反 return str in this &amp;&amp; this.hasOwnProperty(str) 或者 /* if (str in this)&#123; if(!this.hasOwnProperty(str))&#123; return true &#125;else&#123; return false &#125;else&#123; return false &#125; &#125;*/ &#125;person1.hasPubProperty(\"a\") 如果是公有属性返回true；如果不是返回false； 原型检测属性封装function hasPublicProperty(obj,attr) { // attr 是obj的一个属性并且不是私有的； /*if(attr in obj){ if(!obj.hasOwnProperty(attr)){ return true; } }else{ return false; } return false;*/ 或者 return attr in obj &amp;&amp; !obj.hasOwnProperty(attr); } console.log(hasPublicProperty(obj, &quot;toString&quot;)); JS中的函数 普通函数 , 类(自定义类和内置类) , 函数类的实例 对象 普通对象(对象数据类型) 构造函数new出来的一个实例 也是一个对象 类上面的原型也是一个对象 函数也是一个对象 学习原型模式需要记住三句话 所有的函数数据类型( 函数 , 类 )都天生自带一个属性,叫做prototype(原型) , 它是一个对象 ,既然是对象 , 那就是一个堆内存 所有函数的原型上面(都是开辟的这个堆内存), 都天生自带一个属性,叫做constructor(构造函数) , 它指向当前类本身 所有的对象都天生自带一个属性__proto__, 它指向当前所属类的原型 函数有prototype(原型) __proto__; 12345678910111213function People(name)&#123; let age = 9; this.name = name; this.age = age; &#125; People.prototype.say = function () &#123; console.log(this); &#125;; let person1 = new People('xiaihua'); let person2 = new People('xiaoming'); //person1属于People类 //__proto__指向类People的原型prototype console.log(person1.__proto__ == People.prototype);//true 原型链 定义 : 一个实例要找属性 , 优先会去找自己的私有属性 , 如有自己的私有属性没有 , 那就通过__ proto__找到自己所属类的原型上的公有属性,如果公有属性还没有,继续通过__proto__找到自己的所属类的原型知道Object[基类]的原型上,一直找到基类还没有的话,直接返回undefined Object类和Function类 Function类: 所有的类都是通过函数的方式来创建 , 由此可以得知, 所有的类(包括基类Object)都是函数类的一个实例 判断一个实例是否属于一个类: instanceofconsole.log(Number instanceof Function); //trueconsole.log(String instanceof Function); //trueconsole.log(Object instanceof Function); //true constructor : 通过实例来调用这个方法,指向当前类本身 万物皆对象, js 中的任何数据类型都可以通过proto","categories":[{"name":"javascript","slug":"javascript","permalink":"http://lingkeyu.com/categories/javascript/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"前端学习","slug":"前端学习","permalink":"http://lingkeyu.com/tags/前端学习/"},{"name":"基础知识","slug":"基础知识","permalink":"http://lingkeyu.com/tags/基础知识/"}]},{"title":"个人知识总结(二)","slug":"个人知识总结(二)","date":"2017-08-17T06:52:41.000Z","updated":"2018-09-01T13:04:27.398Z","comments":true,"path":"2017/08/17/个人知识总结(二)/","link":"","permalink":"http://lingkeyu.com/2017/08/17/个人知识总结(二)/","excerpt":"个人知识总结(二)变量提升https://blog.csdn.net/zjy_android_blog/article/details/80863425https://blog.csdn.net/longwenjunjie/article/details/48163293 变量提升：在作用域形成之后代码执行之前，将所有的带var和function关键字的变量提前声明或定义 js可以在浏览器中运行 是因为浏览器给js 提供了赖以生存的环境,这个环境就是作用域 var：只是提前声明 ; 默认值为undefined function：既声明又定义 debugger : 断点","text":"个人知识总结(二)变量提升https://blog.csdn.net/zjy_android_blog/article/details/80863425https://blog.csdn.net/longwenjunjie/article/details/48163293 变量提升：在作用域形成之后代码执行之前，将所有的带var和function关键字的变量提前声明或定义 js可以在浏览器中运行 是因为浏览器给js 提供了赖以生存的环境,这个环境就是作用域 var：只是提前声明 ; 默认值为undefined function：既声明又定义 debugger : 断点 形成作用域 – 变量提升 — 代码从上到下运行 变量提升特殊情况 不管条件是否成立,都要进行变量提升 条件判断中的函数,在条件判断之前,带var 和 带function 都只声明不定义, 当条件成立之后,第一件事,就是给函数赋值,条件不成立,判断体就不执行,结合了es6 块级作用域 如果不带var 直接赋值就相当于给window直接添加了一个属性且给它赋值 带var 就相当于在全局作用域下增加了一个属性,还给全局对象window增加了一个属性 注意 : 带var的可以不赋值,但是也相当于给全局对象window增加了一个属性, 不带var的必须要赋值,否则会去全局对象window下找这个值 如果没有就报错 用逗号分隔的表示连var ; var a = 1, b = 2, c = 3; 用分号来分隔,前面带var的属于变量 ,不带var的相当于给全局对象window增加了一个属性var a = 1; b =2 ; c = 3; var a = b = c = 1; 连等 带var的是一个变量 ,其他的不带var 就相当于给全局window 增加了属性 变量提升只发生在=左边 return 后面的的内容不进行变量提升但是下面的代码要进行变量提升 12345678910 function f3()&#123; console.log(f4()); console.log(f2); return function f2()&#123; //return 后面的的内容不进行变量 提升但是下面的代码要进行变量提升 &#125;function f4()&#123; console.log(f3); &#125;&#125;f3() 1234var a = [1];b = a;b[1] = \"a\"; // b = [1,\"a\"]console.log(a); //[1,\"a\"] 变量名重复: 不再进行声明,但要重新定义 匿名函数不进行变量提升 函数当作参数的时候,不进行变量提升 自执行函数不会进行变量提升 Let const 不进行变量提升 函数的定义与执行 定义三步 : 开辟新的堆内存 存储字符串 返回内存空间地址 函数执行: 首先形成一个私有作用域,, 开辟一个栈内存 形参赋值 变量提升 代码从上到下执行 作用域是否销毁 对象的定义 开辟一个空间地址 , 堆内存 把键值对存储到堆内存下 把空间地址赋值给对象名 1234console.log (fn); // f()console.log(f); //undefinedfunction fn()&#123;&#125; //函数声明式var f = function()&#123;&#125; //函数表达式---&gt; 箭头函数 1234567 console.log (fn); // f() console.log(f); //undefined console.log(fn()) //undefined 没有return 执行了两次函数 function fn()&#123; console.log(f);&#125; //函数声明式 var f = function()&#123;&#125; 12console.log (f2) //f2 未定义 报错var f = function f2 ()&#123;&#125; 12console.log (f2) //f2 未定义 报错setTimeout (function f2 ()&#123;&#125;,2000) //函数当作参数的时候,不进行变量提升 - 123456789101112131415161718console.log(f); //函数体 function f() &#123; console.log(1); &#125; f() //88 function f() &#123; console.log(2); &#125; function f() &#123; console.log(3); &#125; f() // 88 f= 99; function f() &#123; console.log(88); &#125; f()// f is not a function; console.log(f); ES6的let和constvar与ES6中const、let声明的变量的区别https://blog.csdn.net/qq_22855325/article/details/72843456 Let 不能和函数重名 const 声明的变量,如果值是基本数据类型,那么不可以进行数据修改,如果是引用数据类型值,就可以操作引用地址,不可以替换引用地址 Let虽然不会进行变量提升,但是会先检查当前作用域下是否有重复命名 12345var a = 2; if (\" a \" in window)&#123; console,log(a); //暂时性死区,即在块级作用域下,不能提前拿到let声明的变量, let a = 1;&#125; 123for ( let i= 0 ;i &lt;10; i++)&#123; //for 循环形成的保护机制&#125;console.log(i); // let 报错 块级作用域 外界无法访问 查找上一级的作用域1. 在当前作用域下输出变量值时,首先观察是否是私有变量 如何判断一个变量是私有的 当前变量有没有被Var 过和 function 过 形参也是私有变量 2. 如果变量不是私有的,就向上一级作用域查找 上一级作用域判断函数在哪定义的,函数上一级的作用域就是谁,跟函数执行没有任何关系 但获取变量值时.首先看是否是私有变量,如过不是就向上一级作用域查找,一级一级向上,直到window为止,如果window也没有,那么就会报错,这样一级一级向上查找作用域就是作用域链. 堆内存的销毁形成两个虚拟内存 : 栈 堆 栈内存 : 作用域;引用数据类型在JS 中的{ } [ ] 都是开辟一个新的空间地址谷歌浏览器 : 每隔一段时间,自动检查占用并是否销毁火狐和IE :采用的计数的规则 , 当堆内存地址被占用一次时,计数+1 ,否则 -1 ,如果是被占用0次 ,就回收 私有作用域的销毁 函数的执行 : 形成一个私有的作用域,提供代码运行环境,存储基本数据类型 闭包 : 保护里面的私有变量不受外界干扰 存储值 保存机制 : 当前私有作用域中,有引用数据类型被外界所占用,导致当前作用域变成一个不销毁的作用域,里面的变量就成了不销毁的变量 一般情况下,函数执行完成后, 当前作用域就会销毁 函数每执行一次就会开辟一个新的私有作用域, 并且新的私有作用域和之前的作用域没有任何关系, 是两个不同的栈内存 不销毁的作用域 : 函数执行return出一个引用的数据类型的值 函数执行return 出的引用数据类型值并且被外界接收( 被占用 ) 堆内存 浏览器加载的时候,碰到引用数据类型,都会开辟一个新的内存空间,[对象 : 键值对 ,函数 : 代码字符串],给这个内存空间赋一个16进制内存地址,将这个内存地址指向声明的变量,这个内存空间就是堆内存 堆内存的释放,手动 null , [指向空指针] ; 浏览器判断该内存没有变量去接收它 ,就会释放 123456789function fn() &#123; var t = 10; return function () &#123; console.log(t) &#125; &#125;;var f = fn();f()f() 不立即销毁: 需要等到里面的小函数执行完成之后,那么外层作用域就会销毁 1234567function fn() &#123; var t = 10; return function () &#123; console.log(t) &#125; &#125;; fn()(); 123456789101112var i =0; function fn(i) &#123; // i =5 6 return function (n) &#123; console.log(n + i++); &#125; &#125;;var f = fn(5);f(10);// 15f(20);// 26fn(8)(12);// 20fn()(18)// NaN 123456789101112function fn ()&#123; var a = 1 ; return function ()&#123; a++; console.log(a); &#125;&#125;var f = fn();f(); //2fn()(); //2f(); //3 1234567891011121314var obj= &#123; i : 10, fn:(function () &#123; var i = 0; return function (n) &#123; console.log(n + i++) &#125; &#125;)() &#125;; var f = obj.fn; f(10);// 10 f(20);// 21 obj.fn(30);// 32 块级作用域 obj.fn(40);// 43 块级作用域for 循环中用let ,会形成父作用域；每循环一次，都会形成一个子作用域；在子作用域中会把当前的i进行保存 this 关键字在作用域下有特殊意义 函数中的this,指的就是函数的当前执行主体 在全局作用域下, this指向window; 函数体中的this,看函数执行前有没有”.” ; 如果有,那么点前面是谁,this就指向谁,如果没有” . “ ; 那么会指向window; 如果给元素的事件行为绑定方法,那么方法中的this,就会指向当前被绑定的那个元素 回调函数中this指向window(函数作为实参传进去) 自执行函数中的this永远都指向window forEach map 第二个参数可以修改this this是谁,和它在哪定义的以及在哪执行的没有任何关系 构造函数中的this 指向当前类的实例 call apply blind 可以改变this关键字 1234567891011121314151617181920212223242526272829function b() &#123; console.log(this); //window &#125; window.b(); var obj = &#123; num:1, fn : function () &#123; console.log(this); function m() &#123; console.log(this);// window; &#125; m() &#125; &#125; var f = obj.fn; f(); // window obj.fn();// obj var obj = &#123; num:1, f:&#123; num:2, fn:function () &#123; console.log(this);// obj.f &#125; &#125; &#125; obj.f.fn() 12345678910111213141516171.setInterval(function () &#123; console.log(this); // window &#125;,1000)2.(function () &#123; console.log(this); //window &#125;)()3.var obj = &#123; fn: (function () &#123; console.log(this); //window &#125;)() &#125; 12345678910111213141516var num =2;// 1 2 var obj = &#123; num : 0, fn : function () &#123; num = 1; // this--&gt;obj (function (num) &#123; // this --&gt; window ++this.num; num++; console.log(num)// 1 &#125;)(this.num)// 0 &#125; &#125; obj.fn(); console.log(window.num,obj.num) //2 0 this 重点练习题12345678910111213141516var num =2;// 1 2 var obj = &#123; num : 0, fn : function () &#123; num = 1; // this--&gt;obj (function (num) &#123; // this --&gt; window ++this.num; num++; console.log(num)// 1 &#125;)(this.num)// 0 &#125; &#125; obj.fn(); console.log(window.num,obj.num) //2 0","categories":[{"name":"javascript","slug":"javascript","permalink":"http://lingkeyu.com/categories/javascript/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"前端学习","slug":"前端学习","permalink":"http://lingkeyu.com/tags/前端学习/"},{"name":"基础知识","slug":"基础知识","permalink":"http://lingkeyu.com/tags/基础知识/"}]},{"title":"个人知识总结(一)","slug":"个人知识总结(一)","date":"2017-08-12T03:12:41.000Z","updated":"2018-09-01T13:04:40.579Z","comments":true,"path":"2017/08/12/个人知识总结(一)/","link":"","permalink":"http://lingkeyu.com/2017/08/12/个人知识总结(一)/","excerpt":"个人知识总结(一) webstorm : 代码编译器 浏览器 : 代码解析器; Git : 是一个工具; 用于团队协作开发项目管理代码的工具 svn : 集中式 需要一个中央服务器;每次开发前需要从中央服务器中把最新的代码拉取出来,然后进行开发,并且需要网络; Git : 分布式 每个人的电脑都是一个中央服务器","text":"个人知识总结(一) webstorm : 代码编译器 浏览器 : 代码解析器; Git : 是一个工具; 用于团队协作开发项目管理代码的工具 svn : 集中式 需要一个中央服务器;每次开发前需要从中央服务器中把最新的代码拉取出来,然后进行开发,并且需要网络; Git : 分布式 每个人的电脑都是一个中央服务器 Dos命令 按住shift 右键,打开powerShell 找到相应文件夹,直接输入cmd window + R : 输入cmd 切换此盘路径cd + 文件夹名字 : 打开相应路径cd .. / : 返回上一级cd / : 返回根目录cls : 清屏mkdir + 文件名 : 创建文件夹 Git配置Git用户名和密码 git config –global user.email “邮箱” git config –global user.name “用户名” git init : 初始化一个git 仓库git add . : 把文件添加到暂存区git add [文件名] 推送指定文件到暂存区git commit -m “注释” : 把代码提交到历史区 会生成一个版本号,可以根据版本号回到任何一次修改的位置git status : 查看文件状态;如果文件只存在本地,不在暂存区,那么颜色是红色,如果文件在缓存区,还没到历史区,那么颜色是绿色的本地代码—-&gt; 暂存区 —&gt; 历史区; git : 初始一个本地仓库gitHub : 是一个开源网站,可以供大家分享代码 插件和框架把本地的代码提交到远程仓库(gitHub)让本地仓库和远程仓库进行绑定 git remote add origin(仓库名) 远程仓库地址 : 将本地仓库和远程仓库建立连接git remote -v : 查看本地仓库和远程仓库关联状态git push origin(仓库名) master : 将历史区内容推送到远程仓库 master :主分支名 git config –list : 查看本地配置环境输入用户名和密码 推送过程(步骤)git initgit add .git statusgit commit -m “里面注释” git remote add origin(仓库名) 地址git remote -vgit push origin(仓库名) master 推送复原过程 拉取克隆过程(步骤)git clone 仓库地址 : 已经是一个git仓库, 且和远程仓库建立了连接 git pull origin master : 拉取远程仓库代码 作用域 作用域：代码执行的空间/环境 ===栈内存 浏览器的渲染机制 : 先形成一个DOM树和CSS树,最后两个树合成render树 全局作用域：打开浏览器就会形成的全局作用域 存储基本数据类型值 基本数据类型存储到栈内存中,全局作用域是最大的一个栈内存 window 是全局中最大的一个对象, 存储了大量内置属性 typeof window —&gt; object 私有作用域：一个函数执行就会形成一个私有作用域 关闭浏览器就销毁块作用域：ES6新增加的，除了私有作用域和对象以外被一个{}包起来的，eval(“({a:1})”)； 全局变量: 在全局作用域下定义的变量会给window 新增一个键值对 全局下定义的函数相当于给window新增键值对,属性名是函数,属性值整个函数 私有变量在函数体中被var,和function,const,let过 函数的形参也是私有变量 性能优化1234567891011121314151617181920212223242526272829301.-function fn() &#123; var total = 0; var len = arguments.length; // (var i=0;i&lt;arguments.length;i++) for(var i=0;i&lt;len;i++)&#123; var cur = arguments[i]; if(!isNaN(cur))&#123; // total += arguments[i]; total +=cur; &#125; &#125;2.- function fn()&#123;&#125;console.log(\"fn\" in window);//true//`fn`必须加引号 3.-var a,b,fn = function () &#123; var a= b =10; // ( var a= b =10; --&gt; var a=10;b = 10;) // a变成了局部变量无法修改外部,b成了全局变量,修改了外部 &#125; fn(); console.log(a,b);// undefined 10","categories":[{"name":"javascript","slug":"javascript","permalink":"http://lingkeyu.com/categories/javascript/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"前端学习","slug":"前端学习","permalink":"http://lingkeyu.com/tags/前端学习/"},{"name":"基础知识","slug":"基础知识","permalink":"http://lingkeyu.com/tags/基础知识/"}]},{"title":"秒懂JS中的盒模型~~","slug":"秒懂JS中的盒模型","date":"2017-07-23T11:32:41.000Z","updated":"2018-09-01T13:04:53.631Z","comments":true,"path":"2017/07/23/秒懂JS中的盒模型/","link":"","permalink":"http://lingkeyu.com/2017/07/23/秒懂JS中的盒模型/","excerpt":"首先要明白什么是JS盒子模型???JS盒模型 指的是通过JS中提供的一系列的属性和方法,获取页面中元素的样式信息值 #box(有很多自己的私有的属性) -&gt;HTMLDivElement.prototype -&gt;HTMLElement.prototype -&gt;Element.prototype -&gt;Node.prototype -&gt;EventTarget.prototype -&gt;Object.prototype var box = document.getElementById(“box”); console.dir(box);","text":"首先要明白什么是JS盒子模型???JS盒模型 指的是通过JS中提供的一系列的属性和方法,获取页面中元素的样式信息值 #box(有很多自己的私有的属性) -&gt;HTMLDivElement.prototype -&gt;HTMLElement.prototype -&gt;Element.prototype -&gt;Node.prototype -&gt;EventTarget.prototype -&gt;Object.prototype var box = document.getElementById(“box”); console.dir(box); 内容的宽度和高度:我们设置的width/height这两个样式就是内容的宽和高;如果没有设置height值,容器的高度会根据里面内容自己进行适应,这样获取的值就是真实内容的高;如果设置固定的高度了,不管内容是多了还是少了,其实我们内容的高度指的都是设定的那个值; 真实内容的宽度和高度:这个代指的是实际内容个的宽高(和我们设置的height没有必然的联系),例如:我设置高度为200px,如果内容有溢出,那么真实内容的高度是要把溢出内容的高度也要加进来的 12345678910111213141516171819202122232425262728293031323334351、client系列(当前元素的几个私有的属性) clientWidth/clientHeight:内容的宽度/高度+左右/上下填充 (和内容溢出没有关系) clientLeft:左边框的宽度 clientTop:上边框的高度 (border[Left/Top]Width) 2、offset系列 offsetWidth/offsetHeight:clientWidth/clientHeight+左右/上下边框 (和内容是否溢出也是没有任何的关系的) offsetParent:当前元素的父级参照物 offsetLeft/offsetTop:当前元素的外边框距离父级参照物的内边框的偏移量 3、scroll系列 scrollWidth/scrollHeight:和我们的clientWidth/clientHeight一模一样(前提是：容器中的内容没有溢出的情况下) 如果容器中的内容有溢出,我们获取的结果是如下规则: scrollWidth:真实内容的宽度(包含溢出)+左填充 scrollHeight:真实内容的高度(包含溢出)+上填充获取到的结果都是\"约等于\"的值,因为:同一个浏览器,我们是否设置overflow='hidden'对于最终的结果是有影响的;在不同的浏览器中我们获取到的结果也是不相同的; scrollLeft/scrollTop:滚动条卷去的宽度/高度 2、关于JS盒子模型属性取值的问题 我们通过这13个属性值获取的结果永远不可能出现小数,都是整数;浏览器获取结果的时候,在原来真实结果的基础上进行四舍五入; 3、关于操作浏览器本身的盒子模型信息 clientWidth/clientHeight是当前浏览器可视窗口的宽度和高度(一屏幕的宽度和高度) scrollWidth/scrollHeight是当前页面的真实宽度和高度(所有屏加起来的宽度和高度~但是是一个约等于的值 我们不管哪些属性,也不管是什么浏览器,也不管是获取还是设置,想要都兼容的话,需要写两套 document.documentElement[attr]||document.body[attr]; //-&gt;必须document.documentElement在前 例如： [获取] document.documentElement.clientWidth||document.body.clientWidth [设置也需要写两套] document.documentElement.scrollTop=0; document.body.scrollTop=0; 12345678910function win(attr, value) &#123; if (typeof value === \"undefined\") &#123;//-&gt;没有传递value值-&gt;\"获取\" return document.documentElement[attr] || document.body[attr]; &#125; //-&gt;\"设置\" document.documentElement[attr] = value; document.body[attr] = value;&#125;console.log(win(\"clientHeight\"));win(\"scrollTop\", 0); win:一个有关于操作浏览器盒子模型的方法 如果只传递了attr没有传递value,默认的意思是“获取” 如果两个参数都传递了,意思是“设置” 不严谨的来说这就是有关于”类的重载”:同一个方法,通过传递参数的不同实现了不同的功能JS盒子模型中:client系列/offset系列/scrollWidth/scrollHeight都是”只读”属性-&gt;只能通过属性获取值,不能通过属性修改元素的样式 scrollTop/scrollLeft:滚动条卷去的高度/宽度(这两个属性是唯一”可读写”属性) //box.scrollTop = 0;//-&gt;直接回到了容器的顶部 我们的scrollTop的值是存在边界值(最大和最小值的),我们设置的值比最小值小或者比最大值大都没用,起到效果的依然是边界的值 1234567[最小值是零] box.scrollTop = -1000;//-&gt;直接回到了容器的顶部,没有超出 console.log(box.scrollTop);//-&gt;0[最大值是=真实的高度-当前容器一屏幕的高度] var maxTop = box.scrollHeight - box.clientHeight; console.log(maxTop);","categories":[{"name":"javascript","slug":"javascript","permalink":"http://lingkeyu.com/categories/javascript/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"前端学习","slug":"前端学习","permalink":"http://lingkeyu.com/tags/前端学习/"}]},{"title":"数组的方法汇集+解析","slug":"数组的方法汇集+解析","date":"2017-07-20T01:02:31.000Z","updated":"2018-09-01T13:05:03.343Z","comments":true,"path":"2017/07/20/数组的方法汇集+解析/","link":"","permalink":"http://lingkeyu.com/2017/07/20/数组的方法汇集+解析/","excerpt":"数组的方法汇集+解析数组方法的运用,在实际的项目真的是涉及到很多,熟练运用好数组的方法,可以帮我们轻松解决掉很多问题,那么数组的方法有哪些? 我特意去收集查找了一下,码了下来…..","text":"数组的方法汇集+解析数组方法的运用,在实际的项目真的是涉及到很多,熟练运用好数组的方法,可以帮我们轻松解决掉很多问题,那么数组的方法有哪些? 我特意去收集查找了一下,码了下来…..创建一个数组: // 字面量方式: // 这个方法也是我们最常用的，在初始化数组的时候 相当方便 var a = [3, 11, 8]; // [3,11,8]; // 构造器: // 实际上 new Array === Array,加不加new 一点影响都没有。 var a = Array(); // [] var a = Array(3); // [,,] var a = Array(3,11,8); // [ 3,11,8 ] ES6 Array.of() 返回由所有参数值组成的数组定义：返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。目的：Array.of() 出现的目的是为了解决上述构造器因参数个数不同，导致的行为有差异的问题。 let a = Array.of(3, 11, 8); // [3,11,8] let a = Array.of(3); // [3] ES6 Arrary.from() 将两类对象转为真正的数组定义：用于将两类对象转为真正的数组（不改变原对象，返回新的数组）。参数：第一个参数(必需):要转化为真正数组的对象。第二个参数(可选): 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。第三个参数(可选): 用来绑定this。 // 1. 对象拥有length属性 let obj = {0: ‘a’, 1: ‘b’, 2:’c’, length: 3}; let arr = Array.from(obj); // [‘a’,’b’,’c’]; // 2. 部署了 Iterator接口的数据结构 比如:字符串、Set、NodeList对象 let arr = Array.from(‘hello’); // [‘h’,’e’,’l’,’l’,’o’] let arr = Array.from(new Set([‘a’,’b’])); // [‘a’,’b’] 方法:数组原型提供了非常多的方法，这里分为三类来讲，一类会改变原数组的值，一类是不会改变原数组，以及数组的遍历方法。改变原数组的方法(9个): let a = [1,2,3]; ES5: a.splice()/ a.sort() / a.pop()/ a.shift()/ a.push()/ a.unshift()/ a.reverse() ES6: a.copyWithin() / a.fill 对于这些能够改变原数组的方法，要注意避免在循环遍历中改变原数组的选项，比如: 改变数组的长度，导致遍历的长度出现问题。splice() 添加/删除数组元素定义： splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目语法： array.splice(index,howmany,item1,…..,itemX)参数:index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。item1, …, itemX： 可选。向数组添加的新项目。返回值: 如果有元素被删除,返回包含被删除项目的新数组。eg1:删除元素 let a = [1, 2, 3, 4, 5, 6, 7]; let item = a.splice(0, 3); // [1,2,3] console.log(a); // [4,5,6,7] // 从数组下标0开始，删除3个元素 let item = a.splice(-1, 3); // [7] // 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7 eg2: 删除并添加 let a = [1, 2, 3, 4, 5, 6, 7]; let item = a.splice(0,3,’添加’); // [1,2,3] console.log(a); // [‘添加’,4,5,6,7] // 从数组下标0开始，删除3个元素，并添加元素’添加’ let b = [1, 2, 3, 4, 5, 6, 7]; let item = b.splice(-2,3,’添加1’,’添加2’); // [6,7] console.log(b); // [1,2,3,4,5,’添加1’,’添加2’] // 从数组最后第二个元素开始，删除3个元素，并添加两个元素’添加1’、’添加2’ eg3: 不删除只添加: let a = [1, 2, 3, 4, 5, 6, 7]; let item = a.splice(0,0,’添加1’,’添加2’); // [] 没有删除元素，返回空数组 console.log(a); // [‘添加1’,’添加2’,1,2,3,4,5,6,7] let b = [1, 2, 3, 4, 5, 6, 7]; let item = b.splice(-1,0,’添加1’,’添加2’); // [] 没有删除元素，返回空数组 console.log(b); // [1,2,3,4,5,6,’添加1’,’添加2’,7] 在最后一个元素的前面添加两个元素 从上述三个栗子可以得出:数组如果元素不够，会删除到最后一个元素为止操作的元素，包括开始的那个元素可以添加很多个元素添加是在开始的元素前面添加的sort() 数组排序定义: sort()方法对数组元素进行排序，并返回这个数组。参数可选: 规定排序顺序的比较函数。默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用toString()方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。 // 字符串排列 看起来很正常 var a = [“Banana”, “Orange”, “Apple”, “Mango”]; a.sort(); // [“Apple”,”Banana”,”Mango”,”Orange”] // 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的 var a = [10, 1, 3, 20,25,8]; console.log(a.sort()) // [1,10,20,25,3,8]; 比较函数的两个参数：sort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：若比较函数返回值&lt;0，那么a将排到b的前面;若比较函数返回值=0，那么a 和 b 相对位置不变；若比较函数返回值&gt;0，那么b 排在a 将的前面；sort排序常见用法：数组元素为数字的升序、降序: var array = [10, 1, 3, 4,20,4,25,8]; // 升序 a-b &lt; 0 a将排到b的前面，按照a的大小来排序的 // 比如被减数a是10，减数是20 10-20 &lt; 0 被减数a(10)在减数b(20)前面 array.sort(function(a,b){ return a-b; }); console.log(array); // [1,3,4,4,8,10,20,25]; // 降序 被减数和减数调换了 20-10&gt;0 被减数b(20)在减数a(10)的前面 array.sort(function(a,b){ return b-a; }); console.log(array); // [25,20,10,8,4,4,3,1]; 数组多条件排序 var array = [{id:10,age:2},{id:5,age:4},{id:6,age:10},{id:9,age:6},{id:2,age:8},{id:10,age:9}]; array.sort(function(a,b){ if(a.id === b.id){// 如果id的值相等，按照age的值降序 return b.age - a.age }else{ // 如果id的值不相等，按照id的值升序 return a.id - b.id } }) // [{“id”:2,”age”:8},{“id”:5,”age”:4},{“id”:6,”age”:10},{“id”:9,”age”:6},{“id”:10,”age”:9},{“id”:10,”age”:2}] 自定义比较函数，天空才是你的极限类似的：运用好返回值，我们可以写出任意符合自己需求的比较函数 var array = [{name:’Koro1’},{name:’Koro1’},{name:’OB’},{name:’Koro1’},{name:’OB’},{name:’OB’}]; array.sort(function(a,b){ if(a.name === ‘Koro1’){// 如果name是’Koro1’ 返回-1 ，-1&lt;0 a排在b的前面 return -1 }else{ // 如果不是的话，a排在b的后面 return 1 } }) // [{“name”:”Koro1”},{“name”:”Koro1”},{“name”:”Koro1”},{“name”:”OB”},{“name”:”OB”},{“name”:”OB”}] pop() 删除一个数组中的最后的一个元素定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。参数: 无。 let a = [1,2,3]; let item = a.pop(); // 3 console.log(a); // [1,2] shift() 删除数组的第一个元素定义: shift()方法删除数组的第一个元素，并返回这个元素。参数: 无。 let a = [1,2,3]; let item = a.shift(); // 1 console.log(a); // [2,3] push() 向数组的末尾添加元素定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。参数: item1, item2, …, itemX ,要添加到数组末尾的元素 let a = [1,2,3]; let item = a.push(‘末尾’); // 4 console.log(a); // [1,2,3,’末尾’] unshift()定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。参数: item1, item2, …, itemX ,要添加到数组开头的元素 let a = [1,2,3]; let item = a.unshift(‘开头’); // 4 console.log(a); // [‘开头’,1,2,3] reverse() 颠倒数组中元素的顺序定义: reverse() 方法用于颠倒数组中元素的顺序。参数: 无 let a = [1,2,3]; a.reverse(); console.log(a); // [3,2,1] ES6: copyWithin() 指定位置的成员复制到其他位置定义: 在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。语法: array.copyWithin(target, start = 0, end = this.length) 参数:三个参数都是数值，如果不是，会自动转为数值.target（必需）：从该位置开始替换数据。如果为负值，表示倒数。start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。end（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。浏览器兼容(MDN): chrome 45,Edge 12,Firefox32,Opera 32,Safari 9, IE 不支持eg: // -2相当于3号位，-1相当于4号位 [1, 2, 3, 4, 5].copyWithin(0, -2, -1) // [4, 2, 3, 4, 5] var a=[‘OB1’,’Koro1’,’OB2’,’Koro2’,’OB3’,’Koro3’,’OB4’,’Koro4’,’OB5’,’Koro5’] // 2位置开始被替换,3位置开始读取要替换的 5位置前面停止替换 a.copyWithin(2,3,5) // [“OB1”,”Koro1”,”Koro2”,”OB3”,”OB3”,”Koro3”,”OB4”,”Koro4”,”OB5”,”Koro5”] 从上述栗子:第一个参数是开始被替换的元素位置要替换数据的位置范围:从第二个参数是开始读取的元素，在第三个参数前面一个元素停止读取数组的长度不会改变读了几个元素就从开始被替换的地方替换几个元素ES6: fill() 填充数组定义: 使用给定值，填充一个数组。参数:第一个元素(必须): 要填充数组的值第二个元素(可选): 填充的开始位置,默认值为0第三个元素(可选)：填充的结束位置，默认是为this.length ['a', 'b', 'c'].fill(7) // [7, 7, 7] ['a', 'b', 'c'].fill(7, 1, 2) // ['a', 7, 'c'] 不改变原数组的方法(8个): ES5： slice、join、toLocateString、toStrigin、cancat、indexOf、lastIndexOf、 ES7： includes slice() 浅拷贝数组的元素 定义： 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。 注意：字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。 语法: array.slice(begin, end); 参数: begin(可选): 索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。 end(可选):索引数值(不包括),接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。 let a= ['hello','world']; let b=a.slice(0,1); // ['hello'] a[0]='改变原数组'; console.log(a,b); // ['改变原数组','world'] ['hello'] b[0]='改变拷贝的数组'; console.log(a,b); // ['改变原数组','world'] ['改变拷贝的数组'] 如上：新数组是浅拷贝的，元素是简单数据类型，改变之后不会互相干扰。 如果是复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变。 let a= [{name:'OBKoro1'}]; let b=a.slice(); console.log(b,a); // [{\"name\":\"OBKoro1\"}] [{\"name\":\"OBKoro1\"}] // a[0].name='改变原数组'; // console.log(b,a); // [{\"name\":\"改变原数组\"}] [{\"name\":\"改变原数组\"}] // b[0].name='改变拷贝数组',b[0].koro='改变拷贝数组'; // [{\"name\":\"改变拷贝数组\",\"koro\":\"改变拷贝数组\"}] [{\"name\":\"改变拷贝数组\",\"koro\":\"改变拷贝数组\"}] 原因在定义上面说过了的：slice()是浅拷贝，对于复杂的数据类型浅拷贝，拷贝的只是指向原数组的指针，所以无论改变原数组，还是浅拷贝的数组，都是改变原数组的数据。 join() 数组转字符串 定义: join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。 语法: array.join(str) 参数: str(可选): 指定要使用的分隔符，默认使用逗号作为分隔符。 let a= ['hello','world']; let str=a.join(); // 'hello,world' let str2=a.join('+'); // 'hello+world' 使用join方法或者下文说到的toString方法时，当数组中的元素也是数组或者是对象时会出现什么情况？ let a= [['OBKoro1','23'],'test']; let str1=a.join(); // OBKoro1,23,test let b= [{name:'OBKoro1',age:'23'},'test']; let str2 = b.join(); // [object Object],test // 对象转字符串推荐JSON.stringify(obj); 所以，join()/toString()方法在数组元素是数组的时候，会将里面的数组也调用join()/toString(),如果是对象的话，对象会被转为[object Object]字符串。 toLocaleString() 数组转字符串 定义: 返回一个表示数组元素的字符串。该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。 语法: array.toLocaleString() 参数：无。 let a=[{name:'OBKoro1'},23,'abcd',new Date()]; let str=a.toLocaleString(); // [object Object],23,abcd,2018/5/28 下午1:52:20 如上述栗子：调用数组的toLocaleString方法，数组中的每个元素都会调用自身的toLocaleString方法，对象调用对象的toLocaleString,Date调用Date的toLocaleString。 toString() 数组转字符串 不推荐 定义: toString() 方法可把数组转换为由逗号链接起来的字符串。 语法: array.toString() 参数: 无。 该方法的效果和join方法一样，都是用于数组转字符串的，但是与join方法相比没有优势，也不能自定义字符串的分隔符，因此不推荐使用。 值得注意的是：当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串 let b= [ 'toString','演示'].toString(); // toString,演示 let a= ['调用toString','连接在我后面']+'啦啦啦'; // 调用toString,连接在我后面啦啦啦 cancat 定义： 方法用于合并两个或多个数组，返回一个新数组。 语法： var newArr =oldArray.concat(arrayX,arrayX,......,arrayX) arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。eg1: let a = [1, 2, 3]; let b = [4, 5, 6]; //连接两个数组 let newVal=a.concat(b); // [1,2,3,4,5,6] // 连接三个数组 let c = [7, 8, 9] let newVal2 = a.concat(b, c); // [1,2,3,4,5,6,7,8,9] // 添加元素 let newVal3 = a.concat(‘添加元素’,b, c,’再加一个’); // [1,2,3,”添加元素”,4,5,6,7,8,9,”再加一个”] // 合并嵌套数组 会浅拷贝嵌套数组 let d = [1,2 ]; let f = [3,[4]]; let newVal4 = d.concat(f); // [1,2,3,[4]] ES6扩展运算符…合并数组：因为ES6的语法更简洁易懂，所以现在合并数组我大部分采用…来处理，…运算符可以实现cancat的每个栗子，且更简洁和具有高度自定义数组元素位置的效果。 let a = [2, 3, 4, 5] let b = [ 4,…a, 4, 4] console.log(a,b); // [2, 3, 4, 5] [4,2,3,4,5,4,4] indexOf() 查找数组是否存在某个元素，返回下标定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。语法: array.indexOf(searchElement,fromIndex) 参数:searchElement(必须):被查找的元素fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。严格相等的搜索:数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等===搜索元素，即数组元素要完全匹配才能搜索成功。注意：indexOf()不能识别NaNeg: let a=[‘啦啦’,2,4,24,NaN] console.log(a.indexOf(‘啦’)); // -1 console.log(a.indexOf(‘NaN’)); // -1 console.log(a.indexOf(‘啦啦’)); // 0 使用场景：数组去重根据获取的数组下标执行操作，改变数组中的值等。判断是否存在，执行操作。lastIndexOf() 查找指定元素在数组中的最后一个位置定义: 方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）语法: arr.lastIndexOf(searchElement,fromIndex) 参数:searchElement(必须): 被查找的元素fromIndex(可选): 逆向查找开始位置，默认值数组的长度-1，即查找整个数组。关于fromIndex有三个规则:正值。如果该值大于或等于数组的长度，则整个数组会被查找。负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。 let a=[‘OB’,4,’Koro1’,1,2,’Koro1’,3,4,5,’Koro1’]; // 数组长度为10 // let b=a.lastIndexOf(‘Koro1’,4); // 从下标4开始往前找 返回下标2 // let b=a.lastIndexOf(‘Koro1’,100); // 大于或数组的长度 查找整个数组 返回9 // let b=a.lastIndexOf(‘Koro1’,-11); // -1 数组不会被查找 let b=a.lastIndexOf(‘Koro1’,-9); // 从第二个元素4往前查找，没有找到 返回-1 ES7 includes() 查找数组是否包含某个元素 返回布尔定义： 返回一个布尔值，表示某个数组是否包含给定的值语法： array.includes(searchElement,fromIndex=0) 参数：searchElement(必须):被查找的元素fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。includes方法是为了弥补indexOf方法的缺陷而出现的:indexOf方法不能识别NaNindexOf方法检查是否包含某个值不够语义化，需要判断是否不等于-1，表达不够直观eg: let a=[‘OB’,’Koro1’,1,NaN]; // let b=a.includes(NaN); // true 识别NaN // let b=a.includes(‘Koro1’,100); // false 超过数组长度 不搜索 // let b=a.includes(‘Koro1’,-3); // true 从倒数第三个元素开始搜索 // let b=a.includes(‘Koro1’,-100); // true 负值绝对值超过数组长度，搜索整个数组 兼容性(MDN): chrome47, Firefox 43,Edge 14,Opera 34, Safari 9,IE 未实现。遍历方法(12个):js中遍历数组并不会改变原始数组的方法总共有12个: ES5： forEach、every 、some、 filter、map、reduce、reduceRight、 ES6： find、findIndex、keys、values、entries 关于遍历：尽量不要在遍历的时候，修改后面要遍历的值尽量不要在遍历的时候修改数组的长度（删除/添加）forEach定义: 按升序为数组中含有效值的每一项执行一次回调函数。语法： array.forEach(function(currentValue, index, arr), thisValue) 参数:function(必须): 数组中每个元素需要调用的函数。 // 回调函数的参数 1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身 thisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined关于forEach()你要知道：无法中途退出循环，只能用return退出本次回调，进行下一次回调。它总是返回 undefined值,即使你return了一个值。下面类似语法同样适用这些规则 1. 对于空数组是不会执行回调函数的 2. 对于已在迭代过程中删除的元素，或者空元素会跳过回调函数 3. 遍历次数再第一次循环前就会确定，再添加到数组中的元素不会被遍历。 4. 如果已经存在的值被改变，则传递给 callback 的值是遍历到他们那一刻的值。 eg: let a = [1, 2, ,3]; // 最后第二个元素是空的，不会遍历(undefined、null会遍历) let obj = { name: ‘OBKoro1’ }; let result = a.forEach(function (value, index, array) { a[3] = ‘改变元素’; a.push(‘添加到尾端，不会被遍历’) console.log(value, ‘forEach传递的第一个参数’); // 分别打印 1 ,2 ,改变元素 console.log(this.name); // OBKoro1 打印三次 this绑定在obj对象上 // break; // break会报错 return value; // return只能结束本次回调 会执行下次回调 console.log(‘不会执行，因为return 会执行下一次循环回调’) }, obj); console.log(result); // 即使return了一个值,也还是返回undefined // 回调函数也接受接头函数写法 every 检测数组所有元素是否都符合判断条件定义: 方法用于检测数组所有元素是否都符合函数定义的条件语法： array.every(function(currentValue, index, arr), thisValue) 参数:(这几个方法的参数，语法都类似)function(必须): 数组中每个元素需要调用的函数。 // 回调函数的参数 1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身 thisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined方法返回值规则:如果数组中检测到有一个元素不满足，则整个表达式返回 false，且剩余的元素不会再进行检测。如果所有元素都满足条件，则返回 true。=eg: function isBigEnough(element, index, array) { return element &gt;= 10; // 判断数组中的所有元素是否都大于10 } let result = [12, 5, 8, 130, 44].every(isBigEnough); // false let result = [12, 54, 18, 130, 44].every(isBigEnough); // true // 接受箭头函数写法 [12, 5, 8, 130, 44].every(x =&gt; x &gt;= 10); // false [12, 54, 18, 130, 44].every(x =&gt; x &gt;= 10); // true some 数组中的是否有满足判断条件的元素定义：数组中的是否有满足判断条件的元素语法： array.some(function(currentValue, index, arr), thisValue) 参数:(这几个方法的参数，语法都类似)function(必须): 数组中每个元素需要调用的函数。 // 回调函数的参数 1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身 thisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined方法返回值规则：如果有一个元素满足条件，则表达式返回true, 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。 function isBigEnough(element, index, array) { return (element &gt;= 10); //数组中是否有一个元素大于 10 } let result = [2, 5, 8, 1, 4].some(isBigEnough); // false let result = [12, 5, 8, 1, 4].some(isBigEnough); // true filter 过滤原始数组，返回新数组定义: 返回一个新数组, 其包含通过所提供函数实现的测试的所有元素。语法： let new_array = arr.filter(function(currentValue, index, arr), thisArg) 参数:(这几个方法的参数，语法都类似)function(必须): 数组中每个元素需要调用的函数。 // 回调函数的参数 1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身 thisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefinedeg: let a = [32, 33, 16, 40]; let result = a.filter(function (value, index, array) { return value &gt;= 18; // 返回a数组中所有大于18的元素 }); console.log(result,a);// [32,33,40] [32,33,16,40] map 对数组中的每个元素进行处理，返回新的数组定义：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。语法： let new_array = arr.map(function(currentValue, index, arr), thisArg) 参数:(这几个方法的参数，语法都类似)function(必须): 数组中每个元素需要调用的函数。 // 回调函数的参数 1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身 thisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefinedeg:let a = [‘1’,’2’,’3’,’4’];let result = a.map(function (value, index, array) { return value + ‘新数组的新元素’});console.log(result, a);// [“1新数组的新元素”,”2新数组的新元素”,”3新数组的新元素”,”4新数组的新元素”] [“1”,”2”,”3”,”4”] reduce 为数组提供累加器，合并为一个值定义：reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，最终合并为一个值。语法： array.reduce(function(total, currentValue, currentIndex, arr), initialValue) 参数：function(必须): 数组中每个元素需要调用的函数。 // 回调函数的参数 1. total(必须)，初始值, 或者上一次调用回调返回的值 2. currentValue(必须),数组当前元素的值 3. index(可选), 当前元素的索引值 4. arr(可选),数组对象本身 initialValue(可选): 指定第一次回调 的第一个参数。回调第一次执行时:如果 initialValue 在调用 reduce 时被提供，那么第一个 total 将等于 initialValue，此时 currentValue 等于数组中的第一个值；如果 initialValue 未被提供，那么 total 等于数组中的第一个值，currentValue 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么回调不会被执行，数组的唯一值将被返回。eg: // 数组求和 let sum = [0, 1, 2, 3].reduce(function (a, b) { return a + b; }, 0); // 6 // 将二维数组转化为一维 将数组元素展开 let flattened = [[0, 1], [2, 3], [4, 5]].reduce( (a, b) =&gt; a.concat(b), [] ); // [0, 1, 2, 3, 4, 5] reduceRight 从右至左累加这个方法除了与reduce执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。ES6：find()&amp; findIndex() 根据条件找到数组成员find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回undefined。findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。这两个方法语法： let new_array = arr.find(function(currentValue, index, arr), thisArg) let new_array = arr.findIndex(function(currentValue, index, arr), thisArg) 参数:(这几个方法的参数，语法都类似)function(必须): 数组中每个元素需要调用的函数。 // 回调函数的参数 1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身 thisValue(可选): 当执行回调函数时this绑定对象的值，默认值为undefined这两个方法都可以识别NaN,弥补了indexOf的不足.eg: // find let a = [1, 4, -5, 10].find((n) =&gt; n &lt; 0); // 返回元素-5 let b = [1, 4, -5, 10,NaN].find((n) =&gt; Object.is(NaN, n)); // 返回元素NaN // findIndex let a = [1, 4, -5, 10].findIndex((n) =&gt; n &lt; 0); // 返回索引2 let b = [1, 4, -5, 10,NaN].findIndex((n) =&gt; Object.is(NaN, n)); // 返回索引4 浏览器兼容(MDN):Chrome 45,Firefox 25,Opera 32, Safari 8, Edge yes,ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值定义：三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值。语法： array.keys() array.values() array.entries() 参数：无。 for (let index of ['a', 'b'].keys()) { console.log(index); } // 0 // 1 for (let elem of ['a', 'b'].values()) { console.log(elem); } // 'a' // 'b' for (let [index, elem] of ['a', 'b'].entries()) { console.log(index, elem); } // 0 \"a\" // 1 \"b\" 在for..of中如果遍历中途要退出，可以使用break退出循环。 如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历: let letter = ['a', 'b', 'c']; let entries = letter.entries(); console.log(entries.next().value); // [0, 'a'] console.log(entries.next().value); // [1, 'b'] console.log(entries.next().value); // [2, 'c']","categories":[{"name":"数组","slug":"数组","permalink":"http://lingkeyu.com/categories/数组/"},{"name":"javascript","slug":"数组/javascript","permalink":"http://lingkeyu.com/categories/数组/javascript/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"前端学习","slug":"前端学习","permalink":"http://lingkeyu.com/tags/前端学习/"}]},{"title":"Android四大组件知识点","slug":"Android四大组件知识点","date":"2017-04-19T03:02:11.000Z","updated":"2018-09-01T13:04:08.285Z","comments":true,"path":"2017/04/19/Android四大组件知识点/","link":"","permalink":"http://lingkeyu.com/2017/04/19/Android四大组件知识点/","excerpt":"Android四大组件知识点分别为activity、service、content provider、broadcast receiver。","text":"Android四大组件知识点分别为activity、service、content provider、broadcast receiver。 一、android四大组件详解 1、Activity （1）一个Activity通常就是一个单独的屏幕（窗口），它上面可以显示一些控件也可以监听并处理用户的事件做出响应。 （2）Activity之间通过Intent进行通信。 （3）android应用中每一个Activity都必须要在AndroidManifest.xml配置文件中声明，否则系统将不识别也不执行该Activity。 2、Service （1）service用于在后台完成用户指定的操作。service分为两种：（a）started（启动）：当应用程序组件（如activity）调用startService()方法启动服务时，服务处于started状态。（b）bound（绑定）：当应用程序组件调用bindService()方法绑定到服务时，服务处于bound状态。 (2)startService()与bindService()区别：(a)started service（启动服务）是由其他组件调用startService()方法启动的，这导致服务的onStartCommand()方法被调用。当服务是started状态时，其生命周期与启动它的组件无关，并且可以在后台无限期运行，即使启动服务的组件已经被销毁。因此，服务需要在完成任务后调用stopSelf()方法停止，或者由其他组件调用stopService()方法停止。 (b)使用bindService()方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。 (3)开发人员需要在应用程序配置文件中声明全部的service，使用标签。 (4)Service通常位于后台运行，它一般不需要与用户交互，因此Service组件没有图形用户界面。Service组件需要继承Service基类。Service组件通常用于为其他组件提供后台服务或监控其他组件的运行状态。 3、Content Psrovider （1）android平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。 （2）只有需要在多个应用程序间共享数据是才需要内容提供者。例如，通讯录数据被多个应用程序使用，且必须存储在一个内容提供者中。它的好处是统一数据访问方式。（3）ContentProvider实现数据共享。ContentProvider用于保存和获取数据，并使其对所有应用程序可见。这是不同应用程序间共享数据的唯一方式，因为android没有提供所有应用共同访问的公共存储区。 （4）开发人员不会直接使用ContentProvider类的对象，大多数是通过ContentResolver对象实现对ContentProvider的操作。 （5）ContentProvider使用URI来唯一标识其数据集，这里的URI以content://作为前缀，表示该数据由ContentProvider来管理。 4、Broadcast Receiver （1）你的应用可以使用它对外部事件进行过滤，只对感兴趣的外部事件(如当电话呼入时，或者数据网络可用时)进行接收并做出响应。广播接收器没有用户界面。然而，它们可以启动一个activity或serice来响应它们收到的信息，或者用NotificationManager来通知用户。通知可以用很多种方式来吸引用户的注意力，例如闪动背灯、震动、播放声音等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。 （2）广播接收者的注册有两种方法，分别是程序动态注册和AndroidManifest文件中进行静态注册。 （3）动态注册广播接收器特点是当用来注册的Activity关掉后，广播也就失效了。静态注册无需担忧广播接收器是否被关闭，只要设备是开启状态，广播接收器也是打开着的。也就是说哪怕app本身未启动，该app订阅的广播在触发时也会对它起作用。 二、android四大组件总结： （1）4大组件的注册 4大基本组件都需要注册才能使用，每个Activity、service、Content Provider都需要在AndroidManifest文件中进行配置。AndroidManifest文件中未进行声明的activity、服务以及内容提供者将不为系统所见，从而也就不可用。而broadcast receiver广播接收者的注册分静态注册（在AndroidManifest文件中进行配置）和通过代码动态创建并以调用Context.registerReceiver()的方式注册至系统。需要注意的是在AndroidManifest文件中进行配置的广播接收者会随系统的启动而一直处于活跃状态，只要接收到感兴趣的广播就会触发（即使程序未运行）。 （2）4大组件的激活 内容提供者的激活：当接收到ContentResolver发出的请求后，内容提供者被激活。而其它三种组件activity、服务和广播接收器被一种叫做intent的异步消息所激活。 （3）4大组件的关闭 内容提供者仅在响应ContentResolver提出请求的时候激活。而一个广播接收器仅在响应广播信息的时候激活。所以，没有必要去显式的关闭这些组件。Activity关闭：可以通过调用它的finish()方法来关闭一个activity。服务关闭：对于通过startService()方法启动的服务要调用Context.stopService()方法关闭服务，使用bindService()方法启动的服务要调用Context.unbindService()方法关闭服务。 （4）android中的任务（activity栈） （a）任务其实就是activity的栈，它由一个或多个Activity组成，共同完成一个完整的用户体验。栈底的是启动整个任务的Activity，栈顶的是当前运行的用户可以交互的Activity，当一个activity启动另外一个的时候，新的activity就被压入栈，并成为当前运行的activity。而前一个activity仍保持在栈之中。当用户按下BACK键的时候，当前activity出栈，而前一个恢复为当前运行的activity。栈中保存的其实是对象，栈中的Activity永远不会重排，只会压入或弹出。 （b）任务中的所有activity是作为一个整体进行移动的。整个的任务（即activity栈）可以移到前台，或退至后台。 （c）Android系统是一个多任务(Multi-Task)的操作系统，可以在用手机听音乐的同时，也执行其他多个程序。每多执行一个应用程序，就会多耗费一些系统内存，当同时执行的程序过多，或是关闭的程序没有正确释放掉内存，系统就会觉得越来越慢，甚至不稳定。为了解决这个问题，Android引入了一个新的机制，即生命周期(Life Cycle)。 Activity的生命周期：1.七大生命周期：onCreate() 第一次创建时执行;onStart() 显示窗口时执行;onResume() 可获取用户焦点时执行;onPause() 失去用户焦点时执行;onStop() 关闭窗口时执行;onRestart() 重新显示窗口时执行;onDestroy() 销毁时执行; 2.各种情况下生命周期的回调规律： （1）应用程序进来主页面后：onCreate() 创建activity时onStart () 启动时onResume() 显示时 （2) 按返回退出后： 123onPause() 暂停时 --&gt;丧失用户焦点的第一个特征onStop() 停止时onDestroy() 销毁时 （3）按home后： 12onPause() 暂停时 onStop() 停止时 （4）在home页再次点击这个应用： 123onRestart() onStart() 启动时onResume () 显示时 （5）切换成横屏后： 123456onPause() 暂停时 onStop() 停止时onDestroy() 销毁时onCreate() 创建activity时onStart() 启动时onResume() 显示时 注意设置 Activity 的 android:configChanges=”orientation|keyboardHidden|screenSize”时，切屏不会重新调用各个生命周期，只会执行 onConfigurationChanged 方法 三、Activity的启动模式： 第一：什么是启动模式，启动的模式，理解成一个activity的启动的方式。分为四种： 1、首先，我们现在没有指定任何启动模式，叫默认模式（standard）标准的启动模式，每次激活activity时都会创建activity，创建之后，会把它放到任务栈里。 2、singleTop如果在任务的栈顶，就重用该实例，如果栈顶不是这个activity，就重新实例化一个activity放到栈顶。 3、singleTask如果在栈中已经有该activity的实例，就重复使用该实例，并且把压在它上边的实例全都清除掉；如果在栈中没有找到该activity的实例，就创建一个放在栈顶。 4、singleInstance与singletask的区别是，存放singleinstance模式的activity的回退栈，不能有其他任何activity对象，也就是说，它自己单独有一个回退栈。 我们可以在 AndroidManifest.xml 配置的 android:launchMode 属性为以上四种之一即可 第二：两个 Activity 之间跳转时必然会执行的是哪几个方法？（重要） 一般情况下比如说有两个 activity,分别叫 A,B。当在 A 里面激活 B 组件的时候,A 会调用 onPause()方法,然后 B 调用 onCreate() ,onStart(), onResume()。这个时候 B 覆盖了窗体, A 会调用 onStop()方法. 如果 B 是个透明的,或者是对话框的样式, 就不会调用 A 的onStop()方法 第三：如何将一个 Activity 设置成窗口的样式？ 只需要给我们的 Activity 配置如下属性即可。android:theme=”@android:style/Theme.Dialog 第四：如何退出 Activity？如何安全退出已调用多个 Activity 的 Application？ 1、通常情况用户退出一个 Activity 只需按返回键，我们写代码想退出 activity 直接调用 finish()方法就行。 2、记录打开的 Activity：每打开一个 Activity，就记录下来。在需要退出时，关闭每一个 Activity 即可。//伪代码List lists ;// 在 application 全局的变量里面lists = new ArrayList();lists.add(this);for(Activity activity: lists){activity.finish();}lists.remove(this); 3、发送特定广播：在需要结束应用时，发送一个特定的广播，每个 Activity 收到广播后，关闭即可。//给某个 activity 注册接受接受广播的意图registerReceiver(receiver, filter)//如果过接受到的是 关闭 activity 的广播 就调用 finish()方法 把当前的 activity finish()掉 4、递归退出在打开新的 Activity 时使用 startActivityForResult，然后自己加标志，在 onActivityResult 中处理，递归关闭。 5、其实 也可以通过 intent 的 flag 来实现 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP) 激活一个新的 activity。此时如果该任务栈中已经有该 Activity，那么系统会把这个 Activity 上面的所有 Activity 干掉。其实相当于给 Activity 配置的启动模式为 SingleTop。 Service的知识点 第一：Service 是否在 main thread 中执行, service 里面是否能执行耗时的操作? 默认情况,如果没有显示的指 service 所运行的进程, Service 和 activity 是运行在当前 app 所在进程的 mainthread(UI 主线程)里面。service 里面不能执行耗时的操作(网络请求,拷贝数据库,大文件 )特殊情况 ,可以在清单文件配置 service 执行所在的进程 ,让 service 在另外的进程中执行。 第二：请描述一下 Service 的生命周期 Service 有绑定模式和非绑定模式，以及这两种模式的混合使用方式。不同的使用方法生命周期方法也不同。非绑定模式：当第一次调用 startService 的时候执行的方法依次为 onCreate()、onStartCommand()， （onStart()）当 Service 关闭的时候调用 onDestory 方法。绑定模式：第一次 bindService（）的时候，执行的方法为 onCreate()、onBind(）解除绑定的时候会执行onUnbind()、onDestory()。 上面的两种生命周期是在相对单纯的模式下的情形。我们在开发的过程中还必须注意 Service 实例只会有一个，也就是说如果当前要启动的 Service 已经存在了那么就不会再次创建该 Service 当然也不会调用 onCreate（）方法。 一个 Service 可以被多个客户进行绑定，只有所有的绑定对象都执行了 onBind（）方法后该 Service 才会销毁，不过如果有一个客户执行了 onStart()方法，那么这个时候如果所有的 bind 客户都执行了 unBind()该 Service 也不会销毁。 第三：Service 的 onStartCommand 方法有几种返回值？各代表什么意思？ 有四种返回值，不同值代表的意思如下： （1）START_STICKY：如果 service 进程被 kill 掉，保留 service 的状态为开始状态，但不保留递送的 intent 对象。随后 系 统 会 尝 试 重 新 创 建 service ， 由 于 服 务 状 态 为 开 始 状 态 ，所以创建服务后一定会调用onStartCommand(Intent,int,int)方法。如果在此期间没有任何启动命令被传递到 service，那么参数 Intent 将为 null。 （2）START_NOT_STICKY：“非粘性的”。使用这个返回值时，如果在执行完 onStartCommand 后，服务被异常 kill掉，系统不会自动重启该服务。 （3）START_REDELIVER_INTENT：重传 Intent。使用这个返回值时，如果在执行完 onStartCommand 后，服务被异常 kill 掉，系统会自动重启该服务，并将 Intent 的值传入。 （4）START_STICKY_COMPATIBILITY：START_STICKY 的兼容版本，但不保证服务被 kill 后一定能重启 第四：Service 的 onRebind（Intent）方法在什么情况下会执行？ 如果在 onUnbind（）方法返回 true 的情况下会执行，否则不执行。 ####BroadCastReceiverBroadCastReceiver 是 Android 四大组件之一，主要用于接收系统或者 app 发送的广播事件。 广播分两种：有序广播和无序广播。内部通信实现机制：通过 Android 系统的 Binder 机制实现通信。 无序广播：完全异步，逻辑上可以被任何广播接收者接收到。优点是效率较高。缺点是一个接收者不能将处理结果传递给下一个接收者，并无法终止广播 intent 的传播。 有序广播：按照被接收者的优先级顺序，在被接收者中依次传播。比如有三个广播接收者 A，B，C，优先级是 A &gt; B &gt; C。那这个消息先传给 A，再传给 B，最后传给 C。每个接收者有权终止广播，比如 B 终止广播，C 就无法接收到。此外 A 接收到广播后可以对结果对象进行操作，当广播传给 B 时，B 可以从结果对象中取得 A 存入的数据。在通过 Context.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode,initialData, initialExtras)时我们可以指定 resultReceiver 广播接收者，这个接收者我们可以认为是最终接收者，通常情况下如果比他优先级更高的接收者如果没有终止广播，那么他的 onReceive 会被执行两次，第一次是正常的按照优先级顺序执行，第二次是作为最终接收者接收。如果比他优先级高的接收者终止了广播，那么他依然能接收到广播。在我们的项目中经常使用广播接收者接收系统通知，比如开机启动、sd 挂载、低电量、外拨电话、锁屏等。如果我们做的是播放器，那么监听到用户锁屏后我们应该将我们的播放之暂停等。 BroadCastReceiver 的生命周期：a. 广播接收者的生命周期非常短暂的，在接收到广播的时候创建，onReceive()方法结束之后销毁；b. 广播接收者中不要做一些耗时的工作，否则会弹出 Application No Response 错误对话框；c. 最好也不要在广播接收者中创建子线程做耗时的工作，因为广播接收者被销毁后进程就成为了空进程，很容易被系统杀掉；d. 耗时的较长的工作最好放在服务中完成； 第三：什么是最终广播接收者？ 最终广播是我们自己应用发送有序广播时通过 ContextWrapper.sendOrderedBroadcast()方法指定的当前应用下的广播，该广播可能会被执行两次，第一次是作为普通广播按照优先级接收广播，第二次是作为 final receiver 必须接收一次。 第四：广播的优先级对无序广播生效吗？—- 生效！！！！ 第五：动态注册的广播谁的优先级高？—– 谁先注册谁的优先级高！！ 第六：如何判断当前 BroadcastReceiver 接收到的是有序广播还是无序广播 ？ 在 BroadcastReceiver 类中 onReceive（）方法中，可以调用 boolean b = isOrderedBroadcast（）;该方法是BroadcastReceiver 类中提供的方法，用于告诉我们当前的接收到的广播是否为有序广播 ContentProvider&amp; 数据库 ContentProvider 是如何实现数据共享的？ 在 Android 中如果想将自己应用的数据（一般多为数据库中的数据）提供给第三发应用，那么我们只能通过ContentProvider 来实现了。ContentProvider 是应用程序之间共享数据的接口。使用的时候首先自定义一个类继承 ContentProvider，然后覆写 query、insert、update、delete 等方法。因为其是四大组件之一因此必须在 AndroidManifest 文件中进行注册。 为什么要用 ContentProvider？它和 sql 的实现上有什么差别？ ContentProvider 屏蔽了数据存储的细节,内部实现对用户完全透明,用户只需要关心操作数据的 uri 就可以了，ContentProvider 可以实现不同 app 之间共享。Sql 也有增删改查的方法，但是 sql 只能查询本应用下的数据库。而 ContentProvider 还可以去增删改查本地文件. xml 文件的读取等。 ContentProvider、ContentResolver、ContentObserver 之间的关系 ContentProvider 内容提供者，用于对外提供数据ContentResolver.notifyChange(uri)发出消息ContentResolver 内容解析者，用于获取内容提供者提供的数据ContentObserver 内容监听器，可以监听数据的改变状态ContentResolver.registerContentObserver()监听消息。","categories":[{"name":"android","slug":"android","permalink":"http://lingkeyu.com/categories/android/"}],"tags":[{"name":"知识管理","slug":"知识管理","permalink":"http://lingkeyu.com/tags/知识管理/"},{"name":"Android","slug":"Android","permalink":"http://lingkeyu.com/tags/Android/"}]}]}